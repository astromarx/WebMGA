{"version":3,"sources":["Model/Shapes.js","Model/ParticleSet.js","Model/Light.js","Model/Grid.js","Model/Model.js","View/Top.js","View/Tools.js","View/SubMenus.js","View/Side.js","View/View.js","Samples/sample1.txt","Controller.js","App.js","index.js"],"names":["Shape","levels","maxComplexity","minComplexity","stripGeometries","fanGeometries","this","args","arguments","x","y","z","translate","stripGeometry","e","rotateX","rotateY","vertices","normals","type","g","BufferGeometry","setAttribute","BufferAttribute","Float32Array","from","localeCompare","BufferGeometryUtils","toTrianglesDrawMode","TriangleStripDrawMode","push","TriangleFanDrawMode","mergeBufferGeometries","vec","scale","undefined","Math","pow","length","sqrt","map","Ellipsoid","genGeometries","mergeGeometries","actComplexity","piece","temp","currLevel","PI","i","j","sin","cos","normalize","addGeometry","Spherocylinder","radius","Spheroplatelet","radSphere","radCircle","plusZ","minusZ","projectionUp","projectionDown","CutSphere","zCut","angle","acos","radiusFan","ParticleSet","n","ot","d","particles","meshes","Particle","geometries","name","orientationType","setDefaults","genParticles","genMeshes","m","p","Mesh","material","position","orientation","attributes","euler","nP","geoms","split","a","parseFloat","console","log","slice","getRotations","shape","clone","rotate","shapeType","display","colour","MeshLambertMaterial","color","parameters","SHAPE","pos","rotateZ","rot","q","Quaternion","Euler","defaultVector","Vector3","setFromUnitVectors","setFromQuaternion","fromArray","setFromAxisAngle","Light","lightType","setDefaultLights","light","set","c","setHex","parseInt","substring","intensity","AmbientLight","DirectionalLight","PointLight","AMBIENT","DIRECTIONAL","POINT","Grid","s","axes","size","genAxes","genSubgrid","subGrid","GridHelper","axesMaterial","LineBasicMaterial","linewidth","axesSize","Line","setFromPoints","Model","configuration","gridEnabled","axesEnabled","sidebarExpanded","cameraType","scene","Scene","setDefault","renderer","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","lookAt","updateDimensions","setCamera","lighting","grid","bgColour","setClearColor","l","add","camera","controls","update","render","height","innerHeight","width","innerWidth","setSize","PerspectiveCamera","OrthographicCamera","zoom","OrbitControls","domElement","target","aspect","left","right","top","bottom","updateProjectionMatrix","rgbToHex","r","b","enabled","visible","updateColour","updatePosition","rgb","passGrid","passAxes","toggleGrid","toggleAxes","updateSize","remove","autoRotate","componentToHex","hex","toString","data","setData","ps","particleSets","particleSet","setConfiguration","ExportDropdown","props","Dropdown","FormGroup","controlId","Item","divider","RadioGroup","Radio","value","panel","style","padding","FlexboxGrid","justify","Button","appearance","SamplesDropdown","Top","Header","Navbar","Body","Nav","pullRight","ButtonToolbar","active","fps","icon","Icon","title","trigger","placement","pullLeft","ParameterSet","val","titles","values","numerical","f","index","ParameterInput","state","changeValue","bind","InputBox","defaultVal","InputNumber","defaultValue","step","onChange","act","vals","listItems","Row","marginTop","Col","md","marginLeft","React","Component","SliceSlider","useState","setValue","InputGroup","min","max","nextValue","end","Addon","start","RangeSlider","progress","CustomSlider","disabled","boundaries","Slider","marginBottom","TITLE_LEFT_MARGIN","dividerStyle","LODToolTip","Tooltip","ModelsOptions","Divider","className","xs","Checkbox","ViewOptions","View","ViewOptionsState","model","toggleAutorotate","selectCameraType","updateLOD","updateLookat","setState","rotating","toggleCameraRotation","LOD","updateLookAt","antialiasing","fluid","checked","onClick","defaultChecked","Form","layout","ControlLabel","Whisper","speaker","circle","graduated","renderMark","mark","SlicingOptions","AdditionalLightsNav","onSelect","activeKey","margin","justified","eventKey","AdditionalLightOptions","PointLightState","reset","handleSelect","toggleLightEnabled","DirectionalLightState","updateLight","updateLightPosition","lightState","AmbientLightOptions","AmbientLightState","updateAmbientLightColour","updateBackgroundColour","ambientLightColour","backgroundColour","updateBg","VisualElementsOptions","VisualElementsState","toggleBoundingShapeEnabled","selectShape","updateGridColour","updateGridSize","gridColour","boundingShapeEnabled","activeShape","showAxes","showGrid","NavToggle","expand","IconButton","textAlign","navItemStyle","CustomNav","backgroundColor","tooltip","MenuContent","menuContent","SideMenu","handleToggle","toggleSidebar","Sidebar","flexDirection","collapsible","Container","vertical","Content","ModelDefaultState","fun","ViewOptionsDefaultState","PointLightDefaultState","DirectionalLightDefaultState","VisualElementsDefaultState","AmbientLightDefaultState","header","sidebar","Side","Controller","addListeners","loadSample","getHeader","view","getSiderbar","getDomElement","requestAnimationFrame","fetch","sample","then","res","text","configData","load","document","body","overflow","addEventListener","updateCamera","onkeydown","key","keyCode","App","controller","mount","appendChild","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9dfdac4a.chunk.js","sourcesContent":["import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    maxComplexity = [20, 20];\n    minComplexity = [5, 5]\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n\n    constructor() {\n        this.args = arguments[0];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n    translate(x, y, z) {\n        for (let f of this.fanGeometries) {\n            f.translate(x, y, z);\n        }\n        this.stripGeometry.translate(x, y, z);\n    }\n\n    rotate(e) {\n        for (let f of this.fanGeometries) {\n            f.rotateX(e.x);\n        }\n        this.stripGeometry.rotateX(e.x);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.y);\n        }\n        this.stripGeometry.rotateY(e.y);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.z);\n        }\n        this.stripGeometry.rotateY(e.z);\n    }\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","import {Mesh,\n    MeshLambertMaterial,\n    Vector3,\n    Quaternion,\n    Euler\n    } from 'three';\nimport * as SHAPE from './Shapes.js';\n\nexport class ParticleSet{\n    name;\n    shape;\n    shapeType;\n    display;\n    material;\n    parameters;\n    colour;\n    orientationType;\n\n    particles = []\n    meshes = [];\n\n    constructor(n, ot, d){\n        this.name = n;\n        this.orientationType = ot;\n        this.setDefaults();\n        this.genParticles(d);\n        this.genMeshes();\n    }\n\n    genMeshes(){\n        let m;\n        for(let p of this.particles){\n            for(let g of p.geometries){\n                m = new Mesh(g, this.material);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    genParticles(particles){\n\n        let position, orientation, attributes, euler, nP;\n        let geoms = [], temp = [];\n\n        let i = 1;\n        for(let p of particles){\n            attributes = p.split(\" \");\n\n            for(let a of attributes){\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7){break;}\n            \n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n\n            // console.log(i);\n            // i++;\n            // console.log('attributes');\n            // console.log(attributes);\n\n            geoms.push(this.shape.stripGeometry.clone());\n            geoms.push(this.shape.fanGeometries[0].clone());\n            geoms.push(this.shape.fanGeometries[1].clone());\n            \n            this.translate(position, geoms);\n            this.rotate(euler, geoms);\n\n            nP = new this.Particle(geoms);\n            this.particles.push(nP);\n\n            geoms = [];\n\n        }\n    }\n\n    setDefaults(){\n        this.shapeType = 'ellipsoid';\n        this.display = 'model';\n        this.colour =  0xF7F7F7;\n        this.material = new MeshLambertMaterial({color: this.colour});\n        this.parameters = (2, 3);\n        this.genGeometries();\n    }\n\n    genGeometries(){\n        switch(this.shapeType){\n            case 'ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(0.5, 0.3, 0.7);\n                break;\n            case 'spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(0.5,8);\n                break;\n            case 'spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(0.5,0.7);\n                break;\n            case 'cutsphere':\n                this.shape = new SHAPE.CutSphere(this.parameters);\n                break;\n            case 'sphere':\n                this.shape = new SHAPE.CutSphere(this.parameters, this.parameters);\n                break;\n        }\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    getRotations(type, rot){\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type){\n            case 'v':\n                let defaultVector = new Vector3(0,0,1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n        \n    }\n\n    Particle = class Particle{\n        geometries;\n        constructor(g){\n            this.geometries = g;\n        }\n\n    }\n}\n\nexport default ParticleSet;","import {\n    AmbientLight,\n    DirectionalLight,\n    PointLight\n} from 'three';\n\nexport class Light {\n    light;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n    constructor(lightType) {\n        this.setDefaultLights(lightType);\n    }\n\n    updatePosition(x, y, z){\n        this.light.position.set(x, y, z);\n    }\n\n    updateColour(c, i){\n        this.light.color.setHex(parseInt(c.substring(1), 16));\n        this.light.intensity = i * 0.01;\n    }\n\n    setDefaultLights(lightType) {\n        switch (lightType) {\n            case 'ambient':\n                this.light = new AmbientLight(\"#0ff0ff\", 0.4);\n                break;\n            case 'directional':\n                this.light = new DirectionalLight(\"#ffff00\", 0.5);\n                break;\n            case 'point':\n                this.light = new PointLight(\"#ffffff\", 0.6);\n                this.light.position.set(5, 0, 2);\n                break;\n        }\n    }\n}\n\nexport default Light;","import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3, \n    BufferGeometry,\n    Line} from 'three';\nexport class Grid {\n    subGrid;\n    axes = [];\n\n    size;\n    colour;\n\n    constructor(s, c){\n        this.size = s;\n        this.colour = c;\n        \n        this.genAxes();\n        this.genSubgrid();\n        \n    }\n\n    updateColour(colour){\n        this.colour = colour;\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    updateSize(size){\n        this.size = size;\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    genSubgrid(){\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes(){\n        this.axes=[];\n        var axesMaterial = new LineBasicMaterial( {\n            color: this.colour,\n            linewidth: 3\n        } );\n\n        let axesSize = this.size /2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), axesMaterial));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), axesMaterial));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), axesMaterial));\n    }\n\n}\n\nexport default Grid;","import {\n    Scene,\n    WebGLRenderer,\n    PerspectiveCamera,\n    OrthographicCamera,\n    Vector3\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport ParticleSet from './ParticleSet.js'\nimport Light from './Light.js'\nimport Grid from './Grid.js'\n\nexport class Model {\n    configuration = [];\n\n    scene;\n    camera;\n    lighting;\n    bgColour;\n    controls;\n    lookAt;\n    grid;\n    renderer;\n\n    height;\n    width;\n\n    gridEnabled = false;\n    axesEnabled = false;\n    sidebarExpanded = false;\n\n    cameraType = 'perspective';\n\n    constructor() {\n        this.scene = new Scene();\n        this.setDefault();\n    }\n\n    setDefault() {\n\n        this.renderer = new WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n\n        this.lookAt = new Vector3(0,0,0);\n\n        this.updateDimensions();\n        this.setCamera(this.cameraType);\n\n        this.lighting = [\n            new Light('ambient'),\n            new Light('directional'),\n            new Light('point')];\n\n        this.grid = new Grid(50, 0xffffff);\n\n        this.bgColour = \"#000000\";\n        this.renderer.setClearColor(this.bgColour);\n\n\n        for (let l of this.lighting) {\n            this.scene.add(l.light);\n        }\n        this.scene.add(this.camera);\n    }\n\n    update() {\n        this.controls.update();\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        this.height = (window.innerHeight - 56);\n\n        if (this.sidebarExpanded) {\n            this.width = window.innerWidth - 356;\n        } else {\n            this.width = window.innerWidth - 56;\n        }\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    setCamera(type) {\n        if (type == 'perspective') {\n            this.camera = new PerspectiveCamera(50, this.width / this.height, 0.1, 1000);\n        } else {\n            this.camera = new OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 0.1, 1000);\n            this.camera.zoom = 10;\n            console.log(this.camera.zoom);\n        }\n\n        this.camera.position.z = 30;\n        \n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.target = this.lookAt;\n    }\n\n    updateCamera() {\n        if (this.cameraType == 'perspective') {\n            this.camera.aspect = this.width / this.height;\n        } else {\n            this.camera.left = this.width / - 2;\n            this.camera.right = this.width / 2;\n            this.camera.top = this.height / 2;\n            this.camera.bottom = this.height / 2;\n        }\n        this.camera.updateProjectionMatrix();\n    }\n\n    updateLookAt(l){\n        this.lookAt = new Vector3(l.x,l.y,l.z);\n        this.controls.target = this.lookAt;\n        this.controls.update();\n\n    }\n\n    toggleSidebar() {\n        this.sidebarExpanded = !this.sidebarExpanded;\n        this.updateDimensions();\n    }\n\n    updateBg(colour) {\n        this.bgColour = this.rgbToHex(colour.r, colour.g, colour.b);\n        this.renderer.setClearColor(this.bgColour);\n    }\n\n    toggleLight(type, enabled) {\n        this.lighting[type].visible = enabled;\n    }\n\n    updateLight(type, colour) {\n        this.lighting[type].updateColour(this.rgbToHex(colour.r, colour.g, colour.b), colour.i);\n    }\n\n    updateLightPosition(type, pos) {\n        this.lighting[type].updatePosition(pos.x, pos.y, pos.z);\n    }\n\n    updateGridColour(rgb) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n        var colour = this.rgbToHex(rgb.r, rgb.g, rgb.b);\n        this.grid.updateColour(colour);\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n    updateGridSize(size) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n\n        this.grid.updateSize(size);\n\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n\n    toggleGrid() {\n        this.gridEnabled = !this.gridEnabled;\n\n        if (this.gridEnabled) {\n            this.scene.add(this.grid.subGrid);\n        } else {\n            this.scene.remove(this.grid.subGrid);\n        }\n    }\n\n    toggleAxes() {\n        this.axesEnabled = !this.axesEnabled;\n\n        if (this.axesEnabled) {\n            for (let a of this.grid.axes) {\n                this.scene.add(a);\n            }\n        } else {\n            for (let a of this.grid.axes) {\n                this.scene.remove(a);\n            }\n        }\n\n\n    }\n\n    toggleCameraRotation() {\n        this.controls.autoRotate = !this.controls.autoRotate;\n    }\n\n    rgbToHex(r, g, b) {\n        function componentToHex(c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n        }\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    }\n\n    load(data) {\n        let particleSets = data.split(\"$\");\n        let setData, ps;\n        for (let particleSet of particleSets) {\n            if (particleSet == \"\") {\n                return;\n            }\n            else {\n                setData = particleSet.split(\"\\n\");\n                ps = new ParticleSet(setData[0], setData[1], setData.slice(2));\n                this.configuration.push(ps);\n            }\n        }\n\n        this.setConfiguration();\n    }\n\n\n    setConfiguration() {\n        for (let set of this.configuration) {\n            for (const m of set.meshes) {\n                this.scene.add(m);\n            }\n        }\n    }\n\n}\n\nexport default Model;\n","\nimport { Header, Dropdown, FormGroup, Radio, RadioGroup, FlexboxGrid, Nav, Navbar, Icon, Button, ButtonToolbar } from 'rsuite';\n\nconst ExportDropdown = ({ ...props }) => (\n    <Dropdown {...props}>\n        <FormGroup controlId=\"radioList\">\n            <Dropdown.Item>Export as...</Dropdown.Item>\n            <Dropdown.Item divider />\n            <RadioGroup name=\"radioList\">\n                <Radio value=\"A\">Change </Radio>\n                <Radio value=\"B\">Rectangle</Radio>\n            </RadioGroup>\n            <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n\n            <Dropdown.Item >File Type</Dropdown.Item>\n            <Dropdown.Item divider />\n\n            <RadioGroup name=\"radioList\">\n                <Radio value=\"A\">PNG</Radio>\n                <Radio value=\"B\">JPG</Radio>\n            </RadioGroup>\n            <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n        </FormGroup>\n\n        <FlexboxGrid justify='center'>\n            <Button appearance='primary'> Export </Button>\n        </FlexboxGrid>\n\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n\n    </Dropdown>\n);\n\nconst SamplesDropdown = ({ ...props }) => (\n\n    <Dropdown {...props}>\n        <Dropdown.Item >File Type</Dropdown.Item>\n        <Dropdown.Item divider />\n        <Dropdown.Item>Sample 1</Dropdown.Item>\n        <Dropdown.Item>Sample 2</Dropdown.Item>\n        <Dropdown.Item>Sample 3</Dropdown.Item>\n        <Dropdown.Item>Sample 4</Dropdown.Item>\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n        <FlexboxGrid justify='center'>\n            <Button appearance='primary'> Randomize </Button>\n        </FlexboxGrid>\n\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n    </Dropdown>\n);\n\n\n\nconst Top = ({ ...props }) => (\n    <Header style={{height : 56}}>\n        <Navbar>\n            <Navbar.Body>\n                <Nav pullRight >\n                    <ButtonToolbar>\n                        <Nav.Item active>fps {props.fps}</Nav.Item>\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"keyboard-o\" />}>Reference</Nav.Item>\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"question\" />}>Manual</Nav.Item>\n                        <SamplesDropdown title=\"Samples\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"folder-o\" />} />\n                        <ExportDropdown title=\"Export\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"export\" />} />\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"file-download\" />}>Save</Nav.Item>\n                        <Nav.Item icon={<Icon icon=\"file-upload\" />} >Upload</Nav.Item>\n                    </ButtonToolbar>\n                </Nav>\n                <Nav pullLeft>\n                    <h6 style={{ padding: 20 }}> WebMGA</h6>\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    </Header>\n);\n\nexport default Top;","\n\nimport { Dropdown, RangeSlider, InputGroup, Sidebar, Sidenav, Nav, Icon, Navbar, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, ButtonToolbar, Input } from 'rsuite';\nimport React, { Component, useState } from \"react\";\n\nconst TITLE_LEFT_MARGIN = 30;\n\nexport const ParameterSet = (props) => {\n    var set = [];\n    let val;\n    for (let i = 0; i < props.titles.length; i++) {\n        if (!props.values) {\n            val = 0;\n        } else {\n            val = props.values[i];\n        }\n        set.push(\n            <ParameterInput title={props.titles[i]} values={val} numerical f={props.f} index={i} />\n        );\n    }\n\n    return set;\n}\n\nexport class ParameterInput extends React.Component {\n\n\n    constructor(props) {\n        super();\n        this.active = props.active;\n        this.f = props.f;\n        this.title = props.title;\n        this.values = props.values;\n        this.numerical = props.numerical;\n        this.index = props.index;\n        this.state = {\n            value: 0\n        };\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    changeValue(value) {\n        this.f(value, this.index);\n    }\n\n    render() {\n        var InputBox;\n\n        if (this.numerical) {\n            const defaultVal = this.values;\n            InputBox =\n                (<div style={{ width: 140 }}>\n                    <InputNumber defaultValue={defaultVal} step={0.1} onChange={this.changeValue} />\n                </div>);\n        } else {\n\n            const vals = this.values;\n            const active = this.active;\n\n            var listItems = [];\n            let act;\n\n            for (let val of vals) {\n                (active.localeCompare(val)) ? act = false : act = true;\n                listItems.push(<Dropdown.Item active={act} >{val}</Dropdown.Item>);\n            }\n\n            listItems.push(<Dropdown.Item panel style={{ width: 150 }}></Dropdown.Item>);\n\n            InputBox = (\n                <ButtonToolbar style={{ width: 120 }}>\n                    <Dropdown style={{ width: 200 }} title={this.active}>\n                        {listItems}\n                    </Dropdown>\n                </ButtonToolbar>\n            );\n\n        }\n\n        return (\n            <div >\n                <Row style={{ marginTop: 15 }}>\n\n                    <Col md={10}><p style={{ marginTop: 10, marginLeft: 30 }}>{this.title}</p></Col>\n                    <Col md={8} />\n                    <Col md={10}>{InputBox}</Col>\n\n                </Row>\n            </div>\n        );\n    }\n}\n\n\n\nexport const SliceSlider = (props) => {\n    const [value, setValue] = React.useState([-50, 50]);\n\n    return (\n        <div>\n            <br /><br />\n            <Row>\n                <Col md={5}>\n                    <p style={{ marginTop: 10, marginLeft: 30 }}>{props.title}</p>\n                </Col>\n                <Col md={1} />\n                <Col md={16}>\n                    <InputGroup>\n                        <InputNumber\n                            min={-50}\n                            max={50}\n                            value={value[0]}\n\n                            onChange={nextValue => {\n                                const [start, end] = value;\n                                if (nextValue > end) {\n                                    return;\n                                }\n                                setValue([nextValue, end]);\n                            }}\n                        />\n                        <InputGroup.Addon>to</InputGroup.Addon>\n                        <InputNumber\n                            min={-50}\n                            max={50}\n                            value={value[1]}\n                            onChange={nextValue => {\n                                const [start, end] = value;\n                                if (start > nextValue) {\n                                    return;\n                                }\n                                setValue([start, nextValue]);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={21}>\n                    <RangeSlider\n                        min={-50}\n                        max={50}\n                        progress\n                        style={{ marginLeft: 35, marginTop: 30 }}\n                        value={value}\n                        onChange={value => {\n                            setValue(value);\n                        }}\n                    />\n                </Col>\n\n            </Row>\n        </div>\n    );\n}\n\nexport const CustomSlider = (props) => {\n\n    var f = props.f;\n    var [value, setValue] = useState(props.val);\n    var [disabled, disable] = useState(false);\n\n    var type, graduated, progress;\n\n    if (props.type == null) {\n        type = null;\n    } else {\n        type = props.type;\n    }\n\n    disabled = props.disabled;\n    const [min, max] = props.boundaries;\n\n\n    return (\n\n        <Row>\n            <Col md={10}>\n                <Slider\n                    style={{ marginLeft: 25, marginTop: 16, width: 170 }}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, type);\n                    }}\n                />\n            </Col>\n            <Col md={4}>\n                <InputNumber\n                    style={{ marginLeft: 80, marginTop: 3, marginBottom: 3, width: 70, height: 35 }}\n                    min={min}\n                    max={max}\n                    value={value}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, props.type)\n                    }}\n                />\n            </Col>\n        </Row>\n    );\n\n}\n\n\nexport const PositionForm = (props) => {\n    const title = props.title;\n\n    return (\n        <div>\n            <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> {title} </p>\n            <Panel style={{ height: 8 }} />\n            <FlexboxGrid justify='center'>\n                <Row className=\"show-grid\">\n\n                    <Form layout=\"inline\">\n\n                        <FormGroup>\n                            <ControlLabel>x</ControlLabel>\n                            <FormControl name=\"x\" style={{ width: 55 }} />\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>y</ControlLabel>\n                            <FormControl name=\"y\" style={{ width: 55 }} />\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>z</ControlLabel>\n                            <FormControl name=\"z\" style={{ width: 55 }} />\n                        </FormGroup>\n                    </Form>\n                </Row>\n            </FlexboxGrid>\n        </div>\n    );\n}","\nimport { Dropdown, Sidebar, Sidenav, Nav, Icon, Navbar, ButtonGroup, Tooltip, Whisper, Divider, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, IconButton } from 'rsuite';\nimport React, { Component, useState } from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\n\nconst LODToolTip = (\n    <Tooltip>\n        Decreasing LOD will increase rendering speed.\n    </Tooltip>\n);\n\nexport const ModelsOptions = ({ ...props }) => (\n    <div>\n        <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n        <ParameterInput title=\"Set\" values={[\"Set A\", \"Set B\", \"Set C\", \"Set D\"]} active={\"Set C\"} />\n        <ParameterInput title=\"Shape\" values={[\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cone\", \"Cylinder\"]} active={\"Spheroplatelet\"} />\n        <ParameterInput title=\"Material\" values={[\"Basic\", \"Lambert\", \"Phong\", \"Matcap\"]} active={\"Lambert\"} />\n        <ParameterInput title=\"Display As\" values={[\"Figure\", \"Line\", \"Wireframe\"]} active={\"Figure\"} />\n        <br />\n        <Divider><strong style={dividerStyle}>  Parameters </strong></Divider>\n        <ParameterSet titles={[\"Radius\", \"Length\"]} values={[4.0, 3.0]} />\n        <Divider><strong style={dividerStyle}>  Colour </strong></Divider>\n        <Row className=\"show-grid\">\n            <Col xs={1} />\n            <Col xs={20}>\n\n                <Checkbox> Set from Director </Checkbox>\n                <br />\n\n            </Col>\n        </Row>\n\n        <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={20} />\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={40} />\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={90} />\n\n    </div>\n);\n\nexport class ViewOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ViewOptionsState;\n\n        this.model = props.model;\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.selectCameraType = this.selectCameraType.bind(this);\n        this.updateLOD = this.updateLOD.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n\n    }\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        View.ViewOptionsState.rotating = !View.ViewOptionsState.rotating;\n        this.model.toggleCameraRotation();\n    }\n    selectCameraType(value) {\n        this.setState({\n            type: value\n        });\n        View.ViewOptionsState.cameraType = value;\n        this.model.setCamera(value);\n    }\n    updateLOD(value) {\n        this.setState({\n            LOD: value\n        });\n        View.ViewOptionsState.LOD = value;\n        // TODO LOD UPDATES\n    }\n\n    updateLookat(value, type) {\n        let lookAt = this.state.lookAt;\n\n        switch (type) {\n            case 0:\n                lookAt.x = parseFloat(value);\n                break;\n            case 1:\n                lookAt.y = parseFloat(value);\n                break;\n            case 2:\n                lookAt.z = parseFloat(value);\n                break;\n        }\n\n        console.log(lookAt)\n        this.model.updateLookAt(lookAt);\n        View.ViewOptionsState.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const rotating = this.state.rotating;\n        const antialiasing = this.state.antialiasing;\n\n        return (\n            <div >\n\n                <Divider><strong style={dividerStyle}> Camera </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox checked={rotating} onClick={this.toggleAutorotate}> AutoRotate</Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n\n\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectCameraType}>\n                                    <br />\n                                    <p>Type</p>\n                                    <Radio defaultChecked value=\"perspective\">Perspective </Radio>\n                                    <Radio value=\"orthographic\">Orthographic </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p> Look at</p>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <ParameterSet titles={[\"X position\", \"Y position\", \"Z position\"]} f={this.updateLookat} />\n                <br />\n\n\n\n                <Divider><strong style={dividerStyle}> Perfomance Tuning </strong></Divider>\n\n                <Form style={{ marginLeft: TITLE_LEFT_MARGIN }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"top\" trigger=\"hover\" speaker={LODToolTip}>\n                            <Icon circle icon=\"question-circle\" size=\"md\" style={{ marginTop: 12 }} />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n\n                    min={1}\n                    step={1}\n                    max={5}\n                    defaultValue={4}\n                    graduated\n                    progress\n                    style={{ width: 220, marginLeft: 40 }}\n                    onChange={this.updateLOD}\n                    renderMark={mark => {\n                        return mark;\n                    }}\n                />\n\n            </div>);\n    }\n}\n\nexport const SlicingOptions = ({ ...props }) => {\n\n    return (\n        <div>\n            <SliceSlider title=\"X : \" />\n            <SliceSlider title=\"Y : \" />\n            <SliceSlider title=\"Z : \" />\n        </div>\n    );\n\n}\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.PointLightState;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') == 0) {\n            this.setState(View.DirectionalLightState);\n        } else {\n            this.setState(View.PointLightState);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.enabled = enabled;\n            intensity = View.PointLightState.colour.i;\n        } else {\n            View.DirectionalLightState.enabled = enabled;\n            intensity = View.DirectionalLightState.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n    }\n    updateColour(value, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n            default:\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLight(2, colour);\n            View.PointLightState.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.DirectionalLightState.colour = colour;\n        }\n    }\n    updatePosition(value, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = value;\n                break;\n            case 'y':\n                position.y = value;\n                break;\n            case 'z':\n                position.z = value;\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLightPosition(2, position);\n            View.PointLightState.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.DirectionalLightState.position = position;\n        }\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.AmbientLightState;\n\n        this.model = props.model;\n\n        this.updateAmbientLightColour = this.updateAmbientLightColour.bind(this);\n        this.updateBackgroundColour = this.updateBackgroundColour.bind(this);\n    }\n    updateAmbientLightColour(value, type) {\n        let colour = this.state.ambientLightColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n        }\n        this.model.updateLight(0, colour);\n        View.AmbientLightState.ambientLightColour = colour;\n    }\n    updateBackgroundColour(value, type) {\n        let colour = this.state.backgroundColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateBg(colour);\n        View.AmbientLightState.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateAmbientLightColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateAmbientLightColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateAmbientLightColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateAmbientLightColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBackgroundColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBackgroundColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBackgroundColour} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class VisualElementsOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.VisualElementsState;\n\n        this.model = props.model;\n        this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateGridColour = this.updateGridColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n\n    }\n    updateGridColour(value, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = value;\n                break;\n            case 'g':\n                rgb.g = value;\n                break;\n            case 'b':\n                rgb.b = value;\n                break;\n        }\n        this.model.updateGridColour(rgb);\n        View.VisualElementsState.gridColour = rgb;\n    }\n    updateGridSize(value) {\n        this.model.updateGridSize(value);\n        View.VisualElementsState.size = value;\n    }\n    toggleBoundingShapeEnabled() {\n        this.setState({\n            boundingShapeEnabled: !this.state.boundingShapeEnabled\n        });\n        View.VisualElementsState.boundingShapeEnabled = !View.VisualElementsState.boundingShapeEnabled;\n    }\n    selectShape(value) {\n        this.setState({\n            activeShape: value\n        });\n        View.VisualElementsState.activeShape = value;\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        View.VisualElementsState.showAxes = !View.VisualElementsState.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        View.VisualElementsState.showGrid = !View.VisualElementsState.showGrid;\n    }\n\n    render() {\n        const enabled = this.state.boundingShapeEnabled;\n        const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Bounding Shape </strong></Divider>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={enabled} onClick={this.toggleBoundingShapeEnabled}> Enabled </Checkbox>\n                            <br />\n\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <p>Shapes</p>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    <Radio disabled={!enabled} value=\"sphere\" >Sphere </Radio>\n                                    <Radio disabled={!enabled} value=\"cylinder\" >Cylinder </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> PRINT SHAPE INFO HERE</p>\n\n                <Divider><strong style={dividerStyle}> Grid </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={showAxes} onClick={this.toggleAxes}> Show Axes</Checkbox>\n                            <Checkbox checked={showGrid} onClick={this.toggleGrid}> Show Grid</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <br />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateGridColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateGridColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateGridColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n\n                <br />\n            </div>\n        );\n    }\n}","\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, VisualElementsOptions, SlicingOptions, ModelsOptions } from './SubMenus'\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{ backgroundColor: '#101010' }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Visual Elements</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Visual Elements\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            \n        </Nav>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Visual Elements\":\n                menuContent.push(<VisualElementsOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;","import React, { Component } from \"react\";\nimport Top from './Top';\nimport Side from './Side';\n\nexport class View {\n    header;\n    sidebar;\n    model;\n    expanded;\n\n    static VisualElementsState;\n    static AmbientLightState;\n    static PointLightState;\n    static DirectionalLightState;\n    static ViewOptionsState;\n    static ModelState;\n\n    constructor(m) {\n        this.model = m;\n        this.header = <Top fps={60} />;\n        this.sidebar = <Side model={this.model} />;\n\n        View.VisualElementsState = this.VisualElementsDefaultState;\n        View.AmbientLightState = this.AmbientLightDefaultState;\n        View.PointLightState = this.PointLightDefaultState;\n        View.DirectionalLightState = this.DirectionalLightDefaultState;\n        View.ViewOptionsState = this.ViewOptionsDefaultState;\n    }\n\n    ModelDefaultState = {\n        fun: 'no'\n    }\n\n    ViewOptionsDefaultState = {\n        rotating: false,\n        type: 'perspective',\n        lookAt: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        LOD : 4\n    }\n\n    PointLightDefaultState = {\n        reset : 0,\n        active: 'point',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 100\n        },\n        position: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n    }\n\n    DirectionalLightDefaultState = {\n        reset : 0,\n        active: 'directional',\n        enabled: false,\n        colour: {\n            r: 70,\n            g: 80,\n            b: 90,\n            i: 100\n        },\n        position: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n\n    }\n\n    VisualElementsDefaultState = {\n        boundingShapeEnabled: false,\n        activeShape: 'box',\n        showAxes: false,\n        showGrid: false,\n        gridColour: {\n            r: 50,\n            g: 90,\n            b: 90,\n        },\n        size: 50,\n\n    }\n\n    AmbientLightDefaultState = {\n        ambientLightColour: {\n            r: 50,\n            g: 50,\n            b: 50,\n            i: 90\n        },\n        backgroundColour: {\n            r: 0,\n            g: 0,\n            b: 0\n        }\n    }\n\n}\n\nexport default View;","export default __webpack_public_path__ + \"static/media/sample1.f5b826bb.txt\";","import Model  from \"./Model/Model\";\nimport View from \"./View/View\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport sample from './Samples/sample1.txt';\n\nclass Controller {\n    model;\n    view;\n\n    constructor() {\n        this.model = new Model();\n        this.view = new View(this.model);\n        //this.stats = new Stats();\n    }\n\n    start = () => {\n        this.addListeners();\n        this.loadSample();\n        this.render();\n    }\n\n    getHeader = () => {\n        return this.view.header;\n    }\n\n    getSiderbar = () => {\n        return this.view.sidebar;\n    }\n\n    getDomElement = () => {\n        return this.model.renderer.domElement;\n    }\n\n    render = () => {\n        //this.stats.begin();\n        this.model.update();\n        //this.stats.end();\n        //this.updateFPS();\n        requestAnimationFrame(this.render);\n    }\n\n    loadSample = () => {\n        fetch(sample)\n            .then(res => res.text())\n            .then(configData => {\n                this.model.load(configData);\n            });\n    }\n\n    addListeners = () => {\n\n        document.body.style.overflow = \"hidden\";\n\n        window.addEventListener('resize', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n        document.addEventListener('fullscreenchange', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n\n        document.body.onkeydown = (e) => {\n            var key = e.keyCode;\n            //spacebar\n            if (key == 32) {\n                this.model.toggleCameraRotation();\n            }\n            //a\n            if (key == 65) {\n                this.model.toggleAxes();\n            }\n            //g\n            if (key == 71) {\n                this.model.toggleGrid();\n            }\n            if (key == 69) {\n                this.view.toggleSidebar();\n            }\n        }\n    }\n\n\n}\n\n\n\nexport default Controller;\n\n\nvar Stats = function () {\n\n    var fps = 10;\n    var frames = 0;\n    var prevTime;\n  \n    return {\n      getFPS: function () {\n        return fps;\n      },\n      begin: function () {\n        prevTime = Date.now();\n      },\n      end: function () {\n        frames++;\n        var time = Date.now();\n  \n        if (time > prevTime + 1000) {\n          fps = (frames * 1000) / (time - prevTime);\n          prevTime = time;\n          frames = 0;\n          console.log(fps);\n        }\n      },\n  \n    };\n  \n  };\n  \n  ","import React, { Component } from \"react\";\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport { Container, Content } from 'rsuite';\nimport Controller from \"./Controller\";\n\nclass App extends Component {\n  controller;\n\n  constructor(props) {\n    super(props);\n    this.controller = new Controller();\n\n    this.state = {\n      header: this.controller.getHeader(),\n      sidebar: this.controller.getSiderbar()\n    };\n  }\n\n  componentDidMount() {\n    this.mount.appendChild(this.controller.getDomElement());\n    this.controller.start();\n  }\n\n  render() {\n    const header = this.state.header;\n    const sidebar = this.state.sidebar;\n\n    return (\n      <div >\n        <Container>\n          {header}\n          <Container>\n            {sidebar}\n            <Content>\n              <div ref={ref => (this.mount = ref)} />\n            </Content>\n          </Container>\n\n        </Container>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}