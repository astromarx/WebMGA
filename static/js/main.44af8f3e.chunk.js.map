{"version":3,"sources":["Model/Shapes.js","Model/Parameters.js","Model/Set.js","Model/Light.js","Model/Tools.js","Model/Model.js","View/Top.js","View/Tools.js","View/SubMenus.js","View/Side.js","View/View.js","Samples/sample1.txt","Controller.js","App.js","index.js"],"names":["Shape","levels","stripGeometries","fanGeometries","this","args","arguments","isPreset","LOD","complexity","presetGeometry","vertices","normals","type","g","BufferGeometry","setAttribute","BufferAttribute","Float32Array","from","localeCompare","BufferGeometryUtils","toTrianglesDrawMode","TriangleStripDrawMode","push","TriangleFanDrawMode","stripGeometry","mergeBufferGeometries","vec","scale","undefined","Math","pow","length","sqrt","map","x","Preset","parameters","clear","SphereBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","TorusBufferGeometry","Ellipsoid","genGeometries","mergeGeometries","actComplexity","piece","temp","currLevel","PI","i","j","sin","cos","normalize","addGeometry","Spherocylinder","radius","y","Spheroplatelet","radSphere","radCircle","plusZ","minusZ","projectionUp","projectionDown","CutSphere","zCut","angle","acos","radiusFan","Parameters","names","vals","lod","Sphere","Cone","Cylinder","Torus","Set","n","ot","d","cp","ci","elements","meshes","Element","c","p","e","colour","position","euler","Model","rgbToHex","geoms","geometries","name","orientationType","clippingPlanes","clipIntersection","setDefaults","genElements","setElements","genMeshes","constant","toggle","material","m","mat","elem","colourByDirector","Color","getColour","userColour","MeshPhongMaterial","color","side","DoubleSide","wireframe","shininess","Mesh","hex","shape","clone","translate","rotate","setGeometries","orientation","attributes","nP","split","a","parseFloat","console","log","slice","getRotations","colourFromOrientation","SHAPE","generate","pos","rotateX","rotateY","rotateZ","z","round","_x","_y","_z","rot","q","Quaternion","Euler","defaultVector","Vector3","setFromUnitVectors","setFromQuaternion","fromArray","setFromAxisAngle","Light","lightType","setDefaultLights","light","set","setHex","parseInt","substring","intensity","AmbientLight","DirectionalLight","PointLight","AMBIENT","DIRECTIONAL","POINT","Tools","s","axes","size","LineBasicMaterial","linewidth","genAxes","genSubgrid","boundingShapeType","setsGeometry","sets","boundingShape","box","Box3","computeBoundingBox","copy","boundingBox","Box3Helper","computeBoundingSphere","sphere","boundingSphere","geom","center","MeshBasicMaterial","subGrid","GridHelper","axesSize","Line","setFromPoints","gridEnabled","axesEnabled","sidebarExpanded","cameraType","scene","Scene","setDefault","selectedSet","initClippers","renderer","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","localClippingEnabled","lookAt","updateDimensions","setCamera","lighting","tools","bgColour","setClearColor","l","add","camera","setsJSON","JSON","stringify","controls","update","render","clippingIntersections","Plane","clippingHelpers","PlaneHelper","helper","visible","toggleClipIntersection","updateSlicers","height","innerHeight","width","innerWidth","setSize","PerspectiveCamera","OrthographicCamera","zoom","OrbitControls","domElement","target","aspect","left","right","top","bottom","updateProjectionMatrix","r","b","enabled","updateColour","updatePosition","rgb","passGrid","passAxes","toggleGrid","toggleAxes","updateSize","remove","autoRotate","genBoundingShape","val","id","params","f","updateModel","setUserColour","data","setData","ps","setConfiguration","componentToHex","toString","ExportDropdown","props","Dropdown","FormGroup","controlId","Item","divider","RadioGroup","Radio","value","panel","style","padding","FlexboxGrid","justify","Button","appearance","onClick","SamplesDropdown","Top","Header","Navbar","Body","Nav","pullRight","ButtonToolbar","active","fps","icon","Icon","title","trigger","placement","functions","onSelect","pullLeft","ParameterSet","titles","values","numerical","index","ParameterInput","selectingSet","changeValue","bind","InputBox","defaultVal","marginLeft","InputNumber","defaultValue","step","onChange","act","listItems","eventKey","Row","marginTop","Col","md","React","Component","SliceSlider","useState","setValue","InputGroup","min","max","nextValue","end","Addon","start","RangeSlider","progress","CustomSlider","disabled","boundaries","Slider","marginBottom","TITLE_LEFT_MARGIN","dividerStyle","LODToolTip","Tooltip","ModelsOptions","state","View","ModelState","model","selectShape","selectSet","updateParameter","toggleWireframe","toggleColour","updateShininess","updateUserColour","setState","configurations","colourFromDirector","toggleUserColour","displayAsWireframe","reset","updateShape","getParameters","configState","Divider","className","xs","Checkbox","checked","ViewOptions","ViewOptionsState","toggleAutorotate","selectCameraType","updateLOD","updateLookat","rotating","toggleCameraRotation","updateLookAt","Grid","fluid","defaultChecked","Form","layout","ControlLabel","Whisper","speaker","graduated","renderMark","mark","SlicingOptions","SlicingState","toggleIntersection","toggleHelperX","toggleHelperY","toggleHelperZ","updateHelpers","updateSlicer","helpers","toggleHelper","AdditionalLightsNav","activeKey","margin","justified","AdditionalLightOptions","PointLightState","handleSelect","toggleLightEnabled","DirectionalLightState","updateLight","updateLightPosition","lightState","AmbientLightOptions","AmbientLightState","updateAmbientLightColour","updateBackgroundColour","ambientLightColour","backgroundColour","updateBg","VisualElementsOptions","VisualElementsState","toggleBoundingShapeEnabled","updateGridColour","updateGridSize","gridColour","boundingShapeEnabled","updateBoundingShape","activeShape","showAxes","showGrid","NavToggle","expand","IconButton","circle","textAlign","navItemStyle","sidebarHeight","CustomNav","backgroundColor","tooltip","MenuContent","menuContent","SideMenu","handleToggle","toggleSidebar","Sidebar","display","flexDirection","collapsible","Container","vertical","Content","io","SlicingDefaultState","ModelDefaultState","ConfigurationDefaultState","envMap","reflectivity","refractivity","ViewOptionsDefaultState","PointLightDefaultState","DirectionalLightDefaultState","VisualElementsDefaultState","AmbientLightDefaultState","header","sidebar","Side","setDefaultStates","states","parse","Controller","save","file","setsToJSON","view","statesToJSON","load","export","addListeners","loadSample","getHeader","getSiderbar","getDomElement","requestAnimationFrame","fetch","sample","then","res","text","configData","document","body","overflow","addEventListener","updateCamera","onkeydown","keyCode","App","controller","mount","appendChild","ref","ReactDOM","StrictMode","getElementById"],"mappings":"8PAYaA,EAAb,WAkBI,aAAe,yBAffC,OAAS,EAeK,KAPdC,gBAAkB,GAOJ,KANdC,cAAgB,GAOZC,KAAKC,KAAOC,UAAU,GACtBF,KAAKG,UAAW,EAChBH,KAAKI,IAAM,EACXJ,KAAKK,WAAa,CAAC,EAAE,GAAG,GAAG,GAAG,IAtBtC,oDA0BQL,KAAKM,eAAiB,GACtBN,KAAKF,gBAAkB,GACvBE,KAAKD,cAAgB,KA5B7B,kCA8CgBQ,EAAUC,EAASC,GAC3B,IAAIC,EAAI,IAAIC,IAEZD,EAAEE,aAAa,WAAY,IAAIC,IAAgBC,aAAaC,KAAKR,GAAW,IAC5EG,EAAEE,aAAa,SAAU,IAAIC,IAAgBC,aAAaC,KAAKP,GAAU,IAGtC,GAA/BC,EAAKO,cAAc,UACnBN,EAAIO,IAAoBC,oBAAoBR,EAAGS,KAC/CnB,KAAKF,gBAAgBsB,KAAKV,KAE1BA,EAAIO,IAAoBC,oBAAoBR,EAAGW,KAC/CrB,KAAKD,cAAcqB,KAAKV,MA1DpC,wCAgEQV,KAAKsB,cAAgBL,IAAoBM,sBAAsBvB,KAAKF,oBAhE5E,iCA+BqB0B,EAAKC,QAELC,GAATD,IACAD,EAAI,IAAMG,KAAKC,IAAIH,EAAM,GAAI,GAC7BD,EAAI,IAAMG,KAAKC,IAAIH,EAAM,GAAI,GAC7BD,EAAI,IAAMG,KAAKC,IAAIH,EAAM,GAAI,IAGjC,IAAII,EAASF,KAAKG,KAAKN,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAGxE,OAFAA,EAAMA,EAAIO,KAAI,SAAAC,GAAC,OAAIA,EAAIH,SAxC/B,KAqEaI,EAAb,kDAEI,WAAYxB,EAAMyB,GAAa,IAAD,8BAC1B,gBACK/B,UAAW,EAChB,EAAKM,KAAOA,EACZ,EAAKyB,WAAaA,EAJQ,EAFlC,uDAYQ,OAFAlC,KAAKmC,QAEGnC,KAAKS,MACT,IAAK,SACDT,KAAKM,eAAiB,IAAI8B,IAAqBpC,KAAKkC,WAAYlC,KAAKK,WAAWL,KAAKI,KAAMJ,KAAKK,WAAWL,KAAKI,MAChH,MACJ,IAAK,OACDJ,KAAKM,eAAL,YAA0B+B,IAA1B,YAAgDrC,KAAKkC,YAArD,QAAiElC,KAAKK,WAAWL,KAAKI,QACtF,MACJ,IAAK,WACDJ,KAAKM,eAAL,YAA0BgC,IAA1B,YAAoDtC,KAAKkC,YAAzD,QAAqElC,KAAKK,WAAWL,KAAKI,QAC1F,MACJ,IAAK,QACDJ,KAAKM,eAAL,YAA0BiC,IAA1B,YAAiDvC,KAAKkC,YAAtD,QAAkElC,KAAKK,WAAWL,KAAKI,aAvBvG,GAA4BR,GA6Bf4C,EAAb,kDAEI,aAAe,uCACLtC,WAHd,uDAOQF,KAAKmC,QACLnC,KAAKyC,gBACLzC,KAAK0C,oBATb,sCAqBQ,IATa,IAAD,QACRC,EAAgB,GAChBC,EAAQ,GACRnB,EAAQzB,KAAKC,KACbM,EAAW,GACXC,EAAU,GACVqC,EAAO,GAGFC,EAAY,EAAGA,EAAY9C,KAAKH,SAAUiD,EAAW,CAE1DH,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IACzG8C,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IAEzG+C,EAAMxB,KAAK,EAAIO,KAAKoB,GAAKJ,EAAc,IACvCC,EAAMxB,KAAKO,KAAKoB,IAA+B,GAAxBJ,EAAc,GAAK,KAE1C,IAAK,IAAIK,EAAI,EAAGA,EAAuB,EAAnBL,EAAc,KAAUK,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,QAClC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMK,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,KAC/CC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,KACxEC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,MAG5EC,EAAKzB,KAAKO,KAAKwB,KAAKH,EAAI,GAAKJ,EAAM,IAAMnB,EAAM,KAE/C,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,GAEE,GAALI,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMK,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,KAC/CC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,KACxEC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,MAG5EC,EAAKzB,KAAKO,KAAKwB,KAAKH,EAAI,GAAKJ,EAAM,IAAMnB,EAAM,KAE/C,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,IAOnB7C,KAAKqD,YAAY9C,EAAUC,EAAS,SAEpCD,EAAW,GACXC,EAAU,GAGVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,KAAKK,EAAM,KAEhB,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,GAEP,IAASI,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,IAClC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMK,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,KACrCC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,KAC9DC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,MAElEC,EAAKzB,KAAKO,KAAKwB,IAAIP,EAAM,IAAMnB,EAAM,KAErC,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,OACpCD,EAAW,GACXC,EAAU,GAGVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,MAAMK,EAAM,KAEjB,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,GAEP,IAASI,EAAIN,EAAc,GAAIM,GAAK,IAAKA,EAAG,CAAC,IAAD,IAC/B,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMK,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,KACrCC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,KAC9DC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMnB,EAAM,GAAKE,KAAKuB,IAAIN,EAAM,MAElEC,EAAKzB,MAAMO,KAAKwB,IAAIP,EAAM,IAAMnB,EAAM,KAEtC,EAAAlB,GAASa,KAAT,oBAAiByB,KACjB,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,EAAMpB,KACtCoB,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,WA7H5C,GAA+BZ,GAkIlB0D,EAAb,kDAGI,aAAe,uCACLpD,WAJd,uDAQQF,KAAKmC,QACLnC,KAAKyC,gBACLzC,KAAK0C,oBAVb,sCAsBQ,IARA,IAIInC,EACAC,EALAmC,EAAgB,GAChBC,EAAQ,GACRW,EAASvD,KAAKC,KAAK,GACnB4B,EAAS7B,KAAKC,KAAK,GAGnB4C,EAAO,GAEFC,EAAY,EAAGA,EAAY9C,KAAKH,SAAUiD,EAAW,CAAC,IAAD,QAE1DH,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAe9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IAC1G8C,EAAcvB,KAAKuB,EAAc,GAAK,GAEtCC,EAAMxB,KAAK,EAAIO,KAAKoB,GAAKJ,EAAc,IACvCC,EAAMxB,KAAK,EAAIO,KAAKoB,IAAyB,EAAnBJ,EAAc,KAExC,IAAK,IAAIa,EAAI,EAAGA,EAAKb,EAAc,GAAK,IAAMa,EAAG,CAE7CjD,EAAW,GACXC,EAAU,GAEV,IAAK,IAAIwB,EAAI,EAAGA,GAAKW,EAAc,KAAMX,EAAG,CAAC,IAAD,QAC/B,GAALA,GAAUA,GAAKW,EAAc,IAC7BE,EAAKzB,MAAMO,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GAC1CV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAInB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GACnEV,EAAKzB,MAAMO,KAAKuB,IAAIlB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,IAEvEV,EAAKzB,KAAKO,KAAKwB,KAAKK,EAAI,GAAKZ,EAAM,IAAMW,IAEzC,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEE,GAALb,GAAUA,GAAKW,EAAc,IAC7BE,EAAKzB,MAAMO,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GAC1CV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAInB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GACnEV,EAAKzB,MAAMO,KAAKuB,IAAIlB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,IAEvEV,EAAKzB,KAAKO,KAAKwB,KAAKK,EAAI,GAAKZ,EAAM,IAAMW,IAEzC,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,SAGxC,IAAK,IAAIgD,EAAIb,EAAc,GAAK,EAAGa,EAAI,GAAKb,EAAc,GAAK,KAAMa,EAAG,CAEpEjD,EAAW,GACXC,EAAU,GAEV,IAAK,IAAIwB,EAAI,EAAGA,GAAKW,EAAc,KAAMX,EAAG,CAAC,IAAD,QAC/B,GAALA,GAAUA,GAAKW,EAAc,IAC7BE,EAAKzB,MAAMO,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GAC1CV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAInB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GACnEV,EAAKzB,MAAMO,KAAKuB,IAAIlB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,IAEvEV,EAAKzB,KAAKO,KAAKwB,KAAKK,EAAI,GAAKZ,EAAM,IAAMW,IAEzC,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEE,GAALb,GAAUA,GAAKW,EAAc,IAC7BE,EAAKzB,MAAM,EAAIO,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GAC9CV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAInB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,GACnEV,EAAKzB,MAAMO,KAAKuB,IAAIlB,EAAIY,EAAM,IAAMjB,KAAKuB,KAAKM,EAAI,GAAKZ,EAAM,IAAMW,IAEvEV,EAAKzB,KAAKO,KAAKwB,KAAKK,EAAI,GAAKZ,EAAM,IAAMW,IAEzC,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,SAGxCA,EAAU,GACVD,EAAW,GAEX,IAAK,IAAIyB,EAAI,EAAGA,GAAKW,EAAc,KAAMX,EAAG,CAAC,IAAD,QAE/B,GAALA,GAAUA,GAAKW,EAAc,IAC7BE,EAAKzB,MAAMmC,GACXV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAInB,EAAIY,EAAM,IAAMW,GACpCV,EAAKzB,MAAMO,KAAKuB,IAAIlB,EAAIY,EAAM,IAAMW,IAExCV,EAAKzB,KAAK,IAEV,EAAAZ,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAK,GAAK,GACV,EAAArC,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAIX7C,KAAKqD,YAAY9C,EAAUC,EAAS,SAEpCA,EAAU,GACVD,EAAW,GACXsC,EAAK,GAAK,EACVA,EAAK,GAAK,EACVA,EAAK,GAAKU,GAEV,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEP,IAAK,IAAII,EAAI,EAAGA,GAAKN,EAAc,KAAMM,EAAG,CAAC,IAAD,IAC/B,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMO,KAAKuB,IAAIN,EAAM,IAAMW,GAChCV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMjB,KAAKuB,IAAIN,EAAM,IAAMW,GACzDV,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMjB,KAAKuB,IAAIN,EAAM,IAAMW,IAE7DV,EAAKzB,KAAKO,KAAKwB,IAAIP,EAAM,IAAMW,IAE/B,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,OAEpCA,EAAU,GACVD,EAAW,GACXsC,EAAK,GAAK,EACVA,EAAK,GAAK,EACVA,EAAK,IAAMU,GAEX,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEP,IAAK,IAAII,EAAIN,EAAc,GAAIM,GAAK,IAAKA,EAAG,CAAC,IAAD,IAC/B,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMO,KAAKuB,IAAIN,EAAM,IAAMW,GAChCV,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMjB,KAAKuB,IAAIN,EAAM,IAAMW,GACzDV,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMjB,KAAKuB,IAAIN,EAAM,IAAMW,IAE7DV,EAAKzB,MAAMO,KAAKwB,IAAIP,EAAM,IAAMW,IAEhC,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAChCA,EAAK,IAAMhB,EAAS,GACpB,EAAAtB,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,YApMhD,GAAoCZ,GA2MvB6D,EAAb,kDAEI,aAAe,uCACLvD,WAHd,uDAOQF,KAAKmC,QACLnC,KAAKyC,gBACLzC,KAAK0C,oBATb,sCAyBQ,IAZA,IAAIgB,EAAY1D,KAAKC,KAAK,GACtB0D,EAAY3D,KAAKC,KAAK,GACtB2D,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAS,CAAC,EAAG,GAAI,GACjBC,EAAe,EACfC,EAAiB,EACjBpB,EAAgB,GAChBC,EAAQ,GACRrC,EAAW,GACXC,EAAU,GACVqC,EAAO,GAEFC,EAAY,EAAGA,EAAY9C,KAAKH,SAAUiD,EAAW,CAAC,IAAD,QAE1DH,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IACzG8C,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IAEzG+C,EAAMxB,KAAK,EAAIO,KAAKoB,GAAKJ,EAAc,IACvCC,EAAMxB,KAAKO,KAAKoB,IAAyB,EAAnBJ,EAAc,KAEpC,IAAK,IAAIK,EAAI,EAAGA,EAAuB,EAAnBL,EAAc,KAAUK,EAAG,CAC3Cc,EAAeJ,EAAY/B,KAAKuB,IAAIF,EAAIJ,EAAM,IAC9CmB,EAAiBL,EAAY/B,KAAKuB,KAAKF,EAAI,GAAKJ,EAAM,IAEtD,IAAK,IAAIK,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,QAElC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAM0C,GACXjB,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAM0C,EAAenC,KAAKwB,IAAIF,EAAIL,EAAM,KAC7CC,EAAKzB,MAAM0C,EAAenC,KAAKuB,IAAID,EAAIL,EAAM,MAEjDC,EAAKzB,KAAKO,KAAKwB,IAAIH,EAAIJ,EAAM,IAAMc,IAEnC,EAAAlD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAEvB,GAALI,GAAUA,GAAKN,EAAc,GAC7BE,EAAK,IAAMc,GAGXd,EAAK,IAAMc,EAAYhC,KAAKwB,IAAIF,EAAIL,EAAM,IAC1CC,EAAK,IAAMc,EAAYhC,KAAKuB,IAAID,EAAIL,EAAM,MAG9C,EAAArC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGE,GAALI,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAM2C,GACXlB,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAM2C,EAAiBpC,KAAKwB,IAAIF,EAAIL,EAAM,KAC/CC,EAAKzB,MAAM2C,EAAiBpC,KAAKuB,IAAID,EAAIL,EAAM,MAEnDC,EAAKzB,KAAKO,KAAKwB,KAAKH,EAAI,GAAKJ,EAAM,IAAMc,IAEzC,EAAAlD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,KAEvB,GAALI,GAAUA,GAAKN,EAAc,GAC7BE,EAAK,IAAMc,GAGXd,EAAK,IAAMc,EAAYhC,KAAKwB,IAAIF,EAAIL,EAAM,IAC1CC,EAAK,IAAMc,EAAYhC,KAAKuB,IAAID,EAAIL,EAAM,MAG9C,EAAArC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,IAKf7C,KAAKqD,YAAY9C,EAAUC,EAAS,SACpCD,EAAW,GACXC,EAAU,GAIVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,KAAKsC,IAEV,EAAAlD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IAEjBA,EAAO,GAEP,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,IAClC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMuC,GACXd,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMe,GACpCd,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMe,IAGxCd,EAAKzB,KAAKsC,IACV,EAAAlD,GAAQY,KAAR,QAAgBwC,IAChB,EAAArD,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,OACpCD,EAAW,GACXC,EAAU,GAGVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,MAAMsC,IAEX,EAAAlD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEP,IAAK,IAAII,EAAIN,EAAc,GAAIM,GAAK,IAAKA,EAAG,CAAC,IAAD,IAC/B,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMuC,GACXd,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMe,GACpCd,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMe,IAGxCd,EAAKzB,MAAMsC,IACX,EAAAlD,GAAQY,KAAR,QAAgByC,IAChB,EAAAtD,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,YArJhD,GAAoCZ,GA6JvBoE,EAAb,kDAEI,aAAe,uCACL9D,WAHd,uDAOQF,KAAKmC,QACLnC,KAAKyC,gBACLzC,KAAK0C,oBATb,sCAyBQ,IAZA,IAAIa,EAASvD,KAAKC,KAAK,GACnBgE,EAAOjE,KAAKC,KAAK,GACjB2D,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAS,CAAC,EAAG,GAAI,GACjBK,EAAQvC,KAAKwC,KAAKF,EAAOV,GACzBa,EAAYb,EAAS5B,KAAKuB,IAAIgB,GAC9BvB,EAAgB,GAChBC,EAAQ,GACRrC,EAAW,GACXC,EAAU,GACVqC,EAAO,GAEFC,EAAY,EAAGA,EAAY9C,KAAKH,SAAUiD,EAAW,CAAC,IAAD,QAE1DH,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IACzG8C,EAAcvB,KAAKpB,KAAKK,WAAWL,KAAKI,KAAO0C,GAAc9C,KAAKK,WAAWL,KAAKI,MAASJ,KAAKH,OAAS,IAEzG+C,EAAMxB,KAAK,EAAIO,KAAKoB,GAAKJ,EAAc,IACvCC,EAAMxB,MAAMO,KAAKoB,GAAK,EAAImB,IAA6B,EAAnBvB,EAAc,KAElD,IAAK,IAAIK,EAAI,EAAGA,EAAuB,EAAnBL,EAAc,KAAUK,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,QAElC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMmC,EAAS5B,KAAKuB,IAAIgB,EAAQlB,EAAIJ,EAAM,KAC/CC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMW,EAAS5B,KAAKuB,IAAIgB,EAAQlB,EAAIJ,EAAM,KACxEC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMW,EAAS5B,KAAKuB,IAAIgB,EAAQlB,EAAIJ,EAAM,MAE5EC,EAAKzB,KAAKO,KAAKwB,IAAIe,EAAQlB,EAAIJ,EAAM,IAAMW,IAE3C,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGE,GAALI,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMmC,EAAS5B,KAAKuB,IAAIgB,GAASlB,EAAI,GAAKJ,EAAM,KACrDC,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMW,EAAS5B,KAAKuB,IAAIgB,GAASlB,EAAI,GAAKJ,EAAM,KAC9EC,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMW,EAAS5B,KAAKuB,IAAIgB,GAASlB,EAAI,GAAKJ,EAAM,MAElFC,EAAKzB,KAAKO,KAAKwB,IAAIe,GAASlB,EAAI,GAAKJ,EAAM,IAAMW,IAEjD,EAAA/C,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAKf7C,KAAKqD,YAAY9C,EAAUC,EAAS,SACpCD,EAAW,GACXC,EAAU,GAIVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK6C,IAEV,EAAAzD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEP,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAc,GAAK,IAAKM,EAAG,CAAC,IAAD,IAClC,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMgD,GACXvB,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMwB,GACpCvB,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMwB,IAGxCvB,EAAKzB,KAAK6C,IACV,EAAAzD,GAAQY,KAAR,QAAgBwC,IAChB,EAAArD,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,OACpCD,EAAW,GACXC,EAAU,GAKVqC,EAAKzB,KAAK,GACVyB,EAAKzB,KAAK,GACVyB,EAAKzB,MAAM6C,IAEX,EAAAzD,GAAQY,KAAR,oBAAgBxB,EAAMwD,UAAUP,MAChC,EAAAtC,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAEP,IAAK,IAAII,EAAIN,EAAc,GAAIM,GAAK,IAAKA,EAAG,CAAC,IAAD,IAC/B,GAALA,GAAUA,GAAKN,EAAc,IAC7BE,EAAKzB,MAAMgD,GACXvB,EAAKzB,KAAK,KAGVyB,EAAKzB,MAAMO,KAAKwB,IAAIF,EAAIL,EAAM,IAAMwB,GACpCvB,EAAKzB,MAAMO,KAAKuB,IAAID,EAAIL,EAAM,IAAMwB,IAGxCvB,EAAKzB,MAAM6C,IACX,EAAAzD,GAAQY,KAAR,QAAgByC,IAChB,EAAAtD,GAASa,KAAT,oBAAiByB,IACjBA,EAAO,GAGX7C,KAAKqD,YAAY9C,EAAUC,EAAS,YAjIhD,GAA+BZ,GC3iBhByE,EA3CS,CACpB7B,UAAW,CACP8B,MAAO,CAAC,IAAK,IAAK,KAClBC,KAAM,CAAC,GAAK,GAAK,IACjBC,IAAK,CAAC,EAAE,GAAG,GAAG,GAAG,KAErBlB,eAAe,CACXgB,MAAO,CAAC,SAAU,UAClBC,KAAM,CAAC,GAAK,KACZC,IAAK,CAAC,EAAE,GAAG,GAAG,GAAG,KAErBf,eAAe,CACXa,MAAO,CAAC,YAAY,aACpBC,KAAK,CAAC,EAAI,IACVC,IAAK,CAAC,EAAE,GAAG,GAAG,GAAG,KAErBR,UAAW,CACPM,MAAO,CAAC,SAAS,QACjBC,KAAM,CAAC,GAAK,IACZC,IAAK,CAAC,EAAE,GAAG,GAAG,GAAG,KAErBC,OAAQ,CACJH,MAAO,CAAC,UACRC,KAAM,CAAC,IACPC,IAAK,CAAC,EAAE,GAAG,EAAE,EAAE,IAEnBE,KAAM,CACFJ,MAAO,CAAC,SAAS,UACjBC,KAAM,CAAC,GAAK,KACZC,IAAK,CAAC,EAAE,GAAG,EAAE,EAAE,IAEnBG,SAAU,CACNL,MAAO,CAAC,YAAa,eAAgB,UACrCC,KAAM,CAAC,GAAI,GAAI,GACfC,IAAK,CAAC,EAAE,GAAG,EAAE,EAAE,IAEnBI,MAAM,CACFN,MAAM,CAAC,SAAS,OAAO,OACvBC,KAAK,CAAC,EAAI,GAAI,KACdC,IAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KCiNRK,EA7Of,WAiBI,WAAYC,EAAGC,EAAIC,EAAGC,EAAIC,GAAK,yBAH/BC,SAAW,GAGmB,KAF9BC,OAAS,GAEqB,KAqM9BC,QArM8B,WA2M1B,WAAYC,EAAGC,EAAGC,GAAI,oBAClBxF,KAAKyF,OAASH,EACdtF,KAAK0F,SAAWH,EAChBvF,KAAK2F,MAAQH,EA9MS,wDAkNtB,OAAOI,EAAMC,SAAS7F,KAAKyF,OAAO,GAAIzF,KAAKyF,OAAO,GAAIzF,KAAKyF,OAAO,MAlN5C,oCAqNZK,GACV9F,KAAK+F,WAAaD,MAtNI,KAC1B9F,KAAKgG,KAAOlB,EACZ9E,KAAKiG,gBAAkBlB,EACvB/E,KAAKkG,eAAiBjB,EACtBjF,KAAKmG,iBAAmBjB,EACxBlF,KAAKoG,cACLpG,KAAKqG,YAAYrB,GACjBhF,KAAKsG,cACLtG,KAAKuG,YAzBb,0DA4BkBvD,EAAGuB,GACbvE,KAAKkG,eAAe,EAAElD,EAAE,GAAGwD,SAAWjC,EAAK,GAC3CvE,KAAKkG,eAAe,EAAElD,GAAGwD,UAAYjC,EAAK,KA9BlD,6CAiC2BkC,GACnBzG,KAAKmG,iBAAmBM,EADE,oBAEVzG,KAAKoF,QAFK,IAE1B,IAAI,EAAJ,qBAA4B,SACnBsB,SAASP,iBAAmBM,GAHX,iCAjClC,kCAyCQ,IAAIE,EACArB,EACAsB,EAHI,gBAKS5G,KAAKmF,UALd,IAKR,2BAAgC,CAAC,IAAxB0B,EAAuB,QAExBvB,EADAtF,KAAK8G,iBACD,IAAIC,IAAMF,EAAKG,aAEfhH,KAAKiH,YAGbL,EAAM,IAAIM,IAAkB,CACxBC,MAAO7B,EACP8B,KAAMC,IACNnB,eAAgBlG,KAAKkG,eACrBC,iBAAkBnG,KAAKmG,oBAEvBmB,UAAYtH,KAAKsH,UACrBV,EAAIW,UAAYvH,KAAKuH,UAdO,oBAgBdV,EAAKd,YAhBS,IAgB5B,2BAA+B,CAAC,IAAvBrF,EAAsB,QAC3BiG,EAAI,IAAIa,IAAK9G,EAAGkG,GAChB5G,KAAKoF,OAAOhE,KAAKuF,IAlBO,gCALxB,iCAxChB,oCAoEkBc,GACVzH,KAAKiH,WAAa,IAAIF,IAAMU,KArEpC,oCAyEQ,IADU,EACN3B,EAAQ,GADF,cAGO9F,KAAKmF,UAHZ,IAGV,2BAAgC,CAAC,IAAxB0B,EAAuB,QACxB7G,KAAK0H,MAAMvH,SACX2F,EAAM1E,KAAKpB,KAAK0H,MAAMpH,eAAeqH,UAGrC7B,EAAM1E,KAAKpB,KAAK0H,MAAMpG,cAAcqG,SACpC7B,EAAM1E,KAAKpB,KAAK0H,MAAM3H,cAAc,GAAG4H,SACvC7B,EAAM1E,KAAKpB,KAAK0H,MAAM3H,cAAc,GAAG4H,UAG3C3H,KAAK4H,UAAUf,EAAKnB,SAAUI,GAC9B9F,KAAK6H,OAAOhB,EAAKlB,MAAOG,GACxBe,EAAKiB,cAAchC,GAEnBA,EAAQ,IAjBF,iCAxElB,kCA6FgBX,GACR,IAAIO,EAAUqC,EAAaC,EAAYrC,EAAOsC,EAD5B,EAEdpF,EAAO,GAAI4C,EAAS,GAFN,cAIDN,GAJC,IAIlB,2BAA2B,CACvB6C,EADuB,QACLE,MAAM,KADD,oBAGTF,GAHS,IAGvB,2BAA0B,CAAC,IAAlBG,EAAiB,QACtBtF,EAAKzB,KAAKgH,WAAWD,KAJF,8BAWvB,GAJAH,EAAanF,EACbA,EAAO,GACPwF,QAAQC,IAAIN,EAAWnG,QAEE,GAArBmG,EAAWnG,OAAe,MAE9B6D,EAAWsC,EAAWO,MAAM,EAAG,GAC/BR,EAAcC,EAAWO,MAAM,GAE/B5C,EAAQ3F,KAAKwI,aAAaxI,KAAKiG,gBAAiB8B,GAChDtC,EAASzF,KAAKyI,sBAAsB9C,GAEpCsC,EAAK,IAAIjI,KAAKqF,QAAQI,EAAQC,EAAUC,GACxC3F,KAAKmF,SAAS/D,KAAK6G,IAxBL,iCA7F1B,oCA0HQjI,KAAKiH,WAAa,IAAIF,IAAM,WAC5B/G,KAAK8G,kBAAmB,EACxB9G,KAAKsH,WAAY,EACjBtH,KAAKuH,UAAY,GACjBvH,KAAKwE,IAAM,EACXxE,KAAKS,KAAO,YACZT,KAAKkC,WAAamC,EAAW7B,UAAU+B,KACvCvE,KAAKyC,kBAjIb,sCAqIQ,OAAQzC,KAAKS,MACT,IAAK,YACDT,KAAK0H,MAAL,YAAiBgB,EAAjB,YAAoC1I,KAAKkC,aACzC,MACJ,IAAK,iBACDlC,KAAK0H,MAAL,YAAiBgB,EAAjB,YAAyC1I,KAAKkC,aAC9C,MACJ,IAAK,iBACDlC,KAAK0H,MAAL,YAAiBgB,EAAjB,YAAyC1I,KAAKkC,aAC9C,MACJ,IAAK,aACDlC,KAAK0H,MAAL,YAAiBgB,EAAjB,YAAoC1I,KAAKkC,aACzC,MACJ,IAAK,SACDlC,KAAK0H,MAAQ,IAAIgB,EAAa,SAAU1I,KAAKkC,YAC7C,MACJ,IAAK,OACDlC,KAAK0H,MAAQ,IAAIgB,EAAa,OAAQ1I,KAAKkC,YAC3C,MACJ,IAAK,WACDlC,KAAK0H,MAAQ,IAAIgB,EAAa,WAAY1I,KAAKkC,YAC/C,MACJ,IAAK,QACDlC,KAAK0H,MAAQ,IAAIgB,EAAa,QAAS1I,KAAKkC,YAIpDlC,KAAK0H,MAAMtH,IAAMJ,KAAKwE,IACtBxE,KAAK0H,MAAMiB,aAjKnB,gCAoKcC,EAAK9C,GAAQ,IAAD,gBACJA,GADI,IAClB,2BAAqB,SACf8B,UAAUgB,EAAI,GAAIA,EAAI,GAAIA,EAAI,KAFlB,iCApK1B,6BA0KWpD,EAAGM,GAAQ,IAAD,gBACCA,GADD,IACb,2BAAqB,CAAC,IAAbpF,EAAY,QACjBA,EAAEmI,QAAQrD,EAAExD,GACZtB,EAAEoI,QAAQtD,EAAEhC,GACZ9C,EAAEqI,QAAQvD,EAAEwD,IAJH,iCA1KrB,4CAkL0BrD,GAClB,IAAIF,EAAS,GAKb,OAHAA,EAAOrE,KAAKO,KAAKsH,OAAOtD,EAAMuD,GAAKvH,KAAKoB,KAAO,EAAIpB,KAAKoB,IAAO,MAC/D0C,EAAOrE,KAAKO,KAAKsH,OAAOtD,EAAMwD,GAAKxH,KAAKoB,KAAO,EAAIpB,KAAKoB,IAAO,MAC/D0C,EAAOrE,KAAKO,KAAKsH,OAAOtD,EAAMyD,GAAKzH,KAAKoB,KAAO,EAAIpB,KAAKoB,IAAO,MACxD0C,IAxLf,mCA2LiBhF,EAAM4I,GACf,IAAIC,EAAI,IAAIC,IACR/D,EAAI,IAAIgE,IAEZ,OAAQ/I,GACJ,IAAK,IACD,IAAIgJ,EAAgB,IAAIC,IAAQ,EAAG,EAAG,GACtCJ,EAAEK,mBAAmBF,EAAe,IAAIC,IAAQL,EAAI,GAAIA,EAAI,GAAIA,EAAI,KACpE7D,EAAEoE,kBAAkBN,GACpB,MACJ,IAAK,IACDA,EAAEO,UAAUR,GACZ7D,EAAEoE,kBAAkBN,GACpB,MACJ,IAAK,IACDA,EAAEQ,iBAAiB,IAAIJ,IAAQL,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAKA,EAAI,IAC5D7D,EAAEoE,kBAAkBN,GACpB,MACJ,IAAK,IACD9D,EAAEqE,UAAUR,GAIpB,OAAO7D,MAlNf,KCPauE,EAAb,WAOI,WAAYC,GAAY,oBACpBhK,KAAKiK,iBAAiBD,GAR9B,2DAWmBhI,EAAGwB,EAAGwF,GACjBhJ,KAAKkK,MAAMxE,SAASyE,IAAInI,EAAGwB,EAAGwF,KAZtC,mCAeiB1D,EAAGtC,GACZhD,KAAKkK,MAAM/C,MAAMiD,OAAOC,SAAS/E,EAAEgF,UAAU,GAAI,KACjDtK,KAAKkK,MAAMK,UAAgB,IAAJvH,IAjB/B,uCAoBqBgH,GACb,OAAQA,GACJ,IAAK,UACDhK,KAAKkK,MAAQ,IAAIM,IAAa,UAAW,IACzC,MACJ,IAAK,cACDxK,KAAKkK,MAAQ,IAAIO,IAAiB,UAAW,IAC7CzK,KAAKkK,MAAMxE,SAASyE,KAAK,EAAG,GAAI,GAChC,MACJ,IAAK,QACDnK,KAAKkK,MAAQ,IAAIQ,IAAW,UAAW,IACvC1K,KAAKkK,MAAMxE,SAASyE,IAAI,EAAG,EAAG,QA/B9C,KAAaJ,EAGFY,QAAU,EAHRZ,EAIFa,YAAc,EAJZb,EAKFc,MAAQ,EAgCJd,QC0EAe,EArGf,WAUI,WAAYC,EAAGzF,GAAI,yBARnB0F,KAAO,GASHhL,KAAKiL,KAAOF,EACZ/K,KAAKyF,OAASH,EAEdtF,KAAK0G,SAAW,IAAIwE,IAAkB,CAClC/D,MAAOnH,KAAKyF,OACZ0F,UAAW,IAGfnL,KAAKoL,UACLpL,KAAKqL,aAELrL,KAAKsL,kBAAoB,MACzBtL,KAAKuL,aAAe,KAvB5B,6DA0BqB9K,EAAM+K,GAGnB,GAFAxL,KAAKyL,cAAgB,KAEI,MAArBzL,KAAKuL,aAAsB,CAC3B,IAD2B,EACvBxF,EAAa,GADU,cAEXyF,GAFW,IAE3B,2BAAsB,CAAC,IAAD,EAAbrB,EAAa,sBACDA,EAAIhF,UADH,IAClB,2BAA+B,CAAC,IAAvB0B,EAAsB,QAC3Bd,EAAW3E,KAAKH,IAAoBM,sBAAsBsF,EAAKd,cAFjD,gCAFK,8BAO3B/F,KAAKuL,aAAetK,IAAoBM,sBAAsBwE,GAKlE,OAAQtF,GACJ,IAAK,MACD,IAAIiL,EAAM,IAAIC,IACd3L,KAAKuL,aAAaK,qBAClBF,EAAIG,KAAK7L,KAAKuL,aAAaO,aAC3B9L,KAAKyL,cAAgB,IAAIM,IAAWL,EAAK,UACzC,MACJ,IAAK,SAED1L,KAAKuL,aAAaS,wBAClB,IAAIC,EAASjM,KAAKuL,aAAaW,eAC/B7D,QAAQC,IAAI2D,GACZ,IAAIE,EAAO,IAAI/J,IAAqB6J,EAAO1I,OAAQ,GAAI,IACvD4I,EAAKvE,UAAUqE,EAAOG,OAAOpK,EAAGiK,EAAOG,OAAO5I,EAAGyI,EAAOG,OAAOpD,GAC/D,IAAItC,EAAW,IAAI2F,IAAkB,CAAElF,MAAO,WAC9CT,EAASY,WAAY,EACrBtH,KAAKyL,cAAgB,IAAIjE,IAAK2E,EAAMzF,GAS5C,OAAO1G,KAAKyL,gBAlEpB,mCAuEiBhG,GACTzF,KAAKyF,OAASA,EACdzF,KAAK0G,SAAW,IAAIwE,IAAkB,CAClC/D,MAAOnH,KAAKyF,OACZ0F,UAAW,IAEfnL,KAAKoL,UACLpL,KAAKqL,eA9Eb,iCAiFeJ,GACPjL,KAAKiL,KAAOA,EACZjL,KAAKoL,UACLpL,KAAKqL,eApFb,mCAwFQrL,KAAKsM,QAAU,IAAIC,IAAWvM,KAAKiL,KAAMjL,KAAKiL,KAAMjL,KAAKyF,OAAQzF,KAAKyF,UAxF9E,gCA4FQzF,KAAKgL,KAAO,GACZ,IAAIwB,EAAWxM,KAAKiL,KAAO,EAC3BjL,KAAKgL,KAAK5J,KAAK,IAAIqL,KAAK,IAAI9L,KAAiB+L,cAAc,CAAC,IAAIhD,KAAS8C,EAAU,EAAG,GAAI,IAAI9C,IAAQ8C,EAAU,EAAG,KAAMxM,KAAK0G,WAC9H1G,KAAKgL,KAAK5J,KAAK,IAAIqL,KAAK,IAAI9L,KAAiB+L,cAAc,CAAC,IAAIhD,IAAQ,GAAI8C,EAAU,GAAI,IAAI9C,IAAQ,EAAG8C,EAAU,KAAMxM,KAAK0G,WAC9H1G,KAAKgL,KAAK5J,KAAK,IAAIqL,KAAK,IAAI9L,KAAiB+L,cAAc,CAAC,IAAIhD,IAAQ,EAAG,GAAI8C,GAAW,IAAI9C,IAAQ,EAAG,EAAG8C,KAAaxM,KAAK0G,eAhGtI,KCuZed,EAvZf,WA4BI,aAAe,yBA3Bf4F,KAAO,GA2BO,KAbdmB,aAAc,EAaA,KAZdC,aAAc,EAYA,KAXdC,iBAAkB,EAWJ,KATdC,WAAa,cAUT9M,KAAK+M,MAAQ,IAAIC,IACjBhN,KAAKiN,aA9Bb,yDAkCQjN,KAAKkN,YAAc,EAEnBlN,KAAKmN,eAELnN,KAAKoN,SAAW,IAAIC,IAAc,CAAEC,WAAW,IAC/CtN,KAAKoN,SAASG,cAAcC,OAAOC,kBACnCzN,KAAKoN,SAASM,sBAAuB,EAErC1N,KAAK2N,OAAS,IAAIjE,IAAQ,EAAG,EAAG,GAEhC1J,KAAK4N,mBACL5N,KAAK6N,UAAU7N,KAAK8M,YAEpB9M,KAAK8N,SAAW,CACZ,IAAI/D,EAAM,WACV,IAAIA,EAAM,eACV,IAAIA,EAAM,UAEd/J,KAAK+N,MAAQ,IAAIjD,EAAM,GAAI,UAE3B9K,KAAKgO,SAAW,UAChBhO,KAAKoN,SAASa,cAAcjO,KAAKgO,UAtBxB,oBAyBKhO,KAAK8N,UAzBV,IAyBT,2BAA6B,CAAC,IAArBI,EAAoB,QACzBlO,KAAK+M,MAAMoB,IAAID,EAAEhE,QA1BZ,8BA4BTlK,KAAK+M,MAAMoB,IAAInO,KAAKoO,UA7D5B,mCAiEQ,IADQ,EACJC,EAAW,GADP,cAEMrO,KAAKwL,MAFX,IAER,2BAAwB,CAAC,IAAhBT,EAAe,QACpBsD,EAASjN,KAAKkN,KAAKC,UAAUxD,KAHzB,8BAKR,OAAOsD,IArEf,+BAyEQrO,KAAKwO,SAASC,SACdzO,KAAKoN,SAASsB,OAAO1O,KAAK+M,MAAO/M,KAAKoO,UA1E9C,qCA8EQpO,KAAK2O,uBAAwB,EAE7B3O,KAAKkG,eAAiB,CAClB,IAAI0I,IAAM,IAAIlF,IAAQ,EAAG,EAAG,GAAI,IAChC,IAAIkF,IAAM,IAAIlF,KAAS,EAAG,EAAG,GAAI,IACjC,IAAIkF,IAAM,IAAIlF,IAAQ,EAAG,EAAG,GAAI,IAChC,IAAIkF,IAAM,IAAIlF,IAAQ,GAAI,EAAG,GAAI,IACjC,IAAIkF,IAAM,IAAIlF,IAAQ,EAAG,EAAG,GAAI,IAChC,IAAIkF,IAAM,IAAIlF,IAAQ,EAAG,GAAI,GAAI,KAGrC1J,KAAK6O,gBAAkB,CACnB,IAAIC,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,UAC7C,IAAI4I,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,UAC7C,IAAI4I,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,OAC7C,IAAI4I,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,OAC7C,IAAI4I,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,KAC7C,IAAI4I,IAAY9O,KAAKkG,eAAe,GAAI,IAAK,MAlBtC,oBAqBOlG,KAAK6O,iBArBZ,IAqBX,IAAI,EAAJ,qBAAuC,CAAC,IAAhCE,EAA+B,QACnCA,EAAOC,SAAU,EACjBhP,KAAK+M,MAAMoB,IAAIY,IAvBR,iCA7EnB,6CAwG2BtI,GAAQ,IAAD,gBACXzG,KAAKwL,MADM,IAC1B,IAAI,EAAJ,qBAAyB,SACjByD,uBAAuBxI,IAFL,iCAxGlC,mCA8GiBzD,EAAGyD,GACZzG,KAAK6O,gBAAgB,EAAE7L,GAAGgM,QAAUvI,EACpCzG,KAAK6O,gBAAgB,EAAE7L,EAAE,GAAGgM,QAAUvI,IAhH9C,mCAmHiBzD,EAAGuB,GAAM,IAAD,gBACFvE,KAAKwL,MADH,IACjB,IAAI,EAAJ,qBAAyB,SACjB0D,cAAclM,EAAGuB,IAFR,iCAnHzB,yCA0HQvE,KAAKmP,OAAU3B,OAAO4B,YAAc,GAEhCpP,KAAK6M,gBACL7M,KAAKqP,MAAQ7B,OAAO8B,WAAa,IAEjCtP,KAAKqP,MAAQ7B,OAAO8B,WAAa,GAGrCtP,KAAKoN,SAASmC,QAAQvP,KAAKqP,MAAOrP,KAAKmP,UAlI/C,gCAqIc1O,GACM,eAARA,EACAT,KAAKoO,OAAS,IAAIoB,IAAkB,GAAIxP,KAAKqP,MAAQrP,KAAKmP,OAAQ,GAAK,MAEvEnP,KAAKoO,OAAS,IAAIqB,IAAmBzP,KAAKqP,OAAS,EAAGrP,KAAKqP,MAAQ,EAAGrP,KAAKmP,OAAS,EAAGnP,KAAKmP,QAAU,EAAG,IAAM,KAC/GnP,KAAKoO,OAAOsB,KAAO,GACnBrH,QAAQC,IAAItI,KAAKoO,OAAOsB,OAG5B1P,KAAKoO,OAAO1I,SAASsD,GAAK,GAE1BhJ,KAAKwO,SAAW,IAAImB,IAAc3P,KAAKoO,OAAQpO,KAAKoN,SAASwC,YAC7D5P,KAAKwO,SAASqB,OAAS7P,KAAK2N,SAjJpC,qCAqJ+B,eAAnB3N,KAAK8M,WACL9M,KAAKoO,OAAO0B,OAAS9P,KAAKqP,MAAQrP,KAAKmP,QAEvCnP,KAAKoO,OAAO2B,KAAO/P,KAAKqP,OAAU,EAClCrP,KAAKoO,OAAO4B,MAAQhQ,KAAKqP,MAAQ,EACjCrP,KAAKoO,OAAO6B,IAAMjQ,KAAKmP,OAAS,EAChCnP,KAAKoO,OAAO8B,OAASlQ,KAAKmP,OAAS,GAEvCnP,KAAKoO,OAAO+B,2BA7JpB,mCAgKiBjC,GACTlO,KAAK2N,OAAS,IAAIjE,IAAQwE,EAAElM,EAAGkM,EAAE1K,EAAG0K,EAAElF,GACtChJ,KAAKwO,SAASqB,OAAS7P,KAAK2N,OAC5B3N,KAAKwO,SAASC,WAnKtB,sCAwKQzO,KAAK6M,iBAAmB7M,KAAK6M,gBAC7B7M,KAAK4N,qBAzKb,+BA4KanI,GACLzF,KAAKgO,SAAWpI,EAAMC,SAASJ,EAAO2K,EAAG3K,EAAO/E,EAAG+E,EAAO4K,GAC1DrQ,KAAKoN,SAASa,cAAcjO,KAAKgO,YA9KzC,kCAiLgBvN,EAAM6P,GACdtQ,KAAK8N,SAASrN,GAAMuO,QAAUsB,IAlLtC,kCAqLgB7P,EAAMgF,GACdzF,KAAK8N,SAASrN,GAAM8P,aAAa3K,EAAMC,SAASJ,EAAO2K,EAAG3K,EAAO/E,EAAG+E,EAAO4K,GAAI5K,EAAOzC,KAtL9F,0CAyLwBvC,EAAMmI,GACtB5I,KAAK8N,SAASrN,GAAM+P,eAAe5H,EAAI5G,EAAG4G,EAAIpF,EAAGoF,EAAII,KA1L7D,uCA6LqByH,GACb,IAAIC,GAAW,EACXC,GAAW,EACX3Q,KAAK2M,cACL3M,KAAK4Q,aACLF,GAAW,GAEX1Q,KAAK4M,cACL5M,KAAK6Q,aACLF,GAAW,GAEf,IAAIlL,EAASG,EAAMC,SAAS4K,EAAIL,EAAGK,EAAI/P,EAAG+P,EAAIJ,GAC9CrQ,KAAK+N,MAAMwC,aAAa9K,GACpBiL,GACA1Q,KAAK4Q,aAELD,GACA3Q,KAAK6Q,eA9MjB,qCAkNmB5F,GACX,IAAIyF,GAAW,EACXC,GAAW,EACX3Q,KAAK2M,cACL3M,KAAK4Q,aACLF,GAAW,GAEX1Q,KAAK4M,cACL5M,KAAK6Q,aACLF,GAAW,GAGf3Q,KAAK+N,MAAM+C,WAAW7F,GAElByF,GACA1Q,KAAK4Q,aAELD,GACA3Q,KAAK6Q,eApOjB,mCA0OQ7Q,KAAK2M,aAAe3M,KAAK2M,YAErB3M,KAAK2M,YACL3M,KAAK+M,MAAMoB,IAAInO,KAAK+N,MAAMzB,SAE1BtM,KAAK+M,MAAMgE,OAAO/Q,KAAK+N,MAAMzB,WA/OzC,mCAsPQ,GAFAtM,KAAK4M,aAAe5M,KAAK4M,YAErB5M,KAAK4M,YAAa,CAAC,IAAD,gBACJ5M,KAAK+N,MAAM/C,MADP,IAClB,2BAA+B,CAAC,IAAvB7C,EAAsB,QAC3BnI,KAAK+M,MAAMoB,IAAIhG,IAFD,mCAIf,CAAC,IAAD,gBACWnI,KAAK+N,MAAM/C,MADtB,IACH,2BAA+B,CAAC,IAAvB7C,EAAsB,QAC3BnI,KAAK+M,MAAMgE,OAAO5I,IAFnB,kCA1Pf,6CAoQQnI,KAAKwO,SAASwC,YAAchR,KAAKwO,SAASwC,aApQlD,0CA+QwBvQ,EAAM6P,GACtBtQ,KAAK+M,MAAMgE,OAAO/Q,KAAK+N,MAAMtC,eAEzB6E,GACAtQ,KAAK+M,MAAMoB,IAAInO,KAAK+N,MAAMkD,iBAAiBxQ,EAAMT,KAAKwL,SAnRlE,oCAwRkB0F,GACV,IAAIhP,EAEJ,OAAQgP,GACJ,IAAK,YACDhP,EAAamC,EAAW7B,UACxB,MACJ,IAAK,iBACDN,EAAamC,EAAWf,eACxB,MACJ,IAAK,iBACDpB,EAAamC,EAAWZ,eACxB,MACJ,IAAK,aACDvB,EAAamC,EAAWL,UACxB,MACJ,IAAK,SACD9B,EAAamC,EAAWI,OACxB,MACJ,IAAK,OACDvC,EAAamC,EAAWK,KACxB,MACJ,IAAK,WACDxC,EAAamC,EAAWM,SACxB,MACJ,IAAK,QACDzC,EAAamC,EAAWO,MAKhC,OAAO1C,IAvTf,kCA0TgBiP,EAAIC,EAAQC,GAAI,IAAD,gBACPrR,KAAKwL,KAAK2F,GAAI/L,QADP,IACvB,2BAAsC,CAAC,IAA5BuB,EAA2B,QAClC3G,KAAK+M,MAAMgE,OAAOpK,IAFC,8BAIvB0K,EAAC,WAAD,cAAKD,IAJkB,oBAKPpR,KAAKwL,KAAK2F,GAAI/L,QALP,IAKvB,2BAAsC,CAAC,IAA5BuB,EAA2B,QAClC3G,KAAK+M,MAAMoB,IAAIxH,IANI,iCA1T/B,gCAoUcuK,GACN,IADY,IAAD,OACFlO,EAAI,EAAGA,EAAIhD,KAAKwL,KAAK3J,OAAQmB,IAClChD,KAAKsR,YAAYtO,EAAG,CAACA,EAAGkO,IAAM,SAAClO,EAAGkO,GAC9B,EAAK1F,KAAKxI,GAAGwB,IAAM0M,EACnB,EAAK1F,KAAKxI,GAAGoC,OAAS,GACtB,EAAKoG,KAAKxI,GAAGP,gBACb,EAAK+I,KAAKxI,GAAGsD,cACb,EAAKkF,KAAKxI,GAAGuD,iBA3U7B,uCAgVqB4K,EAAI1L,GAAS,IAAD,OACzBzF,KAAKsR,YAAYH,EAAI,CAACA,EAAI1L,IAAS,SAAC0L,EAAI1L,GACpC,EAAK+F,KAAK2F,GAAI/L,OAAS,GACvB,EAAKoG,KAAK2F,GAAII,cAAc3L,EAAMC,SAASJ,EAAO2K,EAAG3K,EAAO/E,EAAG+E,EAAO4K,IACtE,EAAK7E,KAAK2F,GAAI5K,iBApV1B,kCAwVgBmB,EAAOyJ,EAAIjP,GAAa,IAAD,OAC/BlC,KAAKsR,YAAYH,EAAI,CAACA,EAAIzJ,EAAOxF,IAAa,SAACiP,EAAIzJ,EAAOxF,GACtD,EAAKsJ,KAAK2F,GAAI/L,OAAS,GACvB,EAAKoG,KAAK2F,GAAI1Q,KAAOiH,EACrB,EAAK8D,KAAK2F,GAAIjP,WAAaA,EAAWqC,KACtC,EAAKiH,KAAK2F,GAAI1O,gBACd,EAAK+I,KAAK2F,GAAI7K,cACd,EAAKkF,KAAK2F,GAAI5K,iBA/V1B,sCAmWoB4K,EAAID,GAAM,IAAD,OACrBlR,KAAKsR,YAAYH,EAAI,CAACA,EAAID,IAAM,SAACC,EAAID,GACjC,EAAK1F,KAAK2F,GAAI/L,OAAS,GACvB,EAAKoG,KAAK2F,GAAI5J,UAAY2J,EAC1B,EAAK1F,KAAK2F,GAAI5K,iBAvW1B,sCA2WoB4K,EAAI1K,GAAS,IAAD,OACxBzG,KAAKsR,YAAYH,EAAI,CAACA,EAAI1K,IAAS,SAAC0K,EAAI1K,GACpC,EAAK+E,KAAK2F,GAAI/L,OAAS,GACvB,EAAKoG,KAAK2F,GAAI7J,UAAYb,EAC1B,EAAK+E,KAAK2F,GAAI5K,iBA/W1B,uCAmXqB4K,EAAI1K,GAAS,IAAD,OACzBzG,KAAKsR,YAAYH,EAAI,CAACA,EAAI1K,IAAS,SAAC0K,EAAI1K,GACpC,EAAK+E,KAAK2F,GAAI/L,OAAS,GACvB,EAAKoG,KAAK2F,GAAIrK,iBAAmBL,EACjC,EAAK+E,KAAK2F,GAAI5K,iBAvX1B,2BA2XSiL,GACD,IACIC,EAASC,EAFN,EACHlG,EAAOgG,EAAKtJ,MAAM,KADf,cAGSsD,GAHT,IAGP,2BAAsB,CAAC,IAAdrB,EAAa,QAClB,GAAW,IAAPA,EACA,OAGAsH,EAAUtH,EAAIjC,MAAM,MACpBwJ,EAAK,IAAI7M,EAAI4M,EAAQ,GAAIA,EAAQ,GAAIA,EAAQlJ,MAAM,GAAIvI,KAAKkG,eAAgBlG,KAAK2O,uBACjF3O,KAAKwL,KAAKpK,KAAKsQ,IAVhB,8BAcP1R,KAAK2R,qBAzYb,yCA6YwB,IAAD,gBACC3R,KAAKwL,MADN,IACf,2BAA2B,CAAC,IAAD,EAAlBrB,EAAkB,sBACPA,EAAI/E,QADG,IACvB,2BAA4B,CAAC,IAAlBuB,EAAiB,QACxB3G,KAAK+M,MAAMoB,IAAIxH,IAFI,gCADZ,kCA7YvB,gCAuQoByJ,EAAG1P,EAAG2P,GAClB,SAASuB,EAAetM,GACpB,IAAImC,EAAMnC,EAAEuM,SAAS,IACrB,OAAqB,GAAdpK,EAAI5F,OAAc,IAAM4F,EAAMA,EAEzC,MAAO,IAAMmK,EAAexB,GAAKwB,EAAelR,GAAKkR,EAAevB,OA5Q5E,K,yGCbMyB,EAAiB,SAAC,GAAD,IAAMC,EAAN,2BACnB,eAACC,EAAA,EAAD,2BAAcD,GAAd,cACI,eAACE,EAAA,EAAD,CAAWC,UAAU,YAArB,UACI,cAACF,EAAA,EAASG,KAAV,2BACA,cAACH,EAAA,EAASG,KAAV,CAAeC,SAAO,IACtB,eAACC,EAAA,EAAD,CAAYrM,KAAK,YAAjB,UACI,cAACsM,EAAA,EAAD,CAAOC,MAAM,IAAb,qBACA,cAACD,EAAA,EAAD,CAAOC,MAAM,IAAb,0BAEJ,cAACP,EAAA,EAASG,KAAV,CAAeK,OAAK,EAACC,MAAO,CAAEC,QAAS,EAAGrD,MAAO,OAEjD,cAAC2C,EAAA,EAASG,KAAV,wBACA,cAACH,EAAA,EAASG,KAAV,CAAeC,SAAO,IAEtB,eAACC,EAAA,EAAD,CAAYrM,KAAK,YAAjB,UACI,cAACsM,EAAA,EAAD,CAAOC,MAAM,IAAb,iBACA,cAACD,EAAA,EAAD,CAAOC,MAAM,IAAb,oBAEJ,cAACP,EAAA,EAASG,KAAV,CAAeK,OAAK,EAACC,MAAO,CAAEC,QAAS,EAAGrD,MAAO,UAGrD,cAACsD,EAAA,EAAD,CAAaC,QAAQ,SAArB,SACI,cAACC,EAAA,EAAD,CAAQC,WAAW,UAAUC,QAAShB,EAAMV,EAA5C,wBAGJ,cAACW,EAAA,EAASG,KAAV,CAAeK,OAAK,EAACC,MAAO,CAAEC,QAAS,EAAGrD,MAAO,YAKnD2D,EAAkB,SAAC,GAAD,IAAMjB,EAAN,2BAEpB,eAACC,EAAA,EAAD,2BAAcD,GAAd,cACI,cAACC,EAAA,EAASG,KAAV,wBACA,cAACH,EAAA,EAASG,KAAV,CAAeC,SAAO,IACtB,cAACJ,EAAA,EAASG,KAAV,uBACA,cAACH,EAAA,EAASG,KAAV,uBACA,cAACH,EAAA,EAASG,KAAV,uBACA,cAACH,EAAA,EAASG,KAAV,uBACA,cAACH,EAAA,EAASG,KAAV,CAAeK,OAAK,EAACC,MAAO,CAAEC,QAAS,EAAGrD,MAAO,OACjD,cAACsD,EAAA,EAAD,CAAaC,QAAQ,SAArB,SACI,cAACC,EAAA,EAAD,CAAQC,WAAW,UAAnB,2BAGJ,cAACd,EAAA,EAASG,KAAV,CAAeK,OAAK,EAACC,MAAO,CAAEC,QAAS,EAAGrD,MAAO,YA4B1C4D,EAvBH,SAAC,GAAD,IAAMlB,EAAN,2BACR,cAACmB,EAAA,EAAD,CAAQT,MAAO,CAACtD,OAAS,IAAzB,SACI,cAACgE,EAAA,EAAD,UACI,eAACA,EAAA,EAAOC,KAAR,WACI,cAACC,EAAA,EAAD,CAAKC,WAAS,EAAd,SACI,eAACC,EAAA,EAAD,WACI,eAACF,EAAA,EAAIlB,KAAL,CAAUqB,QAAM,EAAhB,iBAAsBzB,EAAM0B,OAC5B,cAACJ,EAAA,EAAIlB,KAAL,CAAUW,WAAW,SAASY,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,eAA/C,uBACA,cAACL,EAAA,EAAIlB,KAAL,CAAUW,WAAW,SAASY,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,aAA/C,oBACA,cAAC,EAAD,CAAiBE,MAAM,UAAUC,QAAQ,QAAQC,UAAU,YAAYJ,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,eACxF,cAAC,EAAD,CAAgBE,MAAM,SAASC,QAAQ,QAAQC,UAAU,YAAYJ,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,WAAarC,EAAGU,EAAMgC,UAAU,KACtH,cAACV,EAAA,EAAIlB,KAAL,CAAUW,WAAW,SAASY,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,kBAAoBM,SAAUjC,EAAMgC,UAAU,GAA7F,kBACA,cAACV,EAAA,EAAIlB,KAAL,CAAUuB,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAK,gBAAkBM,SAAUjC,EAAMgC,UAAU,GAAvE,yBAGR,cAACV,EAAA,EAAD,CAAKY,UAAQ,EAAb,SACI,oBAAIxB,MAAO,CAAEC,QAAS,IAAtB,+B,0KC5DPwB,GAAe,SAACnC,GAGzB,IAFA,IAAI5H,EAAM,GAEDnH,EAAI,EAAGA,EAAI+O,EAAMoC,OAAOtS,OAAQmB,IAErCmH,EAAI/I,KACA,cAAC,GAAD,CAAgBwS,MAAO7B,EAAMoC,OAAOnR,GAAIoR,OAAQrC,EAAMqC,OAAOpR,GAAIqR,WAAS,EAAChD,EAAGU,EAAMV,EAAGiD,MAAOtR,KAItG,OAAOmH,GAGEoK,GAAb,kDAGI,WAAYxC,GAAQ,IAAD,8BACf,gBACKyB,OAASzB,EAAMyB,OACpB,EAAKnC,EAAIU,EAAMV,EACf,EAAKuC,MAAQ7B,EAAM6B,MACnB,EAAKQ,OAASrC,EAAMqC,OACpB,EAAKC,UAAYtC,EAAMsC,UACvB,EAAKC,MAAQvC,EAAMuC,MACnB,EAAKE,aAAezC,EAAMyC,aAC1B,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBATJ,EAHvB,wDAegBnC,GACRvS,KAAKwT,OAASjB,EACdvS,KAAKqR,EAAEkB,EAAOvS,KAAKsU,SAjB3B,+BAqBQ,IAAIK,EAEJ,GAAI3U,KAAKqU,UAAW,CAChB,IAAMO,EAAa5U,KAAKoU,OACxBO,EACK,qBAAKlC,MAAO,CAAEpD,MAAO,IAAKwF,WAAY,IAAtC,SACG,cAACC,GAAA,EAAD,CAAaC,aAAcH,EAAYI,KAAM,GAAKC,SAAUjV,KAAKyU,oBAEtE,CAEH,IAGIS,EALD,EAEC3Q,EAAOvE,KAAKoU,OACZZ,EAASxT,KAAKwT,OACd2B,EAAY,GAJb,cAOa5Q,GAPb,IAOH,2BAAsB,CAAC,IAAd2M,EAAa,QACYgE,GAA7B1B,EAAOxS,cAAckQ,GACtBiE,EAAU/T,KAAK,cAAC4Q,EAAA,EAASG,KAAV,CAAeiD,SAAUlE,EAAKsC,OAAQ0B,EAAKlB,SAAUhU,KAAKyU,YAA1D,SAAwEvD,MATxF,8BAYHiE,EAAU/T,KAAK,cAAC4Q,EAAA,EAASG,KAAV,CAAeiD,SAAU,QAAS5C,OAAK,EAACC,MAAO,CAAEpD,MAAO,QAEvEsF,EACI,cAACpB,EAAA,EAAD,CAAed,MAAO,CAAEpD,MAAO,GAAIwF,WAAY,GAA/C,SACI,cAAC7C,EAAA,EAAD,CAAUS,MAAO,CAAEpD,MAAO,KAAOuE,MAAO5T,KAAKwT,OAA7C,SACK2B,MAOjB,OACI,8BACI,eAACE,EAAA,EAAD,CAAK5C,MAAO,CAAE6C,UAAW,IAAzB,UAEI,cAACC,GAAA,EAAD,CAAKC,GAAI,GAAT,SAAa,mBAAG/C,MAAO,CAAE6C,UAAW,GAAIT,WAAY,IAAvC,SAA8C7U,KAAK4T,UAChE,cAAC2B,GAAA,EAAD,CAAKC,GAAI,KACT,cAACD,GAAA,EAAD,CAAKC,GAAI,GAAT,SAAcb,aA3DlC,GAAoCc,IAAMC,WAmE7BC,GAAc,SAAC5D,GAAW,IAAD,EACR0D,IAAMG,SAAS7D,EAAMxN,MADb,oBAC3BgO,EAD2B,KACpBsD,EADoB,KAE9BxE,EAAIU,EAAMV,EACVrO,EAAI+O,EAAMuC,MAEd,OACI,gCACI,uBACA,eAACe,EAAA,EAAD,WACI,cAACE,GAAA,EAAD,CAAKC,GAAI,EAAT,SACI,mBAAG/C,MAAO,CAAE6C,UAAW,GAAIT,WAAY,IAAvC,SAA8C9C,EAAM6B,UAExD,cAAC2B,GAAA,EAAD,CAAKC,GAAI,IACT,cAACD,GAAA,EAAD,CAAKC,GAAI,GAAT,SACI,eAACM,GAAA,EAAD,WACI,cAAChB,GAAA,EAAD,CACIiB,KAAM,GACNC,IAAK,GACLzD,MAAOA,EAAM,GACbyC,KAAM,GACNC,SAAU,SAAAgB,GAAc,IAAD,eACE1D,EADF,GACL2D,GADK,WAEf9N,WAAW6N,GAAaC,IAG5BL,EAAS,CAACzN,WAAW6N,GAAYC,IACjC7E,EAAErO,EAAG,CAACoF,WAAW6N,GAAWC,QAGpC,cAACJ,GAAA,EAAWK,MAAZ,iBACA,cAACrB,GAAA,EAAD,CACIiB,KAAM,GACNC,IAAK,GACLzD,MAAOA,EAAM,GACbyC,KAAM,GACNC,SAAU,SAACgB,GAAe,IAAD,eACA1D,EADA,GACd6D,EADc,UAEjBA,EAAQhO,WAAW6N,KAGvBJ,EAAS,CAACO,EAAOhO,WAAW6N,KAC5B5E,EAAErO,EAAG,CAACoT,EAAOhO,WAAW6N,iBAM5C,cAACZ,EAAA,EAAD,UACI,cAACE,GAAA,EAAD,CAAKC,GAAI,GAAT,SACI,cAACa,GAAA,EAAD,CACIN,KAAM,GACNC,IAAK,GACLM,UAAQ,EACR7D,MAAO,CAAEoC,WAAY,GAAIS,UAAW,IACpC/C,MAAOA,EACP0C,SAAU,SAAA1C,GACNsD,EAAStD,GAETlB,EAAErO,EAAGuP,cAUpBgE,GAAe,SAACxE,GAEzB,IAIItR,EAJA4Q,EAAIU,EAAMV,EAFqB,EAGXuE,mBAAS7D,EAAMb,KAHJ,oBAG9BqB,EAH8B,KAGvBsD,EAHuB,OAITD,oBAAS,GAJA,oBAI9BY,EAJ8B,UAS/B/V,EADc,MAAdsR,EAAMtR,KACC,KAEAsR,EAAMtR,KAGjB+V,EAAWzE,EAAMyE,SAdkB,mBAehBzE,EAAM0E,WAfU,GAe5BV,EAf4B,KAevBC,EAfuB,KAkBnC,OAEI,eAACX,EAAA,EAAD,WACI,cAACE,GAAA,EAAD,CAAKC,GAAI,GAAT,SACI,cAACkB,GAAA,EAAD,CACIjE,MAAO,CAAEoC,WAAY,GAAIS,UAAW,GAAIjG,MAAO,KAC/CkD,MAAOA,EACPwD,IAAKA,EACLC,IAAKA,EACLQ,SAAUA,EACVvB,SAAU,SAAA1C,GACNsD,EAAStD,GACTlB,EAAEkB,EAAO9R,QAIrB,cAAC8U,GAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAACV,GAAA,EAAD,CACIrC,MAAO,CAAEoC,WAAY,GAAIS,UAAW,EAAGqB,aAAc,EAAGtH,MAAO,GAAIF,OAAQ,IAC3E4G,IAAKA,EACLC,IAAKA,EACLzD,MAAOA,EACPiE,SAAUA,EACVvB,SAAU,SAAA1C,GACNsD,EAAStD,GACTlB,EAAEkB,EAAOR,EAAMtR,eCjMjCmW,GAAoB,GACpBC,GAAe,CACjB1P,MAAO,WAGL2P,GACF,cAACC,EAAA,EAAD,4DAKSC,GAAb,kDAEI,WAAYjF,GAAQ,IAAD,8BACf,gBACKkF,MAAQC,GAAKC,WAClB,EAAKC,MAAQrF,EAAMqF,MAEnB,EAAKC,YAAc,EAAKA,YAAY3C,KAAjB,gBACnB,EAAK4C,UAAY,EAAKA,UAAU5C,KAAf,gBACjB,EAAK6C,gBAAkB,EAAKA,gBAAgB7C,KAArB,gBACvB,EAAK8C,gBAAkB,EAAKA,gBAAgB9C,KAArB,gBACvB,EAAK+C,aAAe,EAAKA,aAAa/C,KAAlB,gBACpB,EAAKgD,gBAAkB,EAAKA,gBAAgBhD,KAArB,gBACvB,EAAKiD,iBAAmB,EAAKA,iBAAiBjD,KAAtB,gBAXT,EAFvB,4DAgBoBxD,GACZlR,KAAK4X,SAAS,CACVrQ,UAAW2J,IAEfgG,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQjM,UAAY2J,EAC9DlR,KAAKoX,MAAMM,gBAAgB1X,KAAKiX,MAAMzD,OAAQtC,KArBtD,uCAwBqBqB,EAAO9R,GACpB,IAAIgF,EAASzF,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QAAQ/N,OAE1D,OAAQhF,GACJ,IAAK,IACDgF,EAAO2K,EAAImC,EACX,MACJ,IAAK,IACD9M,EAAO/E,EAAI6R,EACX,MACJ,IAAK,IACD9M,EAAO4K,EAAIkC,EAGnBvS,KAAKoX,MAAMO,iBAAiB3X,KAAKiX,MAAMzD,OAAQ/N,GAC/CyR,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQ/N,OAASA,IAvCnE,qCA2CQ,IAAIgB,GAAUzG,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QAAQsE,mBAC3D9X,KAAK4X,SAAS,CACVE,mBAAoBrR,IAExByQ,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQsE,mBAAqBrR,EACvEzG,KAAKoX,MAAMW,iBAAiB/X,KAAKiX,MAAMzD,OAAQ/M,KAhDvD,wCAoDQ,IAAIA,GAAUzG,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QAAQwE,mBAC3DhY,KAAK4X,SAAS,CACVI,mBAAoBvR,IAExByQ,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQwE,mBAAqBvR,EACvEzG,KAAKoX,MAAMI,gBAAgBxX,KAAKiX,MAAMzD,OAAQ/M,KAzDtD,sCA4DoByK,EAAKoD,GACjBtU,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QAAQtR,WAAWqC,KAAK+P,GAASlM,WAAW8I,GACjFlR,KAAKiY,QACLf,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQtR,WAAWqC,KAAK+P,GAASlM,WAAW8I,GACtFlR,KAAKoX,MAAMc,YAAYlY,KAAKiX,MAAMvP,MAAO1H,KAAKiX,MAAMzD,OAAQxT,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QAAQtR,cAhEjH,8BAoEQ,IAAIc,EAEAA,EADAhD,KAAKiX,MAAMgB,MAAQ,GACf,IAEEjY,KAAKiX,MAAMgB,MAErBjY,KAAK4X,SACD,CACIK,MAAOjV,MA5EvB,gCAiFckO,GACN,IAAK,IAAIlO,EAAI,EAAGA,EAAIhD,KAAKiX,MAAMzL,KAAK3J,OAAQmB,IACxC,GAA6C,GAAzChD,KAAKiX,MAAMzL,KAAKxI,GAAGhC,cAAckQ,GAAW,CAC5ClR,KAAK4X,SAAS,CACVpE,OAAQxQ,IAEZkU,GAAKC,WAAW3D,OAASxQ,EACzB,MAGRhD,KAAKiY,UA3Fb,kCA8FgB/G,GACR,IAAIhP,EAAalC,KAAKoX,MAAMe,cAAcjH,GAC1ClR,KAAK4X,SACD,CACIlQ,MAAOwJ,EACPhP,WAAYA,IAIpBlC,KAAKiY,QACLf,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQ9L,MAAQwJ,EAC1DgG,GAAKC,WAAWU,eAAe7X,KAAKiX,MAAMzD,QAAQtR,WAAaA,EAG/DlC,KAAKoX,MAAMc,YAAYhH,EAAKlR,KAAKiX,MAAMzD,OAAQtR,KA5GvD,+BAgHQ,IAAMkW,EAAcpY,KAAKiX,MAAMY,eAAe7X,KAAKiX,MAAMzD,QACnDyE,EAAQjY,KAAKiX,MAAMgB,MACnBrE,EAAQwE,EAAYxE,MAEpBpI,EAAOxL,KAAKiX,MAAMzL,KAExB,OACI,gCAGI,cAAC6M,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,8BACT,cAAC,GAAD,CAAgBxF,EAAGrR,KAAKsX,UAAW9C,cAAY,EAACZ,MAAM,MAAMQ,OAAQ5I,EAAMgI,OAAQI,IAClF,cAAC,GAAD,CAAgBvC,EAAGrR,KAAKqX,YAAazD,MAAM,QAAQQ,OAT5C,CAAC,YAAa,SAAU,iBAAkB,iBAAkB,aAAc,OAAQ,WAAY,SASlCZ,OAAQ4E,EAAY1Q,QACvF,cAAC,GAAD,CAAc2J,EAAGrR,KAAKuX,gBAAiBpD,OAAQiE,EAAYlW,WAAWoC,MAAO8P,OAAQgE,EAAYlW,WAAWqC,OAC5G,uBACA,cAAC8T,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,2BAET,eAACxB,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,cAACC,GAAA,EAAD,CAAUC,QAASL,EAAYJ,mBAAoBjF,QAAS/S,KAAKwX,gBAAjE,oCACA,cAACgB,GAAA,EAAD,CAAUC,QAASL,EAAYN,mBAAoB/E,QAAS/S,KAAKyX,aAAjE,oCACA,6BAIR,mBAAGhF,MAAO,CAAEoC,WAAY+B,IAAxB,mBACA,cAAC,GAAD,CAAcvF,EAAGrR,KAAK2X,iBAAkBnB,SAAU4B,EAAYN,mBAAoBrB,WAAY,CAAC,EAAG,KAAMvF,IAAKkH,EAAY3S,OAAO2K,EAAG3P,KAAM,MACzI,cAAC,GAAD,CAAc4Q,EAAGrR,KAAK2X,iBAAkBnB,SAAU4B,EAAYN,mBAAoBrB,WAAY,CAAC,EAAG,KAAMvF,IAAKkH,EAAY3S,OAAO/E,EAAGD,KAAM,MACzI,cAAC,GAAD,CAAc4Q,EAAGrR,KAAK2X,iBAAkBnB,SAAU4B,EAAYN,mBAAoBrB,WAAY,CAAC,EAAG,KAAMvF,IAAKkH,EAAY3S,OAAO4K,EAAG5P,KAAM,MACzI,mBAAGgS,MAAO,CAAEoC,WAAY+B,IAAxB,yBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKkH,EAAY7Q,UAAW8J,EAAGrR,KAAK0X,oBAxBnFO,OAvHtB,GAAmCxC,IAAMC,WAsJ5BgD,GAAb,kDAEI,WAAY3G,GAAQ,IAAD,8BACf,gBACKkF,MAAQC,GAAKyB,iBAElB,EAAKvB,MAAQrF,EAAMqF,MACnB,EAAKwB,iBAAmB,EAAKA,iBAAiBlE,KAAtB,gBACxB,EAAKmE,iBAAmB,EAAKA,iBAAiBnE,KAAtB,gBACxB,EAAKoE,UAAY,EAAKA,UAAUpE,KAAf,gBACjB,EAAKqE,aAAe,EAAKA,aAAarE,KAAlB,gBARL,EAFvB,+DAcQ1U,KAAK4X,SAAS,CACVoB,UAAWhZ,KAAKiX,MAAM+B,WAE1B9B,GAAKyB,iBAAiBK,UAAY9B,GAAKyB,iBAAiBK,SACxDhZ,KAAKoX,MAAM6B,yBAlBnB,uCAoBqB1G,GACbvS,KAAK4X,SAAS,CACVnX,KAAM8R,IAEV2E,GAAKyB,iBAAiB7L,WAAayF,EACnCvS,KAAKoX,MAAMvJ,UAAU0E,KAzB7B,gCA2BcA,GACNvS,KAAK4X,SAAS,CACVxX,IAAKmS,IAET2E,GAAKyB,iBAAiBvY,IAAMmS,EAC5BvS,KAAKoX,MAAM0B,UAAUvG,EAAQ,KAhCrC,mCAmCiBA,EAAO9R,GAChB,IAAIkN,EAAS3N,KAAKiX,MAAMtJ,OAExB,OAAQlN,GACJ,KAAK,EACDkN,EAAO3L,EAAIoG,WAAWmK,GACtB,MACJ,KAAK,EACD5E,EAAOnK,EAAI4E,WAAWmK,GACtB,MACJ,KAAK,EACD5E,EAAO3E,EAAIZ,WAAWmK,GAI9BlK,QAAQC,IAAIqF,GACZ3N,KAAKoX,MAAM8B,aAAavL,GACxBuJ,GAAKyB,iBAAiBhL,OAASA,IApDvC,+BAyDQ,IAAMb,EAAa9M,KAAKiX,MAAMxW,KACxBuY,EAAWhZ,KAAKiX,MAAM+B,SAE5B,OACI,gCAEI,cAACX,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,wBACT,eAACsC,GAAA,EAAD,CAAMC,OAAK,EAAX,UACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SAEI,cAACC,GAAA,EAAD,CAAUC,QAASO,EAAUjG,QAAS/S,KAAK4Y,iBAA3C,8BAGR,eAACvD,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SAGI,cAACtG,EAAA,EAAD,CAAWC,UAAU,YAArB,SACI,eAACG,EAAA,EAAD,CAAYrM,KAAK,YAAYuM,MAAOzF,EAAYmI,SAAUjV,KAAK6Y,iBAA/D,UACI,uBACA,qCACA,cAACvG,EAAA,EAAD,CAAO+G,gBAAc,EAAC9G,MAAM,cAA5B,0BACA,cAACD,EAAA,EAAD,CAAOC,MAAM,eAAb,qCAOhB,eAAC8C,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,uBACA,kDAKZ,cAAC,GAAD,CAAcpE,OAAQ,CAAC,aAAc,aAAc,cAAeC,OAAQ,CAAC,EAAK,EAAK,GAAM/C,EAAGrR,KAAK+Y,eACnG,uBAIA,cAACV,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,mCAET,cAACyC,GAAA,EAAD,CAAM7G,MAAO,CAAEoC,WAAY+B,IAAqB2C,OAAO,SAAvD,SACI,eAACtH,EAAA,EAAD,WACI,cAACuH,GAAA,EAAD,8BACA,cAACC,GAAA,EAAD,CAAS3F,UAAU,MAAMD,QAAQ,QAAQ6F,QAAS5C,GAAlD,SACI,cAACnD,EAAA,EAAD,CAAMD,KAAK,kBAAkBzI,KAAK,KAAKwH,MAAO,CAAE6C,UAAW,aAKvE,cAACoB,GAAA,EAAD,CAEIX,IAAK,EACLf,KAAM,EACNgB,IAAK,EACLjB,aAAc,EACd4E,WAAS,EACTrD,UAAQ,EACR7D,MAAO,CAAEpD,MAAO,IAAKwF,WAAY,IACjCI,SAAUjV,KAAK8Y,UACfc,WAAY,SAAAC,GACR,OAAOA,YA7H/B,GAAiCpE,IAAMC,WAqI1BoE,GAAb,kDAEI,WAAY/H,GAAQ,IAAD,8BACf,gBACKkF,MAAQC,GAAK6C,aAClB,EAAK3C,MAAQrF,EAAMqF,MAEnB,EAAK4C,mBAAqB,EAAKA,mBAAmBtF,KAAxB,gBAC1B,EAAKuF,cAAgB,EAAKA,cAAcvF,KAAnB,gBACrB,EAAKwF,cAAgB,EAAKA,cAAcxF,KAAnB,gBACrB,EAAKyF,cAAgB,EAAKA,cAAczF,KAAnB,gBACrB,EAAK0F,cAAgB,EAAKA,cAAc1F,KAAnB,gBACrB,EAAK2F,aAAe,EAAKA,aAAa3F,KAAlB,gBAVL,EAFvB,iEAgBQ,IAAIjO,GAAUzG,KAAKiX,MAAM9Q,iBACzBnG,KAAK4X,SACD,CACIzR,iBAAkBM,IAG1ByQ,GAAK6C,aAAa5T,iBAAmBM,EACrCzG,KAAKoX,MAAMnI,uBAAuBxI,KAvB1C,oCA0BkB6T,GACVta,KAAK4X,SACD,CACI0C,QAASA,IAGjBpD,GAAK6C,aAAaO,QAAUA,IAhCpC,sCAoCQ,IAAIA,EAAUta,KAAKiX,MAAMqD,QACrB7T,GAAU6T,EAAQ,GACtBA,EAAQ,GAAK7T,EACbzG,KAAKoa,cAAcE,GACnBta,KAAKoX,MAAMmD,aAAa,EAAG9T,KAxCnC,sCA4CQ,IAAI6T,EAAUta,KAAKiX,MAAMqD,QACrB7T,GAAU6T,EAAQ,GACtBA,EAAQ,GAAK7T,EACbzG,KAAKoa,cAAcE,GACnBta,KAAKoX,MAAMmD,aAAa,EAAG9T,KAhDnC,sCAoDQ,IAAI6T,EAAUta,KAAKiX,MAAMqD,QACrB7T,GAAU6T,EAAQ,GACtBA,EAAQ,GAAK7T,EACbzG,KAAKoa,cAAcE,GACnBta,KAAKoX,MAAMmD,aAAa,EAAG9T,KAxDnC,mCA2DiBzD,EAAGuB,GACZ,OAAQvB,GACJ,KAAK,EACDkU,GAAK6C,aAAa/X,EAAIuC,EACtB,MACJ,KAAK,EACD2S,GAAK6C,aAAavW,EAAIe,EACtB,MACJ,KAAK,EACD2S,GAAK6C,aAAa/Q,EAAIzE,EAI9BvE,KAAKoX,MAAMiD,aAAarX,EAAGuB,KAxEnC,+BA2EQ,IAAM0S,EAAQjX,KAAKiX,MACnB,OACI,gCACI,uBACA,cAACkC,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SACI,cAACC,GAAA,EAAD,CAAUC,QAASxB,EAAM9Q,iBAAkB4M,QAAS/S,KAAKga,mBAAzD,wCAIZ,cAAC,GAAD,CAAapG,MAAM,OAAOvC,EAAGrR,KAAKqa,aAAc/F,MAAO,EAAG/P,KAAM0S,EAAMjV,IACtE,uBACA,cAACmX,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SACI,cAACC,GAAA,EAAD,CAAUC,QAASxB,EAAMqD,QAAQ,GAAIvH,QAAS/S,KAAKia,cAAnD,iCAIZ,cAAC,GAAD,CAAarG,MAAM,OAAOvC,EAAGrR,KAAKqa,aAAc/F,MAAO,EAAG/P,KAAM0S,EAAMzT,IACtE,uBACA,cAAC2V,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SACI,cAACC,GAAA,EAAD,CAAUC,QAASxB,EAAMqD,QAAQ,GAAIvH,QAAS/S,KAAKka,cAAnD,iCAIZ,cAAC,GAAD,CAAatG,MAAM,OAAOvC,EAAGrR,KAAKqa,aAAc/F,MAAO,EAAG/P,KAAM0S,EAAMjO,IACtE,uBACA,cAACmQ,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,cAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,SACI,cAACC,GAAA,EAAD,CAAUC,QAASxB,EAAMqD,QAAQ,GAAIvH,QAAS/S,KAAKma,cAAnD,wCAjH5B,GAAoC1E,IAAMC,WA2H7B8E,GAAsB,SAAC,GAA0B,IAAxBhH,EAAuB,EAAvBA,OAAQQ,EAAe,EAAfA,SAC1C,OACI,eAACX,EAAA,EAAD,CAAKoH,UAAWjH,EAAQQ,SAAUA,EAAUvB,MAAO,CAAEiI,OAAQ,GAAIrL,MAAO,KAAOsL,WAAS,EAAC7H,WAAW,OAApG,UACI,cAACO,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,QAAnB,mBACA,cAAC/B,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,cAAnB,6BAKCwF,GAAb,kDAEI,WAAY7I,GAAQ,IAAD,8BACf,gBACKkF,MAAQC,GAAK2D,gBAClB,EAAKzD,MAAQrF,EAAMqF,MACnB,EAAKa,MAAQ,EACb,EAAK6C,aAAe,EAAKA,aAAapG,KAAlB,gBACpB,EAAKnE,aAAe,EAAKA,aAAamE,KAAlB,gBACpB,EAAKlE,eAAiB,EAAKA,eAAekE,KAApB,gBACtB,EAAKqG,mBAAqB,EAAKA,mBAAmBrG,KAAxB,gBARX,EAFvB,2DAcwD,GAA5C1U,KAAKiX,MAAMzD,OAAOxS,cAAc,SAChChB,KAAK4X,SAASV,GAAK8D,uBAEnBhb,KAAK4X,SAASV,GAAK2D,iBAEnB7a,KAAKiY,MAAQ,IACbjY,KAAKiY,MAAQ,GAGjBjY,KAAK4X,SAAS,CAAEK,QAASjY,KAAKiY,UAvBtC,2CA0BQ,IAII1N,EAJA+F,GAAWtQ,KAAKiX,MAAM3G,QAC1BtQ,KAAK4X,SAAS,CACVtH,QAASA,IAGmC,GAA5CtQ,KAAKiX,MAAMzD,OAAOxS,cAAc,UAChCkW,GAAK2D,gBAAgBvK,QAAUA,EAC/B/F,EAAY2M,GAAK2D,gBAAgBpV,OAAOzC,IAExCkU,GAAK8D,sBAAsB1K,QAAUA,EACrC/F,EAAY2M,GAAK8D,sBAAsBvV,OAAOzC,GAG9CsN,EACAtQ,KAAKuQ,aAAahG,EAAW,KAE7BvK,KAAKuQ,aAAa,EAAG,KAEzBvQ,KAAK4X,SAAS,CAAEK,QAASjY,KAAKiY,QAEkB,GAA5CjY,KAAKiX,MAAMzD,OAAOxS,cAAc,SAChCkW,GAAK2D,gBAAgBpV,OAAOzC,EAAIuH,EAEhC2M,GAAK8D,sBAAsBvV,OAAOzC,EAAIuH,IAjDlD,mCAsDiBgI,EAAO9R,GAChB,IAAIgF,EAASzF,KAAKiX,MAAMxR,OAExB,OAAQhF,GACJ,IAAK,IACDgF,EAAO2K,EAAImC,EACX,MACJ,IAAK,IACD9M,EAAO/E,EAAI6R,EACX,MACJ,IAAK,IACD9M,EAAO4K,EAAIkC,EACX,MACJ,IAAK,IACD9M,EAAOzC,EAAIuP,EAM6B,GAA5CvS,KAAKiX,MAAMzD,OAAOxS,cAAc,UAChChB,KAAKoX,MAAM6D,YAAY,EAAGxV,GAC1ByR,GAAK2D,gBAAgBpV,OAASA,IAE9BzF,KAAKoX,MAAM6D,YAAY,EAAGxV,GAC1ByR,GAAK8D,sBAAsBvV,OAASA,KA/EhD,qCAkFmB8M,EAAO9R,GAClB,IAAIiF,EAAW1F,KAAKiX,MAAMvR,SAE1B,OAAQjF,GACJ,IAAK,IACDiF,EAAS1D,EAAIuQ,EACb,MACJ,IAAK,IACD7M,EAASlC,EAAI+O,EACb,MACJ,IAAK,IACD7M,EAASsD,EAAIuJ,EAI2B,GAA5CvS,KAAKiX,MAAMzD,OAAOxS,cAAc,UAChChB,KAAKoX,MAAM8D,oBAAoB,EAAGxV,GAClCwR,GAAK2D,gBAAgBnV,SAAWA,IAEhC1F,KAAKoX,MAAM8D,oBAAoB,EAAGxV,GAClCwR,GAAK8D,sBAAsBtV,SAAWA,KAtGlD,+BA2GQ,IAAM8N,EAASxT,KAAKiX,MAAMzD,OACpB2H,EAAanb,KAAKiX,MAExB,OACI,gCACI,uBACA,cAAC,GAAD,CAAqBzD,OAAQA,EAAQQ,SAAUhU,KAAK8a,eACpD,uBACA,cAAC3B,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,eAACC,GAAA,EAAD,CAAUC,QAAS0C,EAAW7K,QAASyC,QAAS/S,KAAK+a,mBAArD,cAA0E,8CAA1E,OACA,+BAIZ,mBAAGtI,MAAO,CAAEoC,WAAY+B,IAAxB,mBACA,cAAC,GAAD,CAAcJ,UAAW2E,EAAW7K,QAASmG,WAAY,CAAC,EAAG,KAAMvF,IAAKiK,EAAW1V,OAAO2K,EAAGiB,EAAGrR,KAAKuQ,aAAc9P,KAAM,MACzH,cAAC,GAAD,CAAc+V,UAAW2E,EAAW7K,QAASmG,WAAY,CAAC,EAAG,KAAMvF,IAAKiK,EAAW1V,OAAO/E,EAAG2Q,EAAGrR,KAAKuQ,aAAc9P,KAAM,MACzH,cAAC,GAAD,CAAc+V,UAAW2E,EAAW7K,QAASmG,WAAY,CAAC,EAAG,KAAMvF,IAAKiK,EAAW1V,OAAO4K,EAAGgB,EAAGrR,KAAKuQ,aAAc9P,KAAM,MACzH,mBAAGgS,MAAO,CAAEoC,WAAY+B,IAAxB,yBACA,cAAC,GAAD,CAAcJ,UAAW2E,EAAW7K,QAASmG,WAAY,CAAC,EAAG,KAAMvF,IAAKiK,EAAW1V,OAAOzC,EAAGqO,EAAGrR,KAAKuQ,aAAc9P,KAAM,MACzH,mBAAGgS,MAAO,CAAEoC,WAAY+B,IAAxB,4BACA,cAAC,GAAD,CAAcJ,UAAW2E,EAAW7K,QAASmG,WAAY,EAAE,GAAI,IAAKvF,IAAKiK,EAAWzV,SAAS1D,EAAGqP,EAAGrR,KAAKwQ,eAAgB/P,KAAM,MAC9H,cAAC,GAAD,CAAc+V,UAAW2E,EAAW7K,QAASmG,WAAY,EAAE,GAAI,IAAKvF,IAAKiK,EAAWzV,SAASlC,EAAG6N,EAAGrR,KAAKwQ,eAAgB/P,KAAM,MAC9H,cAAC,GAAD,CAAc+V,UAAW2E,EAAW7K,QAASmG,WAAY,EAAE,GAAI,IAAKvF,IAAKiK,EAAWzV,SAASsD,EAAGqI,EAAGrR,KAAKwQ,eAAgB/P,KAAM,QAtBxH0a,EAAWlD,WA/GjC,GAA4CxC,IAAMC,WA2IrC0F,GAAb,kDACI,WAAYrJ,GAAQ,IAAD,8BACf,gBAEKkF,MAAQC,GAAKmE,kBAElB,EAAKjE,MAAQrF,EAAMqF,MAEnB,EAAKkE,yBAA2B,EAAKA,yBAAyB5G,KAA9B,gBAChC,EAAK6G,uBAAyB,EAAKA,uBAAuB7G,KAA5B,gBARf,EADvB,qEAW6BnC,EAAO9R,GAC5B,IAAIgF,EAASzF,KAAKiX,MAAMuE,mBAExB,OAAQ/a,GACJ,IAAK,IACDgF,EAAO2K,EAAImC,EACX,MACJ,IAAK,IACD9M,EAAO/E,EAAI6R,EACX,MACJ,IAAK,IACD9M,EAAO4K,EAAIkC,EACX,MACJ,IAAK,IACD9M,EAAOzC,EAAIuP,EAGnBvS,KAAKoX,MAAM6D,YAAY,EAAGxV,GAC1ByR,GAAKmE,kBAAkBG,mBAAqB/V,IA7BpD,6CA+B2B8M,EAAO9R,GAC1B,IAAIgF,EAASzF,KAAKiX,MAAMwE,iBAExB,OAAQhb,GACJ,IAAK,IACDgF,EAAO2K,EAAImC,EACX,MACJ,IAAK,IACD9M,EAAO/E,EAAI6R,EACX,MACJ,IAAK,IACD9M,EAAO4K,EAAIkC,EAGnBvS,KAAKoX,MAAMsE,SAASjW,GACpByR,GAAKmE,kBAAkBI,iBAAmBhW,IA9ClD,+BAiDQ,IAAM+V,EAAqBxb,KAAKiX,MAAMuE,mBAChCC,EAAmBzb,KAAKiX,MAAMwE,iBACpC,OACI,gCACI,cAACpD,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,+BACT,mBAAGpE,MAAO,CAAEoC,WAAY+B,IAAxB,mBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKsK,EAAmBpL,EAAGiB,EAAGrR,KAAKsb,yBAA0B7a,KAAM,MACxH,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKsK,EAAmB9a,EAAG2Q,EAAGrR,KAAKsb,yBAA0B7a,KAAM,MACxH,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKsK,EAAmBnL,EAAGgB,EAAGrR,KAAKsb,yBAA0B7a,KAAM,MACxH,mBAAGgS,MAAO,CAAEoC,WAAY+B,IAAxB,yBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKsK,EAAmBxY,EAAGqO,EAAGrR,KAAKsb,yBAA0B7a,KAAM,MACxH,cAAC4X,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,kCACT,mBAAGpE,MAAO,CAAEoC,WAAY+B,IAAxB,mBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKuK,EAAiBrL,EAAGiB,EAAGrR,KAAKub,uBAAwB9a,KAAM,MACpH,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKuK,EAAiB/a,EAAG2Q,EAAGrR,KAAKub,uBAAwB9a,KAAM,MACpH,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKuK,EAAiBpL,EAAGgB,EAAGrR,KAAKub,uBAAwB9a,KAAM,aAhEpI,GAAyCgV,IAAMC,WAsElCiG,GAAb,kDACI,WAAY5J,GAAQ,IAAD,8BACf,gBACKkF,MAAQC,GAAK0E,oBAElB,EAAKxE,MAAQrF,EAAMqF,MACnB,EAAKyE,2BAA6B,EAAKA,2BAA2BnH,KAAhC,gBAClC,EAAK2C,YAAc,EAAKA,YAAY3C,KAAjB,gBACnB,EAAK7D,WAAa,EAAKA,WAAW6D,KAAhB,gBAClB,EAAK9D,WAAa,EAAKA,WAAW8D,KAAhB,gBAClB,EAAKoH,iBAAmB,EAAKA,iBAAiBpH,KAAtB,gBACxB,EAAKqH,eAAiB,EAAKA,eAAerH,KAApB,gBAVP,EADvB,6DAcqBnC,EAAO9R,GACpB,IAAIgQ,EAAMzQ,KAAKiX,MAAM+E,WAErB,OAAQvb,GACJ,IAAK,IACDgQ,EAAIL,EAAImC,EACR,MACJ,IAAK,IACD9B,EAAI/P,EAAI6R,EACR,MACJ,IAAK,IACD9B,EAAIJ,EAAIkC,EAGhBvS,KAAKoX,MAAM0E,iBAAiBrL,GAC5ByG,GAAK0E,oBAAoBI,WAAavL,IA7B9C,qCA+BmB8B,GACXvS,KAAKoX,MAAM2E,eAAexJ,GAC1B2E,GAAK0E,oBAAoB3Q,KAAOsH,IAjCxC,mDAoCQ,IAAI9L,GAAUyQ,GAAK0E,oBAAoBK,qBACvCjc,KAAK4X,SAAS,CACVqE,qBAAsBxV,IAE1ByQ,GAAK0E,oBAAoBK,qBAAuBxV,EAChDzG,KAAKoX,MAAM8E,oBAAoBlc,KAAKiX,MAAMkF,YAAa1V,KAzC/D,kCA2CgB8L,GACRvS,KAAK4X,SAAS,CACVuE,YAAa5J,IAEjB2E,GAAK0E,oBAAoBO,YAAc5J,EACvCvS,KAAKoX,MAAM8E,oBAAoB3J,EAAOvS,KAAKiX,MAAMgF,wBAhDzD,mCAmDQjc,KAAK4X,SAAS,CACVwE,UAAWpc,KAAKiX,MAAMmF,WAE1Bpc,KAAKoX,MAAMvG,aACXqG,GAAK0E,oBAAoBQ,UAAYlF,GAAK0E,oBAAoBQ,WAvDtE,mCA0DQpc,KAAK4X,SAAS,CACVyE,UAAWrc,KAAKiX,MAAMoF,WAE1Brc,KAAKoX,MAAMxG,aACXsG,GAAK0E,oBAAoBS,UAAYnF,GAAK0E,oBAAoBS,WA9DtE,+BAkEQ,IAAM/L,EAAUtQ,KAAKiX,MAAMgF,qBACrBE,EAAcnc,KAAKiX,MAAMkF,YACzBC,EAAWpc,KAAKiX,MAAMmF,SACtBC,EAAWrc,KAAKiX,MAAMoF,SACtB5W,EAASzF,KAAKiX,MAAM+E,WACpB/Q,EAAOjL,KAAKiX,MAAMhM,KACxB,OACI,gCACI,cAACoN,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,gCAET,eAACsC,GAAA,EAAD,CAAMC,OAAK,EAAX,UAEI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,cAACC,GAAA,EAAD,CAAUC,QAASnI,EAASyC,QAAS/S,KAAK6b,2BAA1C,uBACA,6BAIR,eAACxG,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,cAACtG,EAAA,EAAD,CAAWC,UAAU,YAArB,SACI,eAACG,EAAA,EAAD,CAAYrM,KAAK,YAAYuM,MAAO4J,EAAalH,SAAUjV,KAAKqX,YAAhE,UACI,uCACA,cAAC/E,EAAA,EAAD,CAAOkE,UAAWlG,EAASiC,MAAM,MAAjC,kBACA,cAACD,EAAA,EAAD,CAAOkE,UAAWlG,EAASiC,MAAM,SAAjC,qBAEA,cAACD,EAAA,EAAD,CAAOkE,UAAU,EAAMjE,MAAM,WAA7B,4BAIR,gCAIZ,mBAAGE,MAAO,CAAEoC,WAAY+B,IAAxB,oCAEA,cAACyB,EAAA,EAAD,UAAS,wBAAQ5F,MAAOoE,GAAf,sBACT,cAACsC,GAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAAC/D,EAAA,EAAD,CAAKiD,UAAU,YAAf,UACI,cAAC/C,GAAA,EAAD,CAAKgD,GAAI,IACT,eAAChD,GAAA,EAAD,CAAKgD,GAAI,GAAT,UACI,cAACC,GAAA,EAAD,CAAUC,QAAS2D,EAAUrJ,QAAS/S,KAAK6Q,WAA3C,wBACA,cAAC2H,GAAA,EAAD,CAAUC,QAAS4D,EAAUtJ,QAAS/S,KAAK4Q,WAA3C,gCAKZ,uBACA,mBAAG6B,MAAO,CAAEoC,WAAY+B,IAAxB,mBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKzL,EAAO2K,EAAGiB,EAAGrR,KAAK8b,iBAAkBrb,KAAM,MACpG,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKzL,EAAO/E,EAAG2Q,EAAGrR,KAAK8b,iBAAkBrb,KAAM,MACpG,cAAC,GAAD,CAAc+V,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKzL,EAAO4K,EAAGgB,EAAGrR,KAAK8b,iBAAkBrb,KAAM,MACpG,mBAAGgS,MAAO,CAAEoC,WAAY+B,IAAxB,oBACA,cAAC,GAAD,CAAcJ,UAAU,EAAOC,WAAY,CAAC,EAAG,KAAMvF,IAAKjG,EAAMoG,EAAGrR,KAAK+b,iBAExE,8BA5HhB,GAA2CtG,IAAMC,WC1nB3C4G,GAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQtH,EAAe,EAAfA,SACzB,OACI,cAAC9B,EAAA,EAAD,CAAQL,WAAW,SAASwF,UAAU,aAAtC,SACI,cAACnF,EAAA,EAAOC,KAAR,UACI,cAACC,EAAA,EAAD,CAAKC,WAAS,EAAd,SACI,cAACkJ,EAAA,EAAD,CACIC,QAAM,EACNhK,MAAO,CAAEiK,UAAW,SAAUhC,OAAQ,IACtC3H,QAASkC,EACTnC,WAAW,UACXY,KAAM,cAACC,EAAA,EAAD,CAAMD,KAAM6I,EAAS,aAAe,yBAO5DI,GAAe,CAAEjC,OAAQ,KAE3BkC,GAAgBpP,OAAO4B,YAAc,GAEnCyN,GAAY,SAAC,GAAoC,IAAlCrJ,EAAiC,EAAjCA,OAAQQ,EAAyB,EAAzBA,SAAajC,EAAY,qCAClD,OACI,8BACA,eAACsB,EAAA,EAAD,2BAAStB,GAAT,IAAgB0I,UAAWjH,EAAQQ,SAAUA,EAAUvB,MAAO,CAAGqK,gBAAiB,UAAW3N,OAAQyN,IAArG,UACI,cAACvJ,EAAA,EAAIlB,KAAL,CAAUyB,MAAM,SAASmJ,SAAO,EAAC3H,SAAS,SAAS1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,aAGnG,cAACL,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,OAAO1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,UAG1E,cAACL,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,gBAAgB1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,YAGnF,cAACL,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,iBAAiB1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,eAGpF,cAACL,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,UAAU1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,UAG7E,cAACL,EAAA,EAAIlB,KAAL,CAAUiD,SAAS,YAAY1B,KAAM,cAACC,EAAA,EAAD,CAAMlB,MAAOkK,GAAc1R,KAAK,KAAKyI,KAAK,kBAQrFsJ,GAAc,SAAC,GAAyC,IAAvCxJ,EAAsC,EAAtCA,OAAQ+I,EAA8B,EAA9BA,OAAQtH,EAAsB,EAAtBA,SAAUmC,EAAY,EAAZA,MAEzC6F,EAAc,GAsBlB,GApBKV,EAGDU,EAAY7b,KACR,qBAAMqR,MAAO,CAACqK,gBAAiB,WAA/B,SACA,cAACzJ,EAAA,EAAD,UACI,eAACF,EAAA,EAAD,CAAQL,WAAW,SAAnB,UACI,cAACO,EAAA,EAAD,CAAKY,UAAQ,EAAb,SACI,oBAAIxB,MAAO,CAAE6C,UAAW,GAAIT,WAAY,IAAxC,SAA+CrB,MAEnD,cAACH,EAAA,EAAD,CAAKC,WAAS,EAAd,SACI,cAAC,GAAD,CAAWiJ,OAAQA,EAAQtH,SAAUA,cAVrDgI,EAAY7b,KAAK,cAAC,GAAD,CAAWmb,OAAQA,EAAQtH,SAAUA,KAmBtDsH,EACA,OAAQ/I,GACJ,IAAK,SACDyJ,EAAY7b,KAAK,cAAC,GAAD,CAAegW,MAAOA,KACvC,MACJ,IAAK,OACD6F,EAAY7b,KAAK,cAAC,GAAD,CAAagW,MAAOA,KACrC,MACJ,IAAK,gBACD6F,EAAY7b,KAAK,cAAC,GAAD,CAAqBgW,MAAOA,KAC7C,MACJ,IAAK,iBACD6F,EAAY7b,KAAK,cAAC,GAAD,CAAwBgW,MAAOA,KAChD,MACJ,IAAK,UACD6F,EAAY7b,KAAK,cAAC,GAAD,CAAgBgW,MAAOA,KACxC,MACJ,IAAK,YACD6F,EAAY7b,KAAK,cAAC,GAAD,CAAuBgW,MAAOA,KAK3D,OAAO6F,GA6DIC,G,kDAxDX,WAAYnL,GAAQ,IAAD,8BACf,cAAMA,IACDkF,MAAQ,CACTsF,OAAQxK,EAAMlF,gBACd2G,OAAQ,UAEZ,EAAK4D,MAAQrF,EAAMqF,MACnB,EAAK+F,aAAe,EAAKA,aAAazI,KAAlB,gBACpB,EAAKoG,aAAe,EAAKA,aAAapG,KAAlB,gBARL,E,2DAWf1U,KAAK4X,SAAS,CACV2E,QAASvc,KAAKiX,MAAMsF,SAExBvc,KAAKoX,MAAMgG,kB,mCAGF3C,GACTza,KAAK4X,SAAS,CACVpE,OAAQiH,IAGPza,KAAKiX,MAAMsF,QACZvc,KAAKmd,iB,+BAIH,IACEZ,EAAWvc,KAAKiX,MAAhBsF,OACA/I,EAAWxT,KAAKiX,MAAhBzD,OACR,OACI,8BACI,cAAC6J,EAAA,EAAD,CACI5K,MAAO,CAAE6K,QAAS,OAAQC,cAAe,UACzClO,MAAOkN,EAAS,IAAM,GACtBiB,aAAW,EACX1K,WAAW,UAJf,SAMI,eAAC2K,EAAA,EAAD,WACI,cAACJ,EAAA,EAAD,CAAShO,MAAO,GAAhB,SACI,cAAC,GAAD,CAAWqO,UAAQ,EAAC5K,WAAW,SAASU,OAAQA,EAAQQ,SAAUhU,KAAK8a,iBAE3E,cAAC6C,EAAA,EAAD,UACI,cAAC,GAAD,CAAanK,OAAQA,EAAQ+I,OAAQA,EAAQtH,SAAUjV,KAAKmd,aAAc/F,MAAOpX,KAAKoX,qB,GA5C3F1B,aC0DRwB,GAhKf,WAcI,WAAYvQ,EAAGiX,GAAK,yBAmCpBC,oBAAsB,CAClB1X,kBAAmB,EACnBmU,QAAU,EAAC,GAAO,GAAO,GACzBtY,EAAI,EAAE,GAAI,IACVwB,EAAI,EAAE,GAAI,IACVwF,EAAI,EAAE,GAAI,KAxCK,KA2CnB8U,kBAAoB,CAChBtK,OAAQ,EACRyE,MAAO,EACPzM,KAAM,CAAC,SACPqM,eAAgB,IA/CD,KAkDnBkG,0BAA4B,CACxBnK,MAAO,GACPlM,MAAO,YACPxF,WAAY,CACRoC,MAAO,CAAC,IAAK,IAAK,KAClBC,KAAM,CAAC,GAAK,GAAK,KAErBkB,OAAQ,CACJ2K,EAAG,IACH1P,EAAG,IACH2P,EAAG,KAEP2N,OAAQ,OACRzW,UAAW,GACX0W,aAAc,GACdC,aAAc,GACdpG,oBAAoB,EACpBE,oBAAoB,GAnEL,KAsEnBmG,wBAA0B,CACtBnF,UAAU,EACVvY,KAAM,cACNkN,OAAQ,CACJ3L,EAAG,EACHwB,EAAG,EACHwF,EAAG,GAEP5I,IAAK,GA9EU,KAiFnBge,uBAAyB,CACrBnG,MAAO,EACPzE,OAAQ,QACRlD,SAAS,EACT7K,OAAQ,CACJ2K,EAAG,IACH1P,EAAG,IACH2P,EAAG,IACHrN,EAAG,IAEP0C,SAAU,CACN1D,EAAG,EACHwB,EAAG,EACHwF,EAAG,IA9FQ,KAkGnBqV,6BAA+B,CAC3BpG,MAAO,EACPzE,OAAQ,cACRlD,SAAS,EACT7K,OAAQ,CACJ2K,EAAG,IACH1P,EAAG,IACH2P,EAAG,IACHrN,EAAG,IAEP0C,SAAU,CACN1D,GAAI,EACJwB,EAAG,EACHwF,GAAI,IA/GO,KAoHnBsV,2BAA6B,CACzBrC,sBAAsB,EACtBE,YAAa,MACbC,UAAU,EACVC,UAAU,EACVL,WAAY,CACR5L,EAAG,GACH1P,EAAG,GACH2P,EAAG,IAEPpF,KAAM,IA9HS,KAkInBsT,yBAA2B,CACvB/C,mBAAoB,CAChBpL,EAAG,GACH1P,EAAG,IACH2P,EAAG,IACHrN,EAAG,IAEPyY,iBAAkB,CACdrL,EAAG,EACH1P,EAAG,EACH2P,EAAG,IA3IPrQ,KAAKoX,MAAQzQ,EACb3G,KAAKwe,OAAS,cAAC,EAAD,CAAK/K,IAAK,GAAIM,UAAW6J,IACvC5d,KAAKye,QAAU,cAACC,GAAD,CAAMtH,MAAOpX,KAAKoX,QACjCpX,KAAK2e,mBAlBb,2DAsBQ,IAAIC,EAAS,GAQb,OAPAA,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAK0E,sBAChCgD,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAK6C,eAChC6E,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAK2D,kBAChC+D,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAK8D,wBAChC4D,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAKmE,oBAChCuD,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAKyB,mBAChCiG,EAAOxd,KAAKkN,KAAKC,UAAU2I,EAAKC,aACzByH,IA9Bf,yCA0CQ,IAAK,IAAI5b,KARTkU,EAAK0E,oBAAsB5b,KAAKse,2BAChCpH,EAAKmE,kBAAoBrb,KAAKue,yBAC9BrH,EAAK2D,gBAAkB7a,KAAKoe,uBAC5BlH,EAAK8D,sBAAwBhb,KAAKqe,6BAClCnH,EAAKyB,iBAAmB3Y,KAAKme,wBAC7BjH,EAAKC,WAAanX,KAAK8d,kBACvB5G,EAAK6C,aAAe/Z,KAAK6d,oBAEX3G,EAAKC,WAAW3L,KAAM,CAChC,IAAIlG,EAAIgJ,KAAKuQ,MAAMvQ,KAAKC,UAAUvO,KAAK+d,4BACvCzY,EAAEsO,MAAQsD,EAAKC,WAAW3L,KAAKxI,GAC/BkU,EAAKC,WAAWU,eAAezW,KAAKkE,QA7ChD,KCJe,OAA0B,oCC0G1BwZ,GAhGX,aAAe,IAAD,gCAQdC,KAAO,WACH,IAAIC,EAAO,EAAK5H,MAAM6H,aACtBD,EAAK5d,KAAK,EAAK8d,KAAKC,gBACpB9W,QAAQC,IAAI0W,IAXF,KAcdI,KAAO,WACH/W,QAAQC,IAAI,SAfF,KAkBd+W,OAAS,WACLhX,QAAQC,IAAI,WAnBF,KAsBd8N,MAAQ,WACJ,EAAKkJ,eACL,EAAKC,aACL,EAAK7Q,UAzBK,KA4Bd8Q,UAAY,WACR,OAAO,EAAKN,KAAKV,QA7BP,KAgCdiB,YAAc,WACV,OAAO,EAAKP,KAAKT,SAjCP,KAoCdiB,cAAgB,WACZ,OAAO,EAAKtI,MAAMhK,SAASwC,YArCjB,KAwCdlB,OAAS,WAEL,EAAK0I,MAAM3I,SAGXkR,sBAAsB,EAAKjR,SA7CjB,KAgDd6Q,WAAa,WACTK,MAAMC,IACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAK7I,MAAMgI,KAAKa,OApDd,KAwDdX,aAAe,WAEXY,SAASC,KAAK1N,MAAM2N,SAAW,SAE/B5S,OAAO6S,iBAAiB,UAAU,WAC9B,EAAKjJ,MAAMxJ,mBACX,EAAKwJ,MAAMkJ,kBAGfJ,SAASG,iBAAiB,oBAAoB,WAC1C,EAAKjJ,MAAMxJ,mBACX,EAAKwJ,MAAMkJ,kBAIfJ,SAASC,KAAKI,UAAY,SAAC/a,GACbA,EAAEgb,UAvEhBxgB,KAAK4d,GAAK,CAAC5d,KAAK+e,KAAM/e,KAAKof,KAAMpf,KAAKqf,QACtCrf,KAAKoX,MAAQ,IAAIxR,EACjB5F,KAAKkf,KAAO,IAAIhI,GAAKlX,KAAKoX,MAAOpX,KAAK4d,KCgC/B6C,G,kDArCb,WAAY1O,GAAQ,IAAD,8BACjB,cAAMA,IACD2O,WAAa,IAAI5B,GAEtB,EAAK7H,MAAQ,CACXuH,OAAQ,EAAKkC,WAAWlB,YACxBf,QAAS,EAAKiC,WAAWjB,eANV,E,gEAWjBzf,KAAK2gB,MAAMC,YAAY5gB,KAAK0gB,WAAWhB,iBACvC1f,KAAK0gB,WAAWtK,U,+BAGR,IAAD,OACDoI,EAASxe,KAAKiX,MAAMuH,OACpBC,EAAUze,KAAKiX,MAAMwH,QAE3B,OACE,8BACE,eAAChB,EAAA,EAAD,WACGe,EACD,eAACf,EAAA,EAAD,WACGgB,EACD,cAACd,EAAA,EAAD,UACE,qBAAKkD,IAAK,SAAAA,GAAG,OAAK,EAAKF,MAAQE,mB,GA7B3BnL,aCDlBoL,IAASpS,OACP,cAAC,IAAMqS,WAAP,UACE,cAAC,GAAD,MAEFb,SAASc,eAAe,W","file":"static/js/main.44af8f3e.chunk.js","sourcesContent":["import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode,\n    SphereBufferGeometry,\n    ConeBufferGeometry,\n    CylinderBufferGeometry,\n    TorusBufferGeometry\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    LOD;\n    complexity;\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n    presetGeometry;\n\n    isPreset;\n\n    constructor() {\n        this.args = arguments[0];\n        this.isPreset = false;\n        this.LOD = 1;\n        this.complexity = [6,12,18,24,32];\n    }\n\n    clear(){\n        this.presetGeometry = [];\n        this.stripGeometries = [];\n        this.fanGeometries = [];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Preset extends Shape {\n\n    constructor(type, parameters) {\n        super();\n        this.isPreset = true;\n        this.type = type;\n        this.parameters = parameters;\n    }\n\n    generate(){\n        this.clear();\n\n        switch (this.type) {\n            case 'Sphere':\n                this.presetGeometry = new SphereBufferGeometry(this.parameters, this.complexity[this.LOD], this.complexity[this.LOD]);\n                break;\n            case 'Cone':\n                this.presetGeometry = new ConeBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n            case 'Cylinder':\n                this.presetGeometry = new CylinderBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n            case 'Torus':\n                this.presetGeometry = new TorusBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n        }\n    }\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (- this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","\n\nexport var Parameters = {\n    Ellipsoid: {\n        names: ['X', 'Y', 'Z'],\n        vals: [0.5, 0.2, 0.2],\n        lod: [6,10,14,20,30]\n    },\n    Spherocylinder:{\n        names: ['Radius', 'Length'],\n        vals: [0.5, 0.75],\n        lod: [8,12,16,22,30]\n    },\n    Spheroplatelet:{\n        names: ['RadSphere','RadCircle'],\n        vals:[1.0,0.2],\n        lod: [6,12,18,24,32]\n    },\n    CutSphere: {\n        names: ['Radius','zCut'],\n        vals: [0.8, 0.2],\n        lod: [6,12,14,20,30]\n    },\n    Sphere: {\n        names: ['Radius'],\n        vals: [0.6],\n        lod: [6,12,4,5,6]\n    },\n    Cone: {\n        names: ['Radius','Height'],\n        vals: [0.8, 1.2],\n        lod: [6,12,4,5,6]\n    },\n    Cylinder: {\n        names: ['RadiusTop', 'RadiusBottom', 'Height'],\n        vals: [0.5,0.5,2.0],\n        lod: [6,12,4,5,6]\n    },\n    Torus:{\n        names:['Radius','Tube','Arc'],\n        vals:[1.0,0.3,6.3],\n        lod: [6,12,4,5,6]\n    }\n}\n\nexport default Parameters;","import {\n    Mesh,\n    MeshPhongMaterial,\n    Vector3,\n    Quaternion,\n    Euler,\n    Color,\n    DoubleSide\n} from 'three';\nimport * as SHAPE from './Shapes.js';\nimport Model from './Model';\nimport Parameters from './Parameters';\n\nexport class Set {\n    name;\n    type;\n    parameters;\n    shape;\n    orientationType;\n    wireframe;\n    shininess;\n    userColour;\n    colourByDirector;\n    lod;\n    clippingPlanes;\n    clipIntersection;\n\n    elements = []\n    meshes = [];\n\n    constructor(n, ot, d, cp, ci) {\n        this.name = n;\n        this.orientationType = ot;\n        this.clippingPlanes = cp;\n        this.clipIntersection = ci;\n        this.setDefaults();\n        this.genElements(d);\n        this.setElements();\n        this.genMeshes();\n    }\n\n    updateSlicers(i, vals){\n        this.clippingPlanes[2*i+1].constant = vals[1];\n        this.clippingPlanes[2*i].constant = -vals[0];\n    }\n\n    toggleClipIntersection(toggle){\n        this.clipIntersection = toggle;\n        for(let mesh of this.meshes){\n            mesh.material.clipIntersection = toggle;\n        }\n    }\n\n    genMeshes() {\n        let m;\n        let c;\n        let mat;\n\n        for (let elem of this.elements) {\n            if (this.colourByDirector) {\n                c = new Color(elem.getColour());\n            } else {\n                c = this.userColour;\n            }\n\n            mat = new MeshPhongMaterial({ \n                color: c,\n                side: DoubleSide,\n                clippingPlanes: this.clippingPlanes,\n                clipIntersection: this.clipIntersection\n             });\n            mat.wireframe = this.wireframe;\n            mat.shininess = this.shininess;\n\n            for (let g of elem.geometries) {\n                m = new Mesh(g, mat);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    setUserColour(hex){\n        this.userColour = new Color(hex);\n    }\n\n    setElements() {\n        let geoms = [];\n\n        for (let elem of this.elements) {\n            if (this.shape.isPreset) {\n                geoms.push(this.shape.presetGeometry.clone());\n            }\n            else {\n                geoms.push(this.shape.stripGeometry.clone());\n                geoms.push(this.shape.fanGeometries[0].clone());\n                geoms.push(this.shape.fanGeometries[1].clone());\n            }\n\n            this.translate(elem.position, geoms);\n            this.rotate(elem.euler, geoms);\n            elem.setGeometries(geoms);\n\n            geoms = [];\n        }\n    }\n\n    genElements(elements) {\n        let position, orientation, attributes, euler, nP;\n        let temp = [], colour = [];\n\n        for (let elem of elements) {\n            attributes = elem.split(\" \");\n\n            for (let a of attributes) {\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7) { break; }\n\n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n            colour = this.colourFromOrientation(euler);\n\n            nP = new this.Element(colour, position, euler);\n            this.elements.push(nP);\n        }\n    }\n\n    setDefaults() {\n        this.userColour = new Color(\"#FFFFFF\");\n        this.colourByDirector = true;\n        this.wireframe = true;\n        this.shininess = 30;\n        this.lod = 4;\n        this.type = 'Ellipsoid';\n        this.parameters = Parameters.Ellipsoid.vals;\n        this.genGeometries();\n    }\n\n    genGeometries() {\n        switch (this.type) {\n            case 'Ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(...this.parameters);\n                break;\n            case 'Spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(...this.parameters);\n                break;\n            case 'Spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(...this.parameters);\n                break;\n            case 'Cut Sphere':\n                this.shape = new SHAPE.CutSphere(...this.parameters);\n                break;\n            case 'Sphere':\n                this.shape = new SHAPE.Preset('Sphere', this.parameters);\n                break;\n            case 'Cone':\n                this.shape = new SHAPE.Preset('Cone', this.parameters);\n                break;\n            case 'Cylinder':\n                this.shape = new SHAPE.Preset('Cylinder', this.parameters);\n                break;\n            case 'Torus':\n                this.shape = new SHAPE.Preset('Torus', this.parameters);\n                break;\n        }\n\n        this.shape.LOD = this.lod;\n        this.shape.generate();\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    colourFromOrientation(euler) {\n        let colour = [];\n\n        colour.push(Math.round((euler._x + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._y + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._z + Math.PI) / (2 * Math.PI) * (255)));\n        return colour;\n    }\n\n    getRotations(type, rot) {\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type) {\n            case 'v':\n                let defaultVector = new Vector3(0, 0, 1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n\n    }\n\n    Element = class Element {\n        geometries;\n        colour;\n        position;\n        euler;\n\n        constructor(c, p, e) {\n            this.colour = c;\n            this.position = p;\n            this.euler = e;\n        }\n\n        getColour() {\n            return Model.rgbToHex(this.colour[0], this.colour[1], this.colour[2]);\n        }\n\n        setGeometries(geoms) {\n            this.geometries = geoms;\n        }\n\n    }\n}\n\nexport default Set;","import {\n    AmbientLight,\n    DirectionalLight,\n    PointLight\n} from 'three';\n\nexport class Light {\n    light;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n    constructor(lightType) {\n        this.setDefaultLights(lightType);\n    }\n\n    updatePosition(x, y, z){\n        this.light.position.set(x, y, z);\n    }\n\n    updateColour(c, i){\n        this.light.color.setHex(parseInt(c.substring(1), 16));\n        this.light.intensity = i * 0.01;\n    }\n\n    setDefaultLights(lightType) {\n        switch (lightType) {\n            case 'ambient':\n                this.light = new AmbientLight(\"#0ff0ff\", 0.4);\n                break;\n            case 'directional':\n                this.light = new DirectionalLight(\"#ffffff\", 0.5);\n                this.light.position.set(-5, 0, -5);\n                break;\n            case 'point':\n                this.light = new PointLight(\"#ffffff\", 0.6);\n                this.light.position.set(5, 0, 5);\n                break;\n        }\n    }\n}\n\nexport default Light;","import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3,\n    BufferGeometry,\n    Line,\n    WireframeGeometry,\n    LineSegments,\n    Box3Helper,\n    Box3,\n    SphereBufferGeometry,\n    MeshBasicMaterial,\n    Mesh\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Tools {\n    subGrid;\n    axes = [];\n    boundingShape;\n    boundingShapeType;\n    setsGeometry;\n    size;\n    colour;\n    material;\n\n    constructor(s, c) {\n        this.size = s;\n        this.colour = c;\n\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n\n        this.genAxes();\n        this.genSubgrid();\n\n        this.boundingShapeType = 'box';\n        this.setsGeometry = null;\n    }\n\n    genBoundingShape(type, sets) {\n        this.boundingShape = null;\n\n        if (this.setsGeometry == null) {\n            let geometries = [];\n            for (let set of sets) {\n                for (let elem of set.elements) {\n                    geometries.push(BufferGeometryUtils.mergeBufferGeometries(elem.geometries));\n                }\n            }\n            this.setsGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n        }\n\n\n\n        switch (type) {\n            case 'box':\n                let box = new Box3();\n                this.setsGeometry.computeBoundingBox()\n                box.copy(this.setsGeometry.boundingBox);\n                this.boundingShape = new Box3Helper(box, 0xffff00);\n                break;\n            case 'sphere':\n                \n                this.setsGeometry.computeBoundingSphere();\n                let sphere = this.setsGeometry.boundingSphere;\n                console.log(sphere);\n                let geom = new SphereBufferGeometry(sphere.radius, 10, 10);\n                geom.translate(sphere.center.x, sphere.center.y, sphere.center.z);\n                let material = new MeshBasicMaterial({ color: 0xffff00 });\n                material.wireframe = true;\n                this.boundingShape = new Mesh(geom, material);\n                break;\n            case 'cylinder':\n            // this.boundingShape.copy(this.setsGeometry.computeBoundingBox());\n            // break;\n        }\n\n\n\n        return this.boundingShape;\n\n    }\n\n\n    updateColour(colour) {\n        this.colour = colour;\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    updateSize(size) {\n        this.size = size;\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    genSubgrid() {\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes() {\n        this.axes = [];\n        let axesSize = this.size / 2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), this.material));\n    }\n\n}\n\nexport default Tools;","import {\n    Scene,\n    WebGLRenderer,\n    PerspectiveCamera,\n    OrthographicCamera,\n    Vector3,\n    BufferGeometry,\n    PlaneHelper,\n    Plane\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Set from './Set.js'\nimport Light from './Light.js'\nimport Tools from './Tools.js'\nimport Parameters from './Parameters.js'\n\nexport class Model {\n    sets = [];\n\n    scene;\n    camera;\n    lighting;\n    bgColour;\n    controls;\n    lookAt;\n    tools;\n    renderer;\n\n    height;\n    width;\n\n    gridEnabled = false;\n    axesEnabled = false;\n    sidebarExpanded = false;\n\n    cameraType = 'perspective';\n\n    selectedSet;\n\n    planeConstants;\n    clippingPlanes;\n    clippingHelpers;\n    clipIntersections;\n\n    constructor() {\n        this.scene = new Scene();\n        this.setDefault();\n    }\n\n    setDefault() {\n        this.selectedSet = 0;\n\n        this.initClippers();\n\n        this.renderer = new WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.localClippingEnabled = true;\n\n        this.lookAt = new Vector3(0, 0, 0);\n\n        this.updateDimensions();\n        this.setCamera(this.cameraType);\n\n        this.lighting = [\n            new Light('ambient'),\n            new Light('directional'),\n            new Light('point')];\n\n        this.tools = new Tools(50, 0xffffff);\n\n        this.bgColour = \"#000000\";\n        this.renderer.setClearColor(this.bgColour);\n\n\n        for (let l of this.lighting) {\n            this.scene.add(l.light);\n        }\n        this.scene.add(this.camera);\n    }\n\n    setsToJSON(){\n        let setsJSON = [];\n        for (let s of this.sets){\n            setsJSON.push(JSON.stringify(s));\n        }\n        return setsJSON;\n    }\n\n    update() {\n        this.controls.update();\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    initClippers() {\n        this.clippingIntersections = false;\n\n        this.clippingPlanes = [\n            new Plane(new Vector3(1, 0, 0), 50),\n            new Plane(new Vector3(-1, 0, 0), 50),\n            new Plane(new Vector3(0, 1, 0), 50),\n            new Plane(new Vector3(0, -1, 0), 50),\n            new Plane(new Vector3(0, 0, 1), 50),\n            new Plane(new Vector3(0, 0, -1), 50)\n        ];\n\n        this.clippingHelpers = [\n            new PlaneHelper(this.clippingPlanes[0], 100, 0xff0000),\n            new PlaneHelper(this.clippingPlanes[1], 100, 0xff0000),\n            new PlaneHelper(this.clippingPlanes[2], 100, 0x00ff00),\n            new PlaneHelper(this.clippingPlanes[3], 100, 0x00ff00),\n            new PlaneHelper(this.clippingPlanes[4], 100, 0x0000ff),\n            new PlaneHelper(this.clippingPlanes[5], 100, 0x0000ff)\n        ];\n\n        for(let helper of this.clippingHelpers){\n            helper.visible = false;\n            this.scene.add(helper);\n        }\n    }\n\n    toggleClipIntersection(toggle){\n        for(let set of this.sets){\n            set.toggleClipIntersection(toggle);\n        }\n    }\n\n    toggleHelper(i, toggle){\n        this.clippingHelpers[2*i].visible = toggle;\n        this.clippingHelpers[2*i+1].visible = toggle;\n    }\n\n    updateSlicer(i, vals){\n        for(let set of this.sets){\n            set.updateSlicers(i, vals);\n        }\n    }\n\n    updateDimensions() {\n        this.height = (window.innerHeight - 56);\n\n        if (this.sidebarExpanded) {\n            this.width = window.innerWidth - 356;\n        } else {\n            this.width = window.innerWidth - 56;\n        }\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    setCamera(type) {\n        if (type == 'perspective') {\n            this.camera = new PerspectiveCamera(50, this.width / this.height, 0.1, 1000);\n        } else {\n            this.camera = new OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 0.01, 10000);\n            this.camera.zoom = 10;\n            console.log(this.camera.zoom);\n        }\n\n        this.camera.position.z = -30;\n\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.target = this.lookAt;\n    }\n\n    updateCamera() {\n        if (this.cameraType == 'perspective') {\n            this.camera.aspect = this.width / this.height;\n        } else {\n            this.camera.left = this.width / - 2;\n            this.camera.right = this.width / 2;\n            this.camera.top = this.height / 2;\n            this.camera.bottom = this.height / 2;\n        }\n        this.camera.updateProjectionMatrix();\n    }\n\n    updateLookAt(l) {\n        this.lookAt = new Vector3(l.x, l.y, l.z);\n        this.controls.target = this.lookAt;\n        this.controls.update();\n\n    }\n\n    toggleSidebar() {\n        this.sidebarExpanded = !this.sidebarExpanded;\n        this.updateDimensions();\n    }\n\n    updateBg(colour) {\n        this.bgColour = Model.rgbToHex(colour.r, colour.g, colour.b);\n        this.renderer.setClearColor(this.bgColour);\n    }\n\n    toggleLight(type, enabled) {\n        this.lighting[type].visible = enabled;\n    }\n\n    updateLight(type, colour) {\n        this.lighting[type].updateColour(Model.rgbToHex(colour.r, colour.g, colour.b), colour.i);\n    }\n\n    updateLightPosition(type, pos) {\n        this.lighting[type].updatePosition(pos.x, pos.y, pos.z);\n    }\n\n    updateGridColour(rgb) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n        var colour = Model.rgbToHex(rgb.r, rgb.g, rgb.b);\n        this.tools.updateColour(colour);\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n    updateGridSize(size) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n\n        this.tools.updateSize(size);\n\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n\n    toggleGrid() {\n        this.gridEnabled = !this.gridEnabled;\n\n        if (this.gridEnabled) {\n            this.scene.add(this.tools.subGrid);\n        } else {\n            this.scene.remove(this.tools.subGrid);\n        }\n    }\n\n    toggleAxes() {\n        this.axesEnabled = !this.axesEnabled;\n\n        if (this.axesEnabled) {\n            for (let a of this.tools.axes) {\n                this.scene.add(a);\n            }\n        } else {\n            for (let a of this.tools.axes) {\n                this.scene.remove(a);\n            }\n        }\n\n\n    }\n\n    toggleCameraRotation() {\n        this.controls.autoRotate = !this.controls.autoRotate;\n    }\n\n    static rgbToHex(r, g, b) {\n        function componentToHex(c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n        }\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    }\n\n    updateBoundingShape(type, enabled) {\n        this.scene.remove(this.tools.boundingShape);\n\n        if (enabled) {\n            this.scene.add(this.tools.genBoundingShape(type, this.sets));\n        }\n    }\n\n\n    getParameters(val) {\n        let parameters;\n\n        switch (val) {\n            case 'Ellipsoid':\n                parameters = Parameters.Ellipsoid;\n                break;\n            case 'Spherocylinder':\n                parameters = Parameters.Spherocylinder;\n                break;\n            case 'Spheroplatelet':\n                parameters = Parameters.Spheroplatelet;\n                break;\n            case 'Cut Sphere':\n                parameters = Parameters.CutSphere;\n                break;\n            case 'Sphere':\n                parameters = Parameters.Sphere;\n                break;\n            case 'Cone':\n                parameters = Parameters.Cone;\n                break;\n            case 'Cylinder':\n                parameters = Parameters.Cylinder;\n                break;\n            case 'Torus':\n                parameters = Parameters.Torus;\n                break;\n\n        }\n\n        return parameters;\n    }\n\n    updateModel(id, params, f) {\n        for (const m of this.sets[id].meshes) {\n            this.scene.remove(m);\n        }\n        f(...params);\n        for (const m of this.sets[id].meshes) {\n            this.scene.add(m);\n        }\n    }\n\n    updateLOD(val) {\n        for (let i = 0; i < this.sets.length; i++) {\n            this.updateModel(i, [i, val], (i, val) => {\n                this.sets[i].lod = val;\n                this.sets[i].meshes = [];\n                this.sets[i].genGeometries();\n                this.sets[i].setElements();\n                this.sets[i].genMeshes();\n            });\n        }\n    }\n\n    updateUserColour(id, colour) {\n        this.updateModel(id, [id, colour], (id, colour) => {\n            this.sets[id].meshes = [];\n            this.sets[id].setUserColour(Model.rgbToHex(colour.r, colour.g, colour.b));\n            this.sets[id].genMeshes();\n        });\n    }\n\n    updateShape(shape, id, parameters) {\n        this.updateModel(id, [id, shape, parameters], (id, shape, parameters) => {\n            this.sets[id].meshes = [];\n            this.sets[id].type = shape;\n            this.sets[id].parameters = parameters.vals;\n            this.sets[id].genGeometries();\n            this.sets[id].setElements();\n            this.sets[id].genMeshes();\n        });\n    }\n\n    updateShininess(id, val) {\n        this.updateModel(id, [id, val], (id, val) => {\n            this.sets[id].meshes = [];\n            this.sets[id].shininess = val;\n            this.sets[id].genMeshes();\n        });\n    }\n\n    toggleWireframe(id, toggle) {\n        this.updateModel(id, [id, toggle], (id, toggle) => {\n            this.sets[id].meshes = [];\n            this.sets[id].wireframe = toggle;\n            this.sets[id].genMeshes();\n        });\n    }\n\n    toggleUserColour(id, toggle) {\n        this.updateModel(id, [id, toggle], (id, toggle) => {\n            this.sets[id].meshes = [];\n            this.sets[id].colourByDirector = toggle;\n            this.sets[id].genMeshes();\n        });\n    }\n\n    load(data) {\n        let sets = data.split(\"$\");\n        let setData, ps;\n        for (let set of sets) {\n            if (set == \"\") {\n                return;\n            }\n            else {\n                setData = set.split(\"\\n\");\n                ps = new Set(setData[0], setData[1], setData.slice(2), this.clippingPlanes, this.clippingIntersections);\n                this.sets.push(ps);\n            }\n        }\n\n        this.setConfiguration();\n    }\n\n\n    setConfiguration() {\n        for (let set of this.sets) {\n            for (const m of set.meshes) {\n                this.scene.add(m);\n            }\n        }\n    }\n\n}\n\nexport default Model;\n","\nimport { Header, Dropdown, FormGroup, Radio, RadioGroup, FlexboxGrid, Nav, Navbar, Icon, Button, ButtonToolbar } from 'rsuite';\n\nconst ExportDropdown = ({ ...props }) => (\n    <Dropdown {...props}>\n        <FormGroup controlId=\"radioList\">\n            <Dropdown.Item>Export as...</Dropdown.Item>\n            <Dropdown.Item divider />\n            <RadioGroup name=\"radioList\">\n                <Radio value=\"A\">Change </Radio>\n                <Radio value=\"B\">Rectangle</Radio>\n            </RadioGroup>\n            <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n\n            <Dropdown.Item >File Type</Dropdown.Item>\n            <Dropdown.Item divider />\n\n            <RadioGroup name=\"radioList\">\n                <Radio value=\"A\">PNG</Radio>\n                <Radio value=\"B\">JPG</Radio>\n            </RadioGroup>\n            <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n        </FormGroup>\n\n        <FlexboxGrid justify='center'>\n            <Button appearance='primary' onClick={props.f}> Export </Button>\n        </FlexboxGrid>\n\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n\n    </Dropdown>\n);\n\nconst SamplesDropdown = ({ ...props }) => (\n\n    <Dropdown {...props}>\n        <Dropdown.Item >File Type</Dropdown.Item>\n        <Dropdown.Item divider />\n        <Dropdown.Item>Sample 1</Dropdown.Item>\n        <Dropdown.Item>Sample 2</Dropdown.Item>\n        <Dropdown.Item>Sample 3</Dropdown.Item>\n        <Dropdown.Item>Sample 4</Dropdown.Item>\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n        <FlexboxGrid justify='center'>\n            <Button appearance='primary'> Randomize </Button>\n        </FlexboxGrid>\n\n        <Dropdown.Item panel style={{ padding: 5, width: 140 }}></Dropdown.Item>\n    </Dropdown>\n);\n\n\nconst Top = ({ ...props }) => (\n    <Header style={{height : 56}}>\n        <Navbar>\n            <Navbar.Body>\n                <Nav pullRight >\n                    <ButtonToolbar>\n                        <Nav.Item active>fps {props.fps}</Nav.Item>\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"keyboard-o\" />}>Reference</Nav.Item>\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"question\" />}>Manual</Nav.Item>\n                        <SamplesDropdown title=\"Samples\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"folder-o\" />} />\n                        <ExportDropdown title=\"Export\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"export\" />} f={props.functions[2]} />\n                        <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"file-download\" />} onSelect={props.functions[0]}>Save</Nav.Item>\n                        <Nav.Item icon={<Icon icon=\"file-upload\" />} onSelect={props.functions[1]}>Upload</Nav.Item>\n                    </ButtonToolbar>\n                </Nav>\n                <Nav pullLeft>\n                    <h6 style={{ padding: 20 }}> WebMGA</h6>\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    </Header>\n);\n\nexport default Top;","\n\nimport { Dropdown, RangeSlider, InputGroup, Sidebar, Sidenav, Nav, Icon, Navbar, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, ButtonToolbar, Input } from 'rsuite';\nimport React, { Component, useState } from \"react\";\nimport View from './View';\n\nconst TITLE_LEFT_MARGIN = 30;\n\nexport const ParameterSet = (props) => {\n    var set = [];\n\n    for (let i = 0; i < props.titles.length; i++) {\n\n        set.push(\n            <ParameterInput title={props.titles[i]} values={props.values[i]} numerical f={props.f} index={i} />\n        );\n    }\n\n    return set;\n}\n\nexport class ParameterInput extends React.Component {\n\n\n    constructor(props) {\n        super();\n        this.active = props.active;\n        this.f = props.f;\n        this.title = props.title;\n        this.values = props.values;\n        this.numerical = props.numerical;\n        this.index = props.index;\n        this.selectingSet = props.selectingSet;\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    changeValue(value) {\n        this.active = value;\n        this.f(value, this.index);\n    }\n\n    render() {\n        var InputBox;\n\n        if (this.numerical) {\n            const defaultVal = this.values;\n            InputBox =\n                (<div style={{ width: 130, marginLeft: 10 }}>\n                    <InputNumber defaultValue={defaultVal} step={0.1} onChange={this.changeValue} />\n                </div>);\n        } else {\n\n            var vals = this.values;\n            var active = this.active;\n            var listItems = [];\n            let act;\n\n            for (let val of vals) {\n                (active.localeCompare(val)) ? act = false : act = true;\n                listItems.push(<Dropdown.Item eventKey={val} active={act} onSelect={this.changeValue}>{val}</Dropdown.Item>);\n            }\n\n            listItems.push(<Dropdown.Item eventKey={'panel'} panel style={{ width: 150 }}></Dropdown.Item>);\n\n            InputBox = (\n                <ButtonToolbar style={{ width: 10, marginLeft: 0 }}>\n                    <Dropdown style={{ width: 200 }} title={this.active}>\n                        {listItems}\n                    </Dropdown>\n                </ButtonToolbar>\n            );\n\n        }\n\n        return (\n            <div >\n                <Row style={{ marginTop: 15 }}>\n\n                    <Col md={10}><p style={{ marginTop: 10, marginLeft: 30 }}>{this.title}</p></Col>\n                    <Col md={14} />\n                    <Col md={10}>{InputBox}</Col>\n\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport const SliceSlider = (props) => {\n    const [value, setValue] = React.useState(props.vals);\n    let f = props.f;\n    let i = props.index;\n\n    return (\n        <div>\n            <br/>\n            <Row>\n                <Col md={5}>\n                    <p style={{ marginTop: 10, marginLeft: 30 }}>{props.title}</p>\n                </Col>\n                <Col md={1} />\n                <Col md={16}>\n                    <InputGroup>\n                        <InputNumber\n                            min={-50.0}\n                            max={50.0}\n                            value={value[0]}\n                            step={0.1}\n                            onChange={nextValue => {\n                                const [start, end] = value;\n                                if (parseFloat(nextValue) > end) {\n                                    return;\n                                }\n                                setValue([parseFloat(nextValue), end]);\n                                f(i, [parseFloat(nextValue),end]);\n                            }}\n                        />\n                        <InputGroup.Addon>to</InputGroup.Addon>\n                        <InputNumber\n                            min={-50.0}\n                            max={50.0}\n                            value={value[1]}\n                            step={0.1}\n                            onChange={(nextValue) => {\n                                const [start, end] = value;\n                                if (start > parseFloat(nextValue)) {\n                                    return;\n                                }\n                                setValue([start, parseFloat(nextValue)]);\n                                f(i, [start, parseFloat(nextValue)]);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={21}>\n                    <RangeSlider\n                        min={-50.0}\n                        max={50.0}\n                        progress\n                        style={{ marginLeft: 35, marginTop: 30 }}\n                        value={value}\n                        onChange={value => {\n                            setValue(value);\n\n                            f(i, value);\n                        }}\n                    />\n                </Col>\n\n            </Row>\n        </div>\n    );\n}\n\nexport const CustomSlider = (props) => {\n\n    var f = props.f;\n    var [value, setValue] = useState(props.val);\n    var [disabled, disable] = useState(false);\n\n    var type, graduated, progress;\n\n    if (props.type == null) {\n        type = null;\n    } else {\n        type = props.type;\n    }\n\n    disabled = props.disabled;\n    const [min, max] = props.boundaries;\n\n\n    return (\n\n        <Row>\n            <Col md={10}>\n                <Slider\n                    style={{ marginLeft: 25, marginTop: 16, width: 170 }}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, type);\n                    }}\n                />\n            </Col>\n            <Col md={4}>\n                <InputNumber\n                    style={{ marginLeft: 80, marginTop: 3, marginBottom: 3, width: 70, height: 35 }}\n                    min={min}\n                    max={max}\n                    value={value}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, props.type)\n                    }}\n                />\n            </Col>\n        </Row>\n    );\n\n}","\nimport { Dropdown, Sidebar, Sidenav, Nav, Icon, Navbar, ButtonGroup, Tooltip, Whisper, Divider, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, IconButton } from 'rsuite';\nimport React, { Component, useState } from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\n\nconst LODToolTip = (\n    <Tooltip>\n        Decreasing LOD will increase rendering speed.\n    </Tooltip>\n);\n\nexport class ModelsOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ModelState;\n        this.model = props.model;\n\n        this.selectShape = this.selectShape.bind(this);\n        this.selectSet = this.selectSet.bind(this);\n        this.updateParameter = this.updateParameter.bind(this);\n        this.toggleWireframe = this.toggleWireframe.bind(this);\n        this.toggleColour = this.toggleColour.bind(this);\n        this.updateShininess = this.updateShininess.bind(this);\n        this.updateUserColour = this.updateUserColour.bind(this);\n    }\n\n    updateShininess(val) {\n        this.setState({\n            shininess: val\n        });\n        View.ModelState.configurations[this.state.active].shininess = val;\n        this.model.updateShininess(this.state.active, val)\n    }\n\n    updateUserColour(value, type) {\n        let colour = this.state.configurations[this.state.active].colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateUserColour(this.state.active, colour);\n        View.ModelState.configurations[this.state.active].colour = colour;\n    }\n\n    toggleColour() {\n        let toggle = !this.state.configurations[this.state.active].colourFromDirector;\n        this.setState({\n            colourFromDirector: toggle\n        });\n        View.ModelState.configurations[this.state.active].colourFromDirector = toggle;\n        this.model.toggleUserColour(this.state.active, toggle);\n    }\n\n    toggleWireframe() {\n        let toggle = !this.state.configurations[this.state.active].displayAsWireframe;\n        this.setState({\n            displayAsWireframe: toggle\n        });\n        View.ModelState.configurations[this.state.active].displayAsWireframe = toggle;\n        this.model.toggleWireframe(this.state.active, toggle);\n    }\n\n    updateParameter(val, index) {\n        this.state.configurations[this.state.active].parameters.vals[index] = parseFloat(val);\n        this.reset();\n        View.ModelState.configurations[this.state.active].parameters.vals[index] = parseFloat(val);\n        this.model.updateShape(this.state.shape, this.state.active, this.state.configurations[this.state.active].parameters);\n    }\n\n    reset() {\n        let i;\n        if (this.state.reset > 50) {\n            i = 0;\n        } else {\n            i = ++this.state.reset;\n        }\n        this.setState(\n            {\n                reset: i\n            }\n        );\n    }\n\n    selectSet(val) {\n        for (let i = 0; i < this.state.sets.length; i++) {\n            if (this.state.sets[i].localeCompare(val) == 0) {\n                this.setState({\n                    active: i\n                })\n                View.ModelState.active = i;\n                break;\n            }\n        }\n        this.reset();\n    }\n\n    selectShape(val) {\n        let parameters = this.model.getParameters(val);\n        this.setState(\n            {\n                shape: val,\n                parameters: parameters\n            }\n        );\n\n        this.reset();\n        View.ModelState.configurations[this.state.active].shape = val;\n        View.ModelState.configurations[this.state.active].parameters = parameters;\n\n\n        this.model.updateShape(val, this.state.active, parameters);\n    }\n\n    render() {\n        const configState = this.state.configurations[this.state.active];\n        const reset = this.state.reset;\n        const title = configState.title;\n        const shapes = [\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cone\", \"Cylinder\", \"Torus\"];\n        const sets = this.state.sets;\n\n        return (\n            <div key={reset}>\n\n\n                <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n                <ParameterInput f={this.selectSet} selectingSet title=\"Set\" values={sets} active={title} />\n                <ParameterInput f={this.selectShape} title=\"Shape\" values={shapes} active={configState.shape} />\n                <ParameterSet f={this.updateParameter} titles={configState.parameters.names} values={configState.parameters.vals} />\n                <br />\n                <Divider><strong style={dividerStyle}>  Material </strong></Divider>\n\n                <Row className=\"show-grid\">\n                    <Col xs={1} />\n                    <Col xs={20}>\n                        <Checkbox checked={configState.displayAsWireframe} onClick={this.toggleWireframe}> Display as Wireframe </Checkbox>\n                        <Checkbox checked={configState.colourFromDirector} onClick={this.toggleColour}> Colour from Director </Checkbox>\n                        <br />\n                    </Col>\n                </Row>\n\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.r} type={'r'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.g} type={'g'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.b} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Shininess </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={configState.shininess} f={this.updateShininess} />\n\n            </div>\n        );\n    }\n}\n\nexport class ViewOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ViewOptionsState;\n\n        this.model = props.model;\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.selectCameraType = this.selectCameraType.bind(this);\n        this.updateLOD = this.updateLOD.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n\n    }\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        View.ViewOptionsState.rotating = !View.ViewOptionsState.rotating;\n        this.model.toggleCameraRotation();\n    }\n    selectCameraType(value) {\n        this.setState({\n            type: value\n        });\n        View.ViewOptionsState.cameraType = value;\n        this.model.setCamera(value);\n    }\n    updateLOD(value) {\n        this.setState({\n            LOD: value\n        });\n        View.ViewOptionsState.LOD = value;\n        this.model.updateLOD(value - 1);\n    }\n\n    updateLookat(value, type) {\n        let lookAt = this.state.lookAt;\n\n        switch (type) {\n            case 0:\n                lookAt.x = parseFloat(value);\n                break;\n            case 1:\n                lookAt.y = parseFloat(value);\n                break;\n            case 2:\n                lookAt.z = parseFloat(value);\n                break;\n        }\n\n        console.log(lookAt)\n        this.model.updateLookAt(lookAt);\n        View.ViewOptionsState.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const rotating = this.state.rotating;\n\n        return (\n            <div >\n\n                <Divider><strong style={dividerStyle}> Camera </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox checked={rotating} onClick={this.toggleAutorotate}> AutoRotate</Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n\n\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectCameraType}>\n                                    <br />\n                                    <p>Type</p>\n                                    <Radio defaultChecked value=\"perspective\">Perspective </Radio>\n                                    <Radio value=\"orthographic\">Orthographic </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p> Look at</p>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <ParameterSet titles={[\"X position\", \"Y position\", \"Z position\"]} values={[0.0, 0.0, 0.0]} f={this.updateLookat} />\n                <br />\n\n\n\n                <Divider><strong style={dividerStyle}> Perfomance Tuning </strong></Divider>\n\n                <Form style={{ marginLeft: TITLE_LEFT_MARGIN }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"top\" trigger=\"hover\" speaker={LODToolTip}>\n                            <Icon icon=\"question-circle\" size=\"lg\" style={{ marginTop: 12 }} />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n\n                    min={1}\n                    step={1}\n                    max={5}\n                    defaultValue={4}\n                    graduated\n                    progress\n                    style={{ width: 220, marginLeft: 40 }}\n                    onChange={this.updateLOD}\n                    renderMark={mark => {\n                        return mark;\n                    }}\n                />\n\n            </div>);\n    }\n}\n\nexport class SlicingOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.SlicingState;\n        this.model = props.model;\n\n        this.toggleIntersection = this.toggleIntersection.bind(this);\n        this.toggleHelperX = this.toggleHelperX.bind(this);\n        this.toggleHelperY = this.toggleHelperY.bind(this);\n        this.toggleHelperZ = this.toggleHelperZ.bind(this);\n        this.updateHelpers = this.updateHelpers.bind(this);\n        this.updateSlicer = this.updateSlicer.bind(this);\n    }\n\n    toggleIntersection() {\n        let toggle = !this.state.clipIntersection;\n        this.setState(\n            {\n                clipIntersection: toggle\n            }\n        );\n        View.SlicingState.clipIntersection = toggle;\n        this.model.toggleClipIntersection(toggle);\n    }\n\n    updateHelpers(helpers){\n        this.setState(\n            {\n                helpers: helpers\n            }\n        );\n        View.SlicingState.helpers = helpers;\n    }\n\n    toggleHelperX(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[0];\n        helpers[0] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(0, toggle);\n    }\n\n    toggleHelperY(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[1];\n        helpers[1] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(1, toggle);\n    }\n\n    toggleHelperZ(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[2];\n        helpers[2] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(2, toggle);\n    }\n\n    updateSlicer(i, vals) {\n        switch (i) {\n            case 0:\n                View.SlicingState.x = vals;\n                break;\n            case 1:\n                View.SlicingState.y = vals;\n                break;\n            case 2:\n                View.SlicingState.z = vals;\n                break;\n        }\n\n        this.model.updateSlicer(i, vals);\n    }\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={20}>\n                            <Checkbox checked={state.clipIntersection} onClick={this.toggleIntersection}> Slice Intersection</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"X : \" f={this.updateSlicer} index={0} vals={state.x}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[0]} onClick={this.toggleHelperX}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Y : \" f={this.updateSlicer} index={1} vals={state.y}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[1]} onClick={this.toggleHelperY}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Z : \" f={this.updateSlicer} index={2} vals={state.z}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[2]} onClick={this.toggleHelperZ}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n            </div>\n        );\n    }\n\n}\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.PointLightState;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') == 0) {\n            this.setState(View.DirectionalLightState);\n        } else {\n            this.setState(View.PointLightState);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.enabled = enabled;\n            intensity = View.PointLightState.colour.i;\n        } else {\n            View.DirectionalLightState.enabled = enabled;\n            intensity = View.DirectionalLightState.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.colour.i = intensity;\n        } else {\n            View.DirectionalLightState.colour.i = intensity;\n        }\n\n\n    }\n    updateColour(value, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n            default:\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLight(2, colour);\n            View.PointLightState.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.DirectionalLightState.colour = colour;\n        }\n    }\n    updatePosition(value, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = value;\n                break;\n            case 'y':\n                position.y = value;\n                break;\n            case 'z':\n                position.z = value;\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLightPosition(2, position);\n            View.PointLightState.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.DirectionalLightState.position = position;\n        }\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.AmbientLightState;\n\n        this.model = props.model;\n\n        this.updateAmbientLightColour = this.updateAmbientLightColour.bind(this);\n        this.updateBackgroundColour = this.updateBackgroundColour.bind(this);\n    }\n    updateAmbientLightColour(value, type) {\n        let colour = this.state.ambientLightColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n        }\n        this.model.updateLight(0, colour);\n        View.AmbientLightState.ambientLightColour = colour;\n    }\n    updateBackgroundColour(value, type) {\n        let colour = this.state.backgroundColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateBg(colour);\n        View.AmbientLightState.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateAmbientLightColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateAmbientLightColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateAmbientLightColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateAmbientLightColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBackgroundColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBackgroundColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBackgroundColour} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class VisualElementsOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.VisualElementsState;\n\n        this.model = props.model;\n        this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateGridColour = this.updateGridColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n\n    }\n    updateGridColour(value, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = value;\n                break;\n            case 'g':\n                rgb.g = value;\n                break;\n            case 'b':\n                rgb.b = value;\n                break;\n        }\n        this.model.updateGridColour(rgb);\n        View.VisualElementsState.gridColour = rgb;\n    }\n    updateGridSize(value) {\n        this.model.updateGridSize(value);\n        View.VisualElementsState.size = value;\n    }\n    toggleBoundingShapeEnabled() {\n        let toggle = !View.VisualElementsState.boundingShapeEnabled;\n        this.setState({\n            boundingShapeEnabled: toggle\n        });\n        View.VisualElementsState.boundingShapeEnabled = toggle;\n        this.model.updateBoundingShape(this.state.activeShape, toggle);\n    }\n    selectShape(value) {\n        this.setState({\n            activeShape: value\n        });\n        View.VisualElementsState.activeShape = value;\n        this.model.updateBoundingShape(value, this.state.boundingShapeEnabled);\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        View.VisualElementsState.showAxes = !View.VisualElementsState.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        View.VisualElementsState.showGrid = !View.VisualElementsState.showGrid;\n    }\n\n    render() {\n        const enabled = this.state.boundingShapeEnabled;\n        const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Bounding Shape </strong></Divider>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={enabled} onClick={this.toggleBoundingShapeEnabled}> Enabled </Checkbox>\n                            <br />\n\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <p>Shapes</p>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    <Radio disabled={!enabled} value=\"sphere\" >Sphere </Radio>\n                                    {/* TO DO CYLINDER */}\n                                    <Radio disabled={true} value=\"cylinder\" >Cylinder </Radio>\n\n                                </RadioGroup>\n                            </FormGroup>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> PRINT SHAPE INFO HERE</p>\n\n                <Divider><strong style={dividerStyle}> Grid </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={showAxes} onClick={this.toggleAxes}> Show Axes</Checkbox>\n                            <Checkbox checked={showGrid} onClick={this.toggleGrid}> Show Grid</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <br />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateGridColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateGridColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateGridColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n\n                <br />\n            </div>\n        );\n    }\n}","\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, VisualElementsOptions, SlicingOptions, ModelsOptions } from './SubMenus'\nimport { CatmullRomCurve3 } from 'three';\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nvar sidebarHeight = window.innerHeight - 56; \n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <div>\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{  backgroundColor: '#101010', height: sidebarHeight }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Reference Frame Frame</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Reference\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            \n        </Nav>\n        </div>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <div  style={{backgroundColor: '#0F131B'}}>\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n            </div>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Reference\":\n                menuContent.push(<VisualElementsOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                    appearance=\"default\" \n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;","import React, { Component } from \"react\";\nimport Top from './Top';\nimport Side from './Side';\n\nexport class View {\n    header;\n    sidebar;\n    model;\n    expanded;\n\n    static VisualElementsState;\n    static AmbientLightState;\n    static PointLightState;\n    static DirectionalLightState;\n    static ViewOptionsState;\n    static ModelState;\n    static SlicingState; \n\n    constructor(m, io) {\n        this.model = m;\n        this.header = <Top fps={60} functions={io} />;\n        this.sidebar = <Side model={this.model} />;\n        this.setDefaultStates();\n    }\n\n    statesToJSON(){\n        let states = [];\n        states.push(JSON.stringify(View.VisualElementsState));\n        states.push(JSON.stringify(View.SlicingState));\n        states.push(JSON.stringify(View.PointLightState));\n        states.push(JSON.stringify(View.DirectionalLightState));\n        states.push(JSON.stringify(View.AmbientLightState));\n        states.push(JSON.stringify(View.ViewOptionsState));\n        states.push(JSON.stringify(View.ModelState));\n        return states;\n    }\n\n    setDefaultStates() {\n        View.VisualElementsState = this.VisualElementsDefaultState;\n        View.AmbientLightState = this.AmbientLightDefaultState;\n        View.PointLightState = this.PointLightDefaultState;\n        View.DirectionalLightState = this.DirectionalLightDefaultState;\n        View.ViewOptionsState = this.ViewOptionsDefaultState;\n        View.ModelState = this.ModelDefaultState;\n        View.SlicingState = this.SlicingDefaultState;\n\n        for (let i in View.ModelState.sets) {\n            let c = JSON.parse(JSON.stringify(this.ConfigurationDefaultState));\n            c.title = View.ModelState.sets[i];\n            View.ModelState.configurations.push(c);\n        }\n    }\n\n    SlicingDefaultState = {\n        clipIntersection : false,\n        helpers : [false, false, false],\n        x : [-50, 50],\n        y : [-50, 50],\n        z : [-50, 50]\n    }\n\n    ModelDefaultState = {\n        active: 0,\n        reset: 0,\n        sets: ['Set A'],\n        configurations: []\n    }\n\n    ConfigurationDefaultState = {\n        title: '',\n        shape: 'Ellipsoid',\n        parameters: {\n            names: ['X', 'Y', 'Z'],\n            vals: [0.5, 0.2, 0.2]\n        },\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255\n        },\n        envMap: 'None',\n        shininess: 30,\n        reflectivity: 0.5,\n        refractivity: 0.5,\n        colourFromDirector: true,\n        displayAsWireframe: true\n    }\n\n    ViewOptionsDefaultState = {\n        rotating: false,\n        type: 'perspective',\n        lookAt: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        LOD: 4\n    }\n\n    PointLightDefaultState = {\n        reset: 0,\n        active: 'point',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 60\n        },\n        position: {\n            x: 5,\n            y: 0,\n            z: 5\n        }\n    }\n\n    DirectionalLightDefaultState = {\n        reset: 0,\n        active: 'directional',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 50\n        },\n        position: {\n            x: -5,\n            y: 0,\n            z: -5\n        }\n\n    }\n\n    VisualElementsDefaultState = {\n        boundingShapeEnabled: false,\n        activeShape: 'box',\n        showAxes: false,\n        showGrid: false,\n        gridColour: {\n            r: 50,\n            g: 90,\n            b: 90,\n        },\n        size: 50,\n\n    }\n\n    AmbientLightDefaultState = {\n        ambientLightColour: {\n            r: 15,\n            g: 240,\n            b: 255,\n            i: 40\n        },\n        backgroundColour: {\n            r: 0,\n            g: 0,\n            b: 0\n        }\n    }\n\n}\n\nexport default View;","export default __webpack_public_path__ + \"static/media/sample1.f5b826bb.txt\";","import Model  from \"./Model/Model\";\nimport View from \"./View/View\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport sample from './Samples/sample1.txt';\n\nclass Controller {\n    model;\n    view;\n    io;\n\n    constructor() {\n        this.io = [this.save, this.load, this.export];\n        this.model = new Model();\n        this.view = new View(this.model, this.io);\n        //this.stats = new Stats();\n    }\n\n\n    save = () => {\n        let file = this.model.setsToJSON();\n        file.push(this.view.statesToJSON());\n        console.log(file);\n    }\n\n    load = () => {\n        console.log('load');\n    }\n\n    export = () => {\n        console.log('export');\n    }\n\n    start = () => {\n        this.addListeners();\n        this.loadSample();\n        this.render();\n    }\n\n    getHeader = () => {\n        return this.view.header;\n    }\n\n    getSiderbar = () => {\n        return this.view.sidebar;\n    }\n\n    getDomElement = () => {\n        return this.model.renderer.domElement;\n    }\n\n    render = () => {\n        //this.stats.begin();\n        this.model.update();\n        //this.stats.end();\n        //this.updateFPS();\n        requestAnimationFrame(this.render);\n    }\n\n    loadSample = () => {\n        fetch(sample)\n            .then(res => res.text())\n            .then(configData => {\n                this.model.load(configData);\n            });\n    }\n\n    addListeners = () => {\n\n        document.body.style.overflow = \"hidden\";\n\n        window.addEventListener('resize', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n        document.addEventListener('fullscreenchange', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n\n        document.body.onkeydown = (e) => {\n            var key = e.keyCode;\n            // //spacebar\n            // if (key == 32) {\n            //     this.model.toggleCameraRotation();\n            // }\n            // //a\n            // if (key == 65) {\n            //     this.model.toggleAxes();\n            // }\n            // //g\n            // if (key == 71) {\n            //     this.model.toggleGrid();\n            // }\n            // if (key == 69) {\n            //     this.view.toggleSidebar();\n            // }\n        }\n    }\n\n\n}\n\n\n\nexport default Controller;\n\n\nvar Stats = function () {\n\n    var fps = 10;\n    var frames = 0;\n    var prevTime;\n  \n    return {\n      getFPS: function () {\n        return fps;\n      },\n      begin: function () {\n        prevTime = Date.now();\n      },\n      end: function () {\n        frames++;\n        var time = Date.now();\n  \n        if (time > prevTime + 1000) {\n          fps = (frames * 1000) / (time - prevTime);\n          prevTime = time;\n          frames = 0;\n          console.log(fps);\n        }\n      },\n  \n    };\n  \n  };\n  \n  ","import React, { Component } from \"react\";\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport { Container, Content } from 'rsuite';\nimport Controller from \"./Controller\";\n\nclass App extends Component {\n  controller;\n\n  constructor(props) {\n    super(props);\n    this.controller = new Controller();\n\n    this.state = {\n      header: this.controller.getHeader(),\n      sidebar: this.controller.getSiderbar()\n    };\n  }\n\n  componentDidMount() {\n    this.mount.appendChild(this.controller.getDomElement());\n    this.controller.start();\n  }\n\n  render() {\n    const header = this.state.header;\n    const sidebar = this.state.sidebar;\n\n    return (\n      <div >\n        <Container>\n          {header}\n          <Container>\n            {sidebar}\n            <Content>\n              <div ref={ref => (this.mount = ref)} />\n            </Content>\n          </Container>\n\n        </Container>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}