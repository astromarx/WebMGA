[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/Controller.js":"3","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js":"4","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js":"5","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js":"6","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js":"7","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js":"8","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js":"9","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js":"10","/home/padrino-eduardo/Desktop/webmga/src/View/View.js":"11","/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js":"12","/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js":"13","/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js":"14"},{"size":198,"mtime":1609107771761,"results":"15","hashOfConfig":"16"},{"size":929,"mtime":1609596111151,"results":"17","hashOfConfig":"16"},{"size":2825,"mtime":1612305505867,"results":"18","hashOfConfig":"16"},{"size":3094,"mtime":1612304448964,"results":"19","hashOfConfig":"16"},{"size":5739,"mtime":1611784517637,"results":"20","hashOfConfig":"16"},{"size":11033,"mtime":1612305347952,"results":"21","hashOfConfig":"16"},{"size":1031,"mtime":1612301487467,"results":"22","hashOfConfig":"16"},{"size":28079,"mtime":1612302950549,"results":"23","hashOfConfig":"16"},{"size":23989,"mtime":1611771380330,"results":"24","hashOfConfig":"16"},{"size":6442,"mtime":1612302492789,"results":"25","hashOfConfig":"16"},{"size":3834,"mtime":1612305347924,"results":"26","hashOfConfig":"16"},{"size":6557,"mtime":1612303592152,"results":"27","hashOfConfig":"16"},{"size":977,"mtime":1611769071440,"results":"28","hashOfConfig":"16"},{"size":3291,"mtime":1612028672577,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fh0xym",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],["66","67"],"/home/padrino-eduardo/Desktop/webmga/src/App.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Controller.js",["68","69"],"/home/padrino-eduardo/Desktop/webmga/src/View/Top.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/Side.js",["70","71","72","73","74","75"],"\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, VisualElementsOptions, SlicingOptions, ModelsOptions } from './SubMenus'\nimport { CatmullRomCurve3 } from 'three';\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nvar sidebarHeight = window.innerHeight - 56; \n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <div>\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{  backgroundColor: '#101010', height: sidebarHeight }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Reference Frame Frame</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Reference\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            \n        </Nav>\n        </div>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <div  style={{backgroundColor: '#0F131B'}}>\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n            </div>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Reference\":\n                menuContent.push(<VisualElementsOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                    appearance=\"default\" \n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js",["76","77","78","79","80","81"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js",["82"],"import {\n    AmbientLight,\n    DirectionalLight,\n    PointLight\n} from 'three';\n\nexport class Light {\n    light;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n    constructor(lightType) {\n        this.setDefaultLights(lightType);\n    }\n\n    updatePosition(x, y, z){\n        this.light.position.set(x, y, z);\n    }\n\n    updateColour(c, i){\n        this.light.color.setHex(parseInt(c.substring(1), 16));\n        this.light.intensity = i * 0.01;\n    }\n\n    setDefaultLights(lightType) {\n        switch (lightType) {\n            case 'ambient':\n                this.light = new AmbientLight(\"#0ff0ff\", 0.4);\n                break;\n            case 'directional':\n                this.light = new DirectionalLight(\"#ffffff\", 0.5);\n                this.light.position.set(-5, 0, -5);\n                break;\n            case 'point':\n                this.light = new PointLight(\"#ffffff\", 0.6);\n                this.light.position.set(5, 0, 5);\n                break;\n        }\n    }\n}\n\nexport default Light;","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115"],"\nimport { Dropdown, Sidebar, Sidenav, Nav, Icon, Navbar, ButtonGroup, Tooltip, Whisper, Divider, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, IconButton } from 'rsuite';\nimport React, { Component, useState } from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\n\nconst LODToolTip = (\n    <Tooltip>\n        Decreasing LOD will increase rendering speed.\n    </Tooltip>\n);\n\nexport class ModelsOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ModelState;\n        this.model = props.model;\n\n        this.selectShape = this.selectShape.bind(this);\n        this.selectSet = this.selectSet.bind(this);\n        this.updateParameter = this.updateParameter.bind(this);\n        this.toggleWireframe = this.toggleWireframe.bind(this);\n        this.toggleColour = this.toggleColour.bind(this);\n        this.updateShininess = this.updateShininess.bind(this);\n        this.updateUserColour = this.updateUserColour.bind(this);\n    }\n\n    updateShininess(val) {\n        this.setState({\n            shininess: val\n        });\n        View.ModelState.configurations[this.state.active].shininess = val;\n        this.model.updateShininess(this.state.active, val)\n    }\n\n    updateUserColour(value, type) {\n        let colour = this.state.configurations[this.state.active].colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateUserColour(this.state.active, colour);\n        View.ModelState.configurations[this.state.active].colour = colour;\n    }\n\n    toggleColour() {\n        let toggle = !this.state.configurations[this.state.active].colourFromDirector;\n        this.setState({\n            colourFromDirector: toggle\n        });\n        View.ModelState.configurations[this.state.active].colourFromDirector = toggle;\n        this.model.toggleUserColour(this.state.active, toggle);\n    }\n\n    toggleWireframe() {\n        let toggle = !this.state.configurations[this.state.active].displayAsWireframe;\n        this.setState({\n            displayAsWireframe: toggle\n        });\n        View.ModelState.configurations[this.state.active].displayAsWireframe = toggle;\n        this.model.toggleWireframe(this.state.active, toggle);\n    }\n\n    updateParameter(val, index) {\n        this.state.configurations[this.state.active].parameters.vals[index] = parseFloat(val);\n        this.reset();\n        View.ModelState.configurations[this.state.active].parameters.vals[index] = parseFloat(val);\n        this.model.updateShape(this.state.shape, this.state.active, this.state.configurations[this.state.active].parameters);\n    }\n\n    reset() {\n        let i;\n        if (this.state.reset > 50) {\n            i = 0;\n        } else {\n            i = ++this.state.reset;\n        }\n        this.setState(\n            {\n                reset: i\n            }\n        );\n    }\n\n    selectSet(val) {\n        for (let i = 0; i < this.state.sets.length; i++) {\n            if (this.state.sets[i].localeCompare(val) == 0) {\n                this.setState({\n                    active: i\n                })\n                View.ModelState.active = i;\n                break;\n            }\n        }\n        this.reset();\n    }\n\n    selectShape(val) {\n        let parameters = this.model.getParameters(val);\n        this.setState(\n            {\n                shape: val,\n                parameters: parameters\n            }\n        );\n\n        this.reset();\n        View.ModelState.configurations[this.state.active].shape = val;\n        View.ModelState.configurations[this.state.active].parameters = parameters;\n\n\n        this.model.updateShape(val, this.state.active, parameters);\n    }\n\n    render() {\n        const configState = this.state.configurations[this.state.active];\n        const reset = this.state.reset;\n        const title = configState.title;\n        const shapes = [\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cone\", \"Cylinder\", \"Torus\"];\n        const sets = this.state.sets;\n\n        return (\n            <div key={reset}>\n\n\n                <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n                <ParameterInput f={this.selectSet} selectingSet title=\"Set\" values={sets} active={title} />\n                <ParameterInput f={this.selectShape} title=\"Shape\" values={shapes} active={configState.shape} />\n                <ParameterSet f={this.updateParameter} titles={configState.parameters.names} values={configState.parameters.vals} />\n                <br />\n                <Divider><strong style={dividerStyle}>  Material </strong></Divider>\n\n                <Row className=\"show-grid\">\n                    <Col xs={1} />\n                    <Col xs={20}>\n                        <Checkbox checked={configState.displayAsWireframe} onClick={this.toggleWireframe}> Display as Wireframe </Checkbox>\n                        <Checkbox checked={configState.colourFromDirector} onClick={this.toggleColour}> Colour from Director </Checkbox>\n                        <br />\n                    </Col>\n                </Row>\n\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.r} type={'r'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.g} type={'g'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.b} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Shininess </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={configState.shininess} f={this.updateShininess} />\n\n            </div>\n        );\n    }\n}\n\nexport class ViewOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ViewOptionsState;\n\n        this.model = props.model;\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.selectCameraType = this.selectCameraType.bind(this);\n        this.updateLOD = this.updateLOD.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n\n    }\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        View.ViewOptionsState.rotating = !View.ViewOptionsState.rotating;\n        this.model.toggleCameraRotation();\n    }\n    selectCameraType(value) {\n        this.setState({\n            type: value\n        });\n        View.ViewOptionsState.cameraType = value;\n        this.model.setCamera(value);\n    }\n    updateLOD(value) {\n        this.setState({\n            LOD: value\n        });\n        View.ViewOptionsState.LOD = value;\n        this.model.updateLOD(value - 1);\n    }\n\n    updateLookat(value, type) {\n        let lookAt = this.state.lookAt;\n\n        switch (type) {\n            case 0:\n                lookAt.x = parseFloat(value);\n                break;\n            case 1:\n                lookAt.y = parseFloat(value);\n                break;\n            case 2:\n                lookAt.z = parseFloat(value);\n                break;\n        }\n\n        console.log(lookAt)\n        this.model.updateLookAt(lookAt);\n        View.ViewOptionsState.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const rotating = this.state.rotating;\n\n        return (\n            <div >\n\n                <Divider><strong style={dividerStyle}> Camera </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox checked={rotating} onClick={this.toggleAutorotate}> AutoRotate</Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n\n\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectCameraType}>\n                                    <br />\n                                    <p>Type</p>\n                                    <Radio defaultChecked value=\"perspective\">Perspective </Radio>\n                                    <Radio value=\"orthographic\">Orthographic </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p> Look at</p>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <ParameterSet titles={[\"X position\", \"Y position\", \"Z position\"]} values={[0.0, 0.0, 0.0]} f={this.updateLookat} />\n                <br />\n\n\n\n                <Divider><strong style={dividerStyle}> Perfomance Tuning </strong></Divider>\n\n                <Form style={{ marginLeft: TITLE_LEFT_MARGIN }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"top\" trigger=\"hover\" speaker={LODToolTip}>\n                            <Icon icon=\"question-circle\" size=\"lg\" style={{ marginTop: 12 }} />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n\n                    min={1}\n                    step={1}\n                    max={5}\n                    defaultValue={4}\n                    graduated\n                    progress\n                    style={{ width: 220, marginLeft: 40 }}\n                    onChange={this.updateLOD}\n                    renderMark={mark => {\n                        return mark;\n                    }}\n                />\n\n            </div>);\n    }\n}\n\nexport class SlicingOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.SlicingState;\n        this.model = props.model;\n\n        this.toggleIntersection = this.toggleIntersection.bind(this);\n        this.toggleHelperX = this.toggleHelperX.bind(this);\n        this.toggleHelperY = this.toggleHelperY.bind(this);\n        this.toggleHelperZ = this.toggleHelperZ.bind(this);\n        this.updateHelpers = this.updateHelpers.bind(this);\n        this.updateSlicer = this.updateSlicer.bind(this);\n    }\n\n    toggleIntersection() {\n        let toggle = !this.state.clipIntersection;\n        this.setState(\n            {\n                clipIntersection: toggle\n            }\n        );\n        View.SlicingState.clipIntersection = toggle;\n        this.model.toggleClipIntersection(toggle);\n    }\n\n    updateHelpers(helpers){\n        this.setState(\n            {\n                helpers: helpers\n            }\n        );\n        View.SlicingState.helpers = helpers;\n    }\n\n    toggleHelperX(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[0];\n        helpers[0] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(0, toggle);\n    }\n\n    toggleHelperY(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[1];\n        helpers[1] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(1, toggle);\n    }\n\n    toggleHelperZ(){\n        let helpers = this.state.helpers;\n        let toggle = !helpers[2];\n        helpers[2] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(2, toggle);\n    }\n\n    updateSlicer(i, vals) {\n        switch (i) {\n            case 0:\n                View.SlicingState.x = vals;\n                break;\n            case 1:\n                View.SlicingState.y = vals;\n                break;\n            case 2:\n                View.SlicingState.z = vals;\n                break;\n        }\n\n        this.model.updateSlicer(i, vals);\n    }\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={20}>\n                            <Checkbox checked={state.clipIntersection} onClick={this.toggleIntersection}> Slice Intersection</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"X : \" f={this.updateSlicer} index={0} vals={state.x}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[0]} onClick={this.toggleHelperX}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Y : \" f={this.updateSlicer} index={1} vals={state.y}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[1]} onClick={this.toggleHelperY}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Z : \" f={this.updateSlicer} index={2} vals={state.z}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[2]} onClick={this.toggleHelperZ}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n            </div>\n        );\n    }\n\n}\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.PointLightState;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') == 0) {\n            this.setState(View.DirectionalLightState);\n        } else {\n            this.setState(View.PointLightState);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.enabled = enabled;\n            intensity = View.PointLightState.colour.i;\n        } else {\n            View.DirectionalLightState.enabled = enabled;\n            intensity = View.DirectionalLightState.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.colour.i = intensity;\n        } else {\n            View.DirectionalLightState.colour.i = intensity;\n        }\n\n\n    }\n    updateColour(value, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n            default:\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLight(2, colour);\n            View.PointLightState.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.DirectionalLightState.colour = colour;\n        }\n    }\n    updatePosition(value, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = value;\n                break;\n            case 'y':\n                position.y = value;\n                break;\n            case 'z':\n                position.z = value;\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLightPosition(2, position);\n            View.PointLightState.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.DirectionalLightState.position = position;\n        }\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.AmbientLightState;\n\n        this.model = props.model;\n\n        this.updateAmbientLightColour = this.updateAmbientLightColour.bind(this);\n        this.updateBackgroundColour = this.updateBackgroundColour.bind(this);\n    }\n    updateAmbientLightColour(value, type) {\n        let colour = this.state.ambientLightColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n        }\n        this.model.updateLight(0, colour);\n        View.AmbientLightState.ambientLightColour = colour;\n    }\n    updateBackgroundColour(value, type) {\n        let colour = this.state.backgroundColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateBg(colour);\n        View.AmbientLightState.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateAmbientLightColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateAmbientLightColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateAmbientLightColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateAmbientLightColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBackgroundColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBackgroundColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBackgroundColour} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class VisualElementsOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.VisualElementsState;\n\n        this.model = props.model;\n        this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateGridColour = this.updateGridColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n\n    }\n    updateGridColour(value, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = value;\n                break;\n            case 'g':\n                rgb.g = value;\n                break;\n            case 'b':\n                rgb.b = value;\n                break;\n        }\n        this.model.updateGridColour(rgb);\n        View.VisualElementsState.gridColour = rgb;\n    }\n    updateGridSize(value) {\n        this.model.updateGridSize(value);\n        View.VisualElementsState.size = value;\n    }\n    toggleBoundingShapeEnabled() {\n        let toggle = !View.VisualElementsState.boundingShapeEnabled;\n        this.setState({\n            boundingShapeEnabled: toggle\n        });\n        View.VisualElementsState.boundingShapeEnabled = toggle;\n        this.model.updateBoundingShape(this.state.activeShape, toggle);\n    }\n    selectShape(value) {\n        this.setState({\n            activeShape: value\n        });\n        View.VisualElementsState.activeShape = value;\n        this.model.updateBoundingShape(value, this.state.boundingShapeEnabled);\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        View.VisualElementsState.showAxes = !View.VisualElementsState.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        View.VisualElementsState.showGrid = !View.VisualElementsState.showGrid;\n    }\n\n    render() {\n        const enabled = this.state.boundingShapeEnabled;\n        const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Bounding Shape </strong></Divider>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={enabled} onClick={this.toggleBoundingShapeEnabled}> Enabled </Checkbox>\n                            <br />\n\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <p>Shapes</p>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    <Radio disabled={!enabled} value=\"sphere\" >Sphere </Radio>\n                                    {/* TO DO CYLINDER */}\n                                    <Radio disabled={true} value=\"cylinder\" >Cylinder </Radio>\n\n                                </RadioGroup>\n                            </FormGroup>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> PRINT SHAPE INFO HERE</p>\n\n                <Divider><strong style={dividerStyle}> Grid </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={showAxes} onClick={this.toggleAxes}> Show Axes</Checkbox>\n                            <Checkbox checked={showGrid} onClick={this.toggleGrid}> Show Grid</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <br />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateGridColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateGridColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateGridColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n\n                <br />\n            </div>\n        );\n    }\n}","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js",["116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],"import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode,\n    SphereBufferGeometry,\n    ConeBufferGeometry,\n    CylinderBufferGeometry,\n    TorusBufferGeometry\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    LOD;\n    complexity;\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n    presetGeometry;\n\n    isPreset;\n\n    constructor() {\n        this.args = arguments[0];\n        this.isPreset = false;\n        this.LOD = 1;\n        this.complexity = [6,12,18,24,32];\n    }\n\n    clear(){\n        this.presetGeometry = [];\n        this.stripGeometries = [];\n        this.fanGeometries = [];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Preset extends Shape {\n\n    constructor(type, parameters) {\n        super();\n        this.isPreset = true;\n        this.type = type;\n        this.parameters = parameters;\n    }\n\n    generate(){\n        this.clear();\n\n        switch (this.type) {\n            case 'Sphere':\n                this.presetGeometry = new SphereBufferGeometry(this.parameters, this.complexity[this.LOD], this.complexity[this.LOD]);\n                break;\n            case 'Cone':\n                this.presetGeometry = new ConeBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n            case 'Cylinder':\n                this.presetGeometry = new CylinderBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n            case 'Torus':\n                this.presetGeometry = new TorusBufferGeometry(...this.parameters, this.complexity[this.LOD]);\n                break;\n        }\n    }\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (- this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n    }\n\n    generate(){\n        this.clear();\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n            actComplexity.push(this.complexity[this.LOD] + currLevel * (-this.complexity[this.LOD]) / (this.levels - 1.0));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"/home/padrino-eduardo/Desktop/webmga/src/View/View.js",["193"],"import React, { Component } from \"react\";\nimport Top from './Top';\nimport Side from './Side';\n\nexport class View {\n    header;\n    sidebar;\n    model;\n    expanded;\n\n    static VisualElementsState;\n    static AmbientLightState;\n    static PointLightState;\n    static DirectionalLightState;\n    static ViewOptionsState;\n    static ModelState;\n    static SlicingState; \n\n    constructor(m, io) {\n        this.model = m;\n        this.header = <Top fps={60} functions={io} />;\n        this.sidebar = <Side model={this.model} />;\n        this.setDefaultStates();\n    }\n\n    statesToJSON(){\n        let states = [];\n        states.push(JSON.stringify(View.VisualElementsState));\n        states.push(JSON.stringify(View.SlicingState));\n        states.push(JSON.stringify(View.PointLightState));\n        states.push(JSON.stringify(View.DirectionalLightState));\n        states.push(JSON.stringify(View.AmbientLightState));\n        states.push(JSON.stringify(View.ViewOptionsState));\n        states.push(JSON.stringify(View.ModelState));\n        return states;\n    }\n\n    setDefaultStates() {\n        View.VisualElementsState = this.VisualElementsDefaultState;\n        View.AmbientLightState = this.AmbientLightDefaultState;\n        View.PointLightState = this.PointLightDefaultState;\n        View.DirectionalLightState = this.DirectionalLightDefaultState;\n        View.ViewOptionsState = this.ViewOptionsDefaultState;\n        View.ModelState = this.ModelDefaultState;\n        View.SlicingState = this.SlicingDefaultState;\n\n        for (let i in View.ModelState.sets) {\n            let c = JSON.parse(JSON.stringify(this.ConfigurationDefaultState));\n            c.title = View.ModelState.sets[i];\n            View.ModelState.configurations.push(c);\n        }\n    }\n\n    SlicingDefaultState = {\n        clipIntersection : false,\n        helpers : [false, false, false],\n        x : [-50, 50],\n        y : [-50, 50],\n        z : [-50, 50]\n    }\n\n    ModelDefaultState = {\n        active: 0,\n        reset: 0,\n        sets: ['Set A'],\n        configurations: []\n    }\n\n    ConfigurationDefaultState = {\n        title: '',\n        shape: 'Ellipsoid',\n        parameters: {\n            names: ['X', 'Y', 'Z'],\n            vals: [0.5, 0.2, 0.2]\n        },\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255\n        },\n        envMap: 'None',\n        shininess: 30,\n        reflectivity: 0.5,\n        refractivity: 0.5,\n        colourFromDirector: true,\n        displayAsWireframe: true\n    }\n\n    ViewOptionsDefaultState = {\n        rotating: false,\n        type: 'perspective',\n        lookAt: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        LOD: 4\n    }\n\n    PointLightDefaultState = {\n        reset: 0,\n        active: 'point',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 60\n        },\n        position: {\n            x: 5,\n            y: 0,\n            z: 5\n        }\n    }\n\n    DirectionalLightDefaultState = {\n        reset: 0,\n        active: 'directional',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 50\n        },\n        position: {\n            x: -5,\n            y: 0,\n            z: -5\n        }\n\n    }\n\n    VisualElementsDefaultState = {\n        boundingShapeEnabled: false,\n        activeShape: 'box',\n        showAxes: false,\n        showGrid: false,\n        gridColour: {\n            r: 50,\n            g: 90,\n            b: 90,\n        },\n        size: 50,\n\n    }\n\n    AmbientLightDefaultState = {\n        ambientLightColour: {\n            r: 15,\n            g: 240,\n            b: 255,\n            i: 40\n        },\n        backgroundColour: {\n            r: 0,\n            g: 0,\n            b: 0\n        }\n    }\n\n}\n\nexport default View;","/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js",["194","195","196"],"import {\n    Mesh,\n    MeshPhongMaterial,\n    Vector3,\n    Quaternion,\n    Euler,\n    Color,\n    DoubleSide\n} from 'three';\nimport * as SHAPE from './Shapes.js';\nimport Model from './Model';\nimport Parameters from './Parameters';\n\nexport class Set {\n    name;\n    type;\n    parameters;\n    shape;\n    orientationType;\n    wireframe;\n    shininess;\n    userColour;\n    colourByDirector;\n    lod;\n    clippingPlanes;\n    clipIntersection;\n\n    elements = []\n    meshes = [];\n\n    constructor(n, ot, d, cp, ci) {\n        this.name = n;\n        this.orientationType = ot;\n        this.clippingPlanes = cp;\n        this.clipIntersection = ci;\n        this.setDefaults();\n        this.genElements(d);\n        this.setElements();\n        this.genMeshes();\n    }\n\n    updateSlicers(i, vals){\n        this.clippingPlanes[2*i+1].constant = vals[1];\n        this.clippingPlanes[2*i].constant = -vals[0];\n    }\n\n    toggleClipIntersection(toggle){\n        this.clipIntersection = toggle;\n        for(let mesh of this.meshes){\n            mesh.material.clipIntersection = toggle;\n        }\n    }\n\n    genMeshes() {\n        let m;\n        let c;\n        let mat;\n\n        for (let elem of this.elements) {\n            if (this.colourByDirector) {\n                c = new Color(elem.getColour());\n            } else {\n                c = this.userColour;\n            }\n\n            mat = new MeshPhongMaterial({ \n                color: c,\n                side: DoubleSide,\n                clippingPlanes: this.clippingPlanes,\n                clipIntersection: this.clipIntersection\n             });\n            mat.wireframe = this.wireframe;\n            mat.shininess = this.shininess;\n\n            for (let g of elem.geometries) {\n                m = new Mesh(g, mat);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    setUserColour(hex){\n        this.userColour = new Color(hex);\n    }\n\n    setElements() {\n        let geoms = [];\n\n        for (let elem of this.elements) {\n            if (this.shape.isPreset) {\n                geoms.push(this.shape.presetGeometry.clone());\n            }\n            else {\n                geoms.push(this.shape.stripGeometry.clone());\n                geoms.push(this.shape.fanGeometries[0].clone());\n                geoms.push(this.shape.fanGeometries[1].clone());\n            }\n\n            this.translate(elem.position, geoms);\n            this.rotate(elem.euler, geoms);\n            elem.setGeometries(geoms);\n\n            geoms = [];\n        }\n    }\n\n    genElements(elements) {\n        let position, orientation, attributes, euler, nP;\n        let temp = [], colour = [];\n\n        for (let elem of elements) {\n            attributes = elem.split(\" \");\n\n            for (let a of attributes) {\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7) { break; }\n\n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n            colour = this.colourFromOrientation(euler);\n\n            nP = new this.Element(colour, position, euler);\n            this.elements.push(nP);\n        }\n    }\n\n    setDefaults() {\n        this.userColour = new Color(\"#FFFFFF\");\n        this.colourByDirector = true;\n        this.wireframe = true;\n        this.shininess = 30;\n        this.lod = 4;\n        this.type = 'Ellipsoid';\n        this.parameters = Parameters.Ellipsoid.vals;\n        this.genGeometries();\n    }\n\n    genGeometries() {\n        switch (this.type) {\n            case 'Ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(...this.parameters);\n                break;\n            case 'Spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(...this.parameters);\n                break;\n            case 'Spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(...this.parameters);\n                break;\n            case 'Cut Sphere':\n                this.shape = new SHAPE.CutSphere(...this.parameters);\n                break;\n            case 'Sphere':\n                this.shape = new SHAPE.Preset('Sphere', this.parameters);\n                break;\n            case 'Cone':\n                this.shape = new SHAPE.Preset('Cone', this.parameters);\n                break;\n            case 'Cylinder':\n                this.shape = new SHAPE.Preset('Cylinder', this.parameters);\n                break;\n            case 'Torus':\n                this.shape = new SHAPE.Preset('Torus', this.parameters);\n                break;\n        }\n\n        this.shape.LOD = this.lod;\n        this.shape.generate();\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    colourFromOrientation(euler) {\n        let colour = [];\n\n        colour.push(Math.round((euler._x + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._y + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._z + Math.PI) / (2 * Math.PI) * (255)));\n        return colour;\n    }\n\n    getRotations(type, rot) {\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type) {\n            case 'v':\n                let defaultVector = new Vector3(0, 0, 1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n\n    }\n\n    Element = class Element {\n        geometries;\n        colour;\n        position;\n        euler;\n\n        constructor(c, p, e) {\n            this.colour = c;\n            this.position = p;\n            this.euler = e;\n        }\n\n        getColour() {\n            return Model.rgbToHex(this.colour[0], this.colour[1], this.colour[2]);\n        }\n\n        setGeometries(geoms) {\n            this.geometries = geoms;\n        }\n\n    }\n}\n\nexport default Set;","/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js",["197","198","199"],"import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3,\n    BufferGeometry,\n    Line,\n    WireframeGeometry,\n    LineSegments,\n    Box3Helper,\n    Box3,\n    SphereBufferGeometry,\n    MeshBasicMaterial,\n    Mesh\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Tools {\n    subGrid;\n    axes = [];\n    boundingShape;\n    boundingShapeType;\n    setsGeometry;\n    size;\n    colour;\n    material;\n\n    constructor(s, c) {\n        this.size = s;\n        this.colour = c;\n\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n\n        this.genAxes();\n        this.genSubgrid();\n\n        this.boundingShapeType = 'box';\n        this.setsGeometry = null;\n    }\n\n    genBoundingShape(type, sets) {\n        this.boundingShape = null;\n\n        if (this.setsGeometry == null) {\n            let geometries = [];\n            for (let set of sets) {\n                for (let elem of set.elements) {\n                    geometries.push(BufferGeometryUtils.mergeBufferGeometries(elem.geometries));\n                }\n            }\n            this.setsGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n        }\n\n\n\n        switch (type) {\n            case 'box':\n                let box = new Box3();\n                this.setsGeometry.computeBoundingBox()\n                box.copy(this.setsGeometry.boundingBox);\n                this.boundingShape = new Box3Helper(box, 0xffff00);\n                break;\n            case 'sphere':\n                \n                this.setsGeometry.computeBoundingSphere();\n                let sphere = this.setsGeometry.boundingSphere;\n                console.log(sphere);\n                let geom = new SphereBufferGeometry(sphere.radius, 10, 10);\n                geom.translate(sphere.center.x, sphere.center.y, sphere.center.z);\n                let material = new MeshBasicMaterial({ color: 0xffff00 });\n                material.wireframe = true;\n                this.boundingShape = new Mesh(geom, material);\n                break;\n            case 'cylinder':\n            // this.boundingShape.copy(this.setsGeometry.computeBoundingBox());\n            // break;\n        }\n\n\n\n        return this.boundingShape;\n\n    }\n\n\n    updateColour(colour) {\n        this.colour = colour;\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    updateSize(size) {\n        this.size = size;\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    genSubgrid() {\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes() {\n        this.axes = [];\n        let axesSize = this.size / 2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), this.material));\n    }\n\n}\n\nexport default Tools;",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":83,"column":17,"nodeType":"206","messageId":"207","endLine":83,"endColumn":20},{"ruleId":"204","severity":1,"message":"208","line":110,"column":5,"nodeType":"206","messageId":"207","endLine":110,"endColumn":10},{"ruleId":"204","severity":1,"message":"209","line":2,"column":19,"nodeType":"206","messageId":"207","endLine":2,"endColumn":26},{"ruleId":"204","severity":1,"message":"210","line":2,"column":28,"nodeType":"206","messageId":"207","endLine":2,"endColumn":35},{"ruleId":"204","severity":1,"message":"211","line":2,"column":48,"nodeType":"206","messageId":"207","endLine":2,"endColumn":51},{"ruleId":"204","severity":1,"message":"212","line":2,"column":53,"nodeType":"206","messageId":"207","endLine":2,"endColumn":56},{"ruleId":"204","severity":1,"message":"213","line":5,"column":10,"nodeType":"206","messageId":"207","endLine":5,"endColumn":26},{"ruleId":"214","severity":1,"message":"215","line":81,"column":9,"nodeType":"216","messageId":"217","endLine":100,"endColumn":10},{"ruleId":"204","severity":1,"message":"218","line":7,"column":5,"nodeType":"206","messageId":"207","endLine":7,"endColumn":19},{"ruleId":"219","severity":1,"message":"220","line":151,"column":18,"nodeType":"221","messageId":"222","endLine":151,"endColumn":20},{"ruleId":"219","severity":1,"message":"220","line":166,"column":29,"nodeType":"221","messageId":"222","endLine":166,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":283,"column":31,"nodeType":"221","messageId":"222","endLine":283,"endColumn":33},{"ruleId":"214","severity":1,"message":"215","line":300,"column":9,"nodeType":"216","messageId":"217","endLine":326,"endColumn":10},{"ruleId":"219","severity":1,"message":"220","line":400,"column":21,"nodeType":"221","messageId":"222","endLine":400,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":28,"column":9,"nodeType":"216","messageId":"217","endLine":40,"endColumn":10},{"ruleId":"204","severity":1,"message":"223","line":2,"column":10,"nodeType":"206","messageId":"207","endLine":2,"endColumn":18},{"ruleId":"204","severity":1,"message":"224","line":2,"column":20,"nodeType":"206","messageId":"207","endLine":2,"endColumn":27},{"ruleId":"204","severity":1,"message":"225","line":2,"column":29,"nodeType":"206","messageId":"207","endLine":2,"endColumn":36},{"ruleId":"204","severity":1,"message":"226","line":2,"column":49,"nodeType":"206","messageId":"207","endLine":2,"endColumn":55},{"ruleId":"204","severity":1,"message":"227","line":2,"column":57,"nodeType":"206","messageId":"207","endLine":2,"endColumn":68},{"ruleId":"204","severity":1,"message":"228","line":2,"column":97,"nodeType":"206","messageId":"207","endLine":2,"endColumn":106},{"ruleId":"204","severity":1,"message":"229","line":2,"column":118,"nodeType":"206","messageId":"207","endLine":2,"endColumn":129},{"ruleId":"204","severity":1,"message":"230","line":2,"column":131,"nodeType":"206","messageId":"207","endLine":2,"endColumn":138},{"ruleId":"204","severity":1,"message":"231","line":2,"column":140,"nodeType":"206","messageId":"207","endLine":2,"endColumn":145},{"ruleId":"204","severity":1,"message":"232","line":2,"column":147,"nodeType":"206","messageId":"207","endLine":2,"endColumn":156},{"ruleId":"204","severity":1,"message":"233","line":2,"column":204,"nodeType":"206","messageId":"207","endLine":2,"endColumn":210},{"ruleId":"204","severity":1,"message":"234","line":2,"column":212,"nodeType":"206","messageId":"207","endLine":2,"endColumn":218},{"ruleId":"204","severity":1,"message":"235","line":2,"column":220,"nodeType":"206","messageId":"207","endLine":2,"endColumn":226},{"ruleId":"204","severity":1,"message":"236","line":2,"column":228,"nodeType":"206","messageId":"207","endLine":2,"endColumn":239},{"ruleId":"204","severity":1,"message":"237","line":2,"column":261,"nodeType":"206","messageId":"207","endLine":2,"endColumn":272},{"ruleId":"204","severity":1,"message":"238","line":2,"column":282,"nodeType":"206","messageId":"207","endLine":2,"endColumn":292},{"ruleId":"204","severity":1,"message":"239","line":3,"column":17,"nodeType":"206","messageId":"207","endLine":3,"endColumn":26},{"ruleId":"204","severity":1,"message":"240","line":3,"column":28,"nodeType":"206","messageId":"207","endLine":3,"endColumn":36},{"ruleId":"214","severity":1,"message":"215","line":45,"column":9,"nodeType":"216","messageId":"217","endLine":55,"endColumn":10},{"ruleId":"241","severity":1,"message":"242","line":79,"column":9,"nodeType":"243","endLine":79,"endColumn":69},{"ruleId":"241","severity":1,"message":"242","line":90,"column":19,"nodeType":"243","endLine":90,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":101,"column":55,"nodeType":"221","messageId":"222","endLine":101,"endColumn":57},{"ruleId":"214","severity":1,"message":"215","line":206,"column":9,"nodeType":"216","messageId":"217","endLine":216,"endColumn":10},{"ruleId":"214","severity":1,"message":"215","line":361,"column":9,"nodeType":"216","messageId":"217","endLine":371,"endColumn":10},{"ruleId":"219","severity":1,"message":"220","line":447,"column":54,"nodeType":"221","messageId":"222","endLine":447,"endColumn":56},{"ruleId":"219","severity":1,"message":"220","line":464,"column":54,"nodeType":"221","messageId":"222","endLine":464,"endColumn":56},{"ruleId":"219","severity":1,"message":"220","line":479,"column":54,"nodeType":"221","messageId":"222","endLine":479,"endColumn":56},{"ruleId":"219","severity":1,"message":"220","line":507,"column":54,"nodeType":"221","messageId":"222","endLine":507,"endColumn":56},{"ruleId":"214","severity":1,"message":"215","line":518,"column":9,"nodeType":"216","messageId":"217","endLine":528,"endColumn":10},{"ruleId":"219","severity":1,"message":"220","line":530,"column":54,"nodeType":"221","messageId":"222","endLine":530,"endColumn":56},{"ruleId":"214","severity":1,"message":"215","line":586,"column":9,"nodeType":"216","messageId":"217","endLine":599,"endColumn":10},{"ruleId":"214","severity":1,"message":"215","line":606,"column":9,"nodeType":"216","messageId":"217","endLine":616,"endColumn":10},{"ruleId":"214","severity":1,"message":"215","line":659,"column":9,"nodeType":"216","messageId":"217","endLine":669,"endColumn":10},{"ruleId":"219","severity":1,"message":"244","line":46,"column":19,"nodeType":"221","messageId":"222","endLine":46,"endColumn":21},{"ruleId":"219","severity":1,"message":"220","line":66,"column":41,"nodeType":"221","messageId":"222","endLine":66,"endColumn":43},{"ruleId":"214","severity":1,"message":"215","line":94,"column":9,"nodeType":"216","messageId":"217","endLine":107,"endColumn":10},{"ruleId":"219","severity":1,"message":"220","line":142,"column":27,"nodeType":"221","messageId":"222","endLine":142,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":142,"column":37,"nodeType":"221","messageId":"222","endLine":142,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":157,"column":27,"nodeType":"221","messageId":"222","endLine":157,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":157,"column":37,"nodeType":"221","messageId":"222","endLine":157,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":191,"column":18,"nodeType":"206","messageId":"247","endLine":191,"endColumn":19},{"ruleId":"219","severity":1,"message":"220","line":192,"column":19,"nodeType":"221","messageId":"222","endLine":192,"endColumn":21},{"ruleId":"219","severity":1,"message":"220","line":192,"column":29,"nodeType":"221","messageId":"222","endLine":192,"endColumn":31},{"ruleId":"245","severity":1,"message":"246","line":220,"column":18,"nodeType":"206","messageId":"247","endLine":220,"endColumn":19},{"ruleId":"219","severity":1,"message":"220","line":221,"column":19,"nodeType":"221","messageId":"222","endLine":221,"endColumn":21},{"ruleId":"219","severity":1,"message":"220","line":221,"column":29,"nodeType":"221","messageId":"222","endLine":221,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":277,"column":27,"nodeType":"221","messageId":"222","endLine":277,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":277,"column":37,"nodeType":"221","messageId":"222","endLine":277,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":292,"column":27,"nodeType":"221","messageId":"222","endLine":292,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":292,"column":37,"nodeType":"221","messageId":"222","endLine":292,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":317,"column":27,"nodeType":"221","messageId":"222","endLine":317,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":317,"column":37,"nodeType":"221","messageId":"222","endLine":317,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":332,"column":27,"nodeType":"221","messageId":"222","endLine":332,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":332,"column":37,"nodeType":"221","messageId":"222","endLine":332,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":356,"column":23,"nodeType":"221","messageId":"222","endLine":356,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":356,"column":33,"nodeType":"221","messageId":"222","endLine":356,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":391,"column":23,"nodeType":"221","messageId":"222","endLine":391,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":391,"column":33,"nodeType":"221","messageId":"222","endLine":391,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":421,"column":23,"nodeType":"221","messageId":"222","endLine":421,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":421,"column":33,"nodeType":"221","messageId":"222","endLine":421,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":483,"column":27,"nodeType":"221","messageId":"222","endLine":483,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":483,"column":37,"nodeType":"221","messageId":"222","endLine":483,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":495,"column":27,"nodeType":"221","messageId":"222","endLine":495,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":495,"column":37,"nodeType":"221","messageId":"222","endLine":495,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":507,"column":27,"nodeType":"221","messageId":"222","endLine":507,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":507,"column":37,"nodeType":"221","messageId":"222","endLine":507,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":519,"column":27,"nodeType":"221","messageId":"222","endLine":519,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":519,"column":37,"nodeType":"221","messageId":"222","endLine":519,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":549,"column":23,"nodeType":"221","messageId":"222","endLine":549,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":549,"column":33,"nodeType":"221","messageId":"222","endLine":549,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":578,"column":23,"nodeType":"221","messageId":"222","endLine":578,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":578,"column":33,"nodeType":"221","messageId":"222","endLine":578,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":637,"column":27,"nodeType":"221","messageId":"222","endLine":637,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":637,"column":37,"nodeType":"221","messageId":"222","endLine":637,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":652,"column":27,"nodeType":"221","messageId":"222","endLine":652,"endColumn":29},{"ruleId":"219","severity":1,"message":"220","line":652,"column":37,"nodeType":"221","messageId":"222","endLine":652,"endColumn":39},{"ruleId":"219","severity":1,"message":"220","line":684,"column":23,"nodeType":"221","messageId":"222","endLine":684,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":684,"column":33,"nodeType":"221","messageId":"222","endLine":684,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":715,"column":23,"nodeType":"221","messageId":"222","endLine":715,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":715,"column":33,"nodeType":"221","messageId":"222","endLine":715,"endColumn":35},{"ruleId":"204","severity":1,"message":"224","line":3,"column":45,"nodeType":"206","messageId":"207","endLine":3,"endColumn":52},{"ruleId":"204","severity":1,"message":"225","line":3,"column":54,"nodeType":"206","messageId":"207","endLine":3,"endColumn":61},{"ruleId":"204","severity":1,"message":"248","line":3,"column":63,"nodeType":"206","messageId":"207","endLine":3,"endColumn":66},{"ruleId":"204","severity":1,"message":"249","line":3,"column":68,"nodeType":"206","messageId":"207","endLine":3,"endColumn":72},{"ruleId":"204","severity":1,"message":"226","line":3,"column":74,"nodeType":"206","messageId":"207","endLine":3,"endColumn":80},{"ruleId":"204","severity":1,"message":"228","line":3,"column":82,"nodeType":"206","messageId":"207","endLine":3,"endColumn":91},{"ruleId":"204","severity":1,"message":"250","line":3,"column":93,"nodeType":"206","messageId":"207","endLine":3,"endColumn":101},{"ruleId":"204","severity":1,"message":"230","line":3,"column":116,"nodeType":"206","messageId":"207","endLine":3,"endColumn":123},{"ruleId":"204","severity":1,"message":"231","line":3,"column":125,"nodeType":"206","messageId":"207","endLine":3,"endColumn":130},{"ruleId":"204","severity":1,"message":"232","line":3,"column":132,"nodeType":"206","messageId":"207","endLine":3,"endColumn":141},{"ruleId":"204","severity":1,"message":"251","line":3,"column":143,"nodeType":"206","messageId":"207","endLine":3,"endColumn":152},{"ruleId":"204","severity":1,"message":"252","line":3,"column":154,"nodeType":"206","messageId":"207","endLine":3,"endColumn":164},{"ruleId":"204","severity":1,"message":"253","line":3,"column":166,"nodeType":"206","messageId":"207","endLine":3,"endColumn":171},{"ruleId":"204","severity":1,"message":"254","line":3,"column":173,"nodeType":"206","messageId":"207","endLine":3,"endColumn":177},{"ruleId":"204","severity":1,"message":"233","line":3,"column":189,"nodeType":"206","messageId":"207","endLine":3,"endColumn":195},{"ruleId":"204","severity":1,"message":"234","line":3,"column":197,"nodeType":"206","messageId":"207","endLine":3,"endColumn":203},{"ruleId":"204","severity":1,"message":"235","line":3,"column":205,"nodeType":"206","messageId":"207","endLine":3,"endColumn":211},{"ruleId":"204","severity":1,"message":"236","line":3,"column":213,"nodeType":"206","messageId":"207","endLine":3,"endColumn":224},{"ruleId":"204","severity":1,"message":"255","line":3,"column":226,"nodeType":"206","messageId":"207","endLine":3,"endColumn":230},{"ruleId":"204","severity":1,"message":"256","line":3,"column":232,"nodeType":"206","messageId":"207","endLine":3,"endColumn":244},{"ruleId":"204","severity":1,"message":"237","line":3,"column":246,"nodeType":"206","messageId":"207","endLine":3,"endColumn":257},{"ruleId":"204","severity":1,"message":"257","line":3,"column":282,"nodeType":"206","messageId":"207","endLine":3,"endColumn":287},{"ruleId":"204","severity":1,"message":"239","line":4,"column":17,"nodeType":"206","messageId":"207","endLine":4,"endColumn":26},{"ruleId":"204","severity":1,"message":"258","line":5,"column":8,"nodeType":"206","messageId":"207","endLine":5,"endColumn":12},{"ruleId":"204","severity":1,"message":"259","line":7,"column":7,"nodeType":"206","messageId":"207","endLine":7,"endColumn":24},{"ruleId":"204","severity":1,"message":"260","line":110,"column":40,"nodeType":"206","messageId":"207","endLine":110,"endColumn":45},{"ruleId":"204","severity":1,"message":"261","line":125,"column":47,"nodeType":"206","messageId":"207","endLine":125,"endColumn":50},{"ruleId":"204","severity":1,"message":"262","line":161,"column":20,"nodeType":"206","messageId":"207","endLine":161,"endColumn":27},{"ruleId":"204","severity":1,"message":"263","line":163,"column":15,"nodeType":"206","messageId":"207","endLine":163,"endColumn":24},{"ruleId":"204","severity":1,"message":"264","line":163,"column":26,"nodeType":"206","messageId":"207","endLine":163,"endColumn":34},{"ruleId":"204","severity":1,"message":"239","line":1,"column":17,"nodeType":"206","messageId":"207","endLine":1,"endColumn":26},{"ruleId":"219","severity":1,"message":"244","line":123,"column":35,"nodeType":"221","messageId":"222","endLine":123,"endColumn":37},{"ruleId":"214","severity":1,"message":"215","line":148,"column":9,"nodeType":"216","messageId":"217","endLine":173,"endColumn":10},{"ruleId":"214","severity":1,"message":"215","line":206,"column":9,"nodeType":"216","messageId":"217","endLine":223,"endColumn":10},{"ruleId":"204","severity":1,"message":"265","line":7,"column":5,"nodeType":"206","messageId":"207","endLine":7,"endColumn":22},{"ruleId":"204","severity":1,"message":"266","line":8,"column":5,"nodeType":"206","messageId":"207","endLine":8,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":58,"column":9,"nodeType":"216","messageId":"217","endLine":79,"endColumn":10},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'Stats' is assigned a value but never used.","'Whisper' is defined but never used.","'Tooltip' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'CatmullRomCurve3' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'BufferGeometry' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Dropdown' is defined but never used.","'Sidebar' is defined but never used.","'Sidenav' is defined but never used.","'Navbar' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'InputNumber' is defined but never used.","'Content' is defined but never used.","'Panel' is defined but never used.","'HelpBlock' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","'Button' is defined but never used.","'FlexboxGrid' is defined but never used.","'FormControl' is defined but never used.","'IconButton' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","no-redeclare","'j' is already defined.","redeclared","'Nav' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'FormGroup' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'Form' is defined but never used.","'ControlLabel' is defined but never used.","'Input' is defined but never used.","'View' is defined but never used.","'TITLE_LEFT_MARGIN' is assigned a value but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'disable' is assigned a value but never used.","'graduated' is defined but never used.","'progress' is defined but never used.","'WireframeGeometry' is defined but never used.","'LineSegments' is defined but never used.","no-global-assign","no-unsafe-negation"]