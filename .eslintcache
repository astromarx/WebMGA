[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/Controller.js":"3","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js":"4","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js":"5","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js":"6","/home/padrino-eduardo/Desktop/webmga/src/Model/ParticleSet.js":"7","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js":"8","/home/padrino-eduardo/Desktop/webmga/src/Model/Grid.js":"9","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js":"10","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js":"11","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js":"12","/home/padrino-eduardo/Desktop/webmga/src/View/View.js":"13"},{"size":198,"mtime":1609107771761,"results":"14","hashOfConfig":"15"},{"size":929,"mtime":1609596111151,"results":"16","hashOfConfig":"15"},{"size":2373,"mtime":1609596111151,"results":"17","hashOfConfig":"15"},{"size":2995,"mtime":1609536671580,"results":"18","hashOfConfig":"15"},{"size":5528,"mtime":1609611527364,"results":"19","hashOfConfig":"15"},{"size":5642,"mtime":1609974600899,"results":"20","hashOfConfig":"15"},{"size":4030,"mtime":1609535004707,"results":"21","hashOfConfig":"15"},{"size":979,"mtime":1609970158993,"results":"22","hashOfConfig":"15"},{"size":1319,"mtime":1609605068031,"results":"23","hashOfConfig":"15"},{"size":17539,"mtime":1609975126407,"results":"24","hashOfConfig":"15"},{"size":23220,"mtime":1609535002230,"results":"25","hashOfConfig":"15"},{"size":6493,"mtime":1609966467239,"results":"26","hashOfConfig":"15"},{"size":1839,"mtime":1609974605087,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1fh0xym",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],["60","61"],"/home/padrino-eduardo/Desktop/webmga/src/App.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Controller.js",["62","63","64","65","66"],"import Model  from \"./Model/Model\";\nimport View from \"./View/View\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport sample from './Samples/sample1.txt';\n\nclass Controller {\n    model;\n    view;\n\n    constructor() {\n        this.model = new Model();\n        this.view = new View(this.model);\n        //this.stats = new Stats();\n    }\n\n    start = () => {\n        this.addListeners();\n        this.loadSample();\n        this.render();\n    }\n\n    getHeader = () => {\n        return this.view.header;\n    }\n\n    getSiderbar = () => {\n        return this.view.sidebar;\n    }\n\n    getDomElement = () => {\n        return this.model.renderer.domElement;\n    }\n\n    render = () => {\n        //this.stats.begin();\n        this.model.update();\n        //this.stats.end();\n        //this.updateFPS();\n        requestAnimationFrame(this.render);\n    }\n\n    loadSample = () => {\n        fetch(sample)\n            .then(res => res.text())\n            .then(configData => {\n                this.model.load(configData);\n            });\n    }\n\n    addListeners = () => {\n\n        document.body.style.overflow = \"hidden\";\n\n        window.addEventListener('resize', () => {\n            this.model.updateDimensions();\n        });\n\n        document.addEventListener('fullscreenchange', () => {\n            this.model.updateDimensions();\n        });\n\n\n        document.body.onkeydown = (e) => {\n            var key = e.keyCode;\n            //spacebar\n            if (key == 32) {\n                this.model.toggleCameraRotation();\n            }\n            //a\n            if (key == 65) {\n                this.model.toggleAxes();\n            }\n            //g\n            if (key == 71) {\n                this.model.toggleGrid();\n            }\n            if (key == 69) {\n                this.view.toggleSidebar();\n            }\n        }\n    }\n\n\n}\n\n\n\nexport default Controller;\n\n\nvar Stats = function () {\n\n    var fps = 10;\n    var frames = 0;\n    var prevTime;\n  \n    return {\n      getFPS: function () {\n        return fps;\n      },\n      begin: function () {\n        prevTime = Date.now();\n      },\n      end: function () {\n        frames++;\n        var time = Date.now();\n  \n        if (time > prevTime + 1000) {\n          fps = (frames * 1000) / (time - prevTime);\n          prevTime = time;\n          frames = 0;\n          console.log(fps);\n        }\n      },\n  \n    };\n  \n  };\n  \n  ","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/Side.js",["67","68","69","70","71"],"\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, VisualElementsOptions, SlicingOptions, ModelsOptions } from './SubMenus'\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{ backgroundColor: '#101010' }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Visual Elements</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Visual Elements\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            <Nav.Item panel style={{ height: 800 }} />\n        </Nav>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Visual Elements\":\n                menuContent.push(<VisualElementsOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js",["72","73","74"],"/home/padrino-eduardo/Desktop/webmga/src/Model/ParticleSet.js",["75","76","77","78"],"import {Mesh,\n    MeshLambertMaterial,\n    Vector3,\n    Quaternion,\n    Euler\n    } from 'three';\nimport * as SHAPE from './Shapes.js';\n\nexport class ParticleSet{\n    name;\n    shape;\n    shapeType;\n    display;\n    material;\n    parameters;\n    colour;\n    orientationType;\n\n    particles = []\n    meshes = [];\n\n    constructor(n, ot, d){\n        this.name = n;\n        this.orientationType = ot;\n        this.setDefaults();\n        this.genParticles(d);\n        this.genMeshes();\n    }\n\n    genMeshes(){\n        let m;\n        for(let p of this.particles){\n            for(let g of p.geometries){\n                m = new Mesh(g, this.material);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    genParticles(particles){\n\n        let position, orientation, attributes, euler, nP;\n        let geoms = [], temp = [];\n\n        let i = 1;\n        for(let p of particles){\n            attributes = p.split(\" \");\n\n            for(let a of attributes){\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7){break;}\n            \n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n\n            // console.log(i);\n            // i++;\n            // console.log('attributes');\n            // console.log(attributes);\n\n            geoms.push(this.shape.stripGeometry.clone());\n            geoms.push(this.shape.fanGeometries[0].clone());\n            geoms.push(this.shape.fanGeometries[1].clone());\n            \n            this.translate(position, geoms);\n            this.rotate(euler, geoms);\n\n            nP = new this.Particle(geoms);\n            this.particles.push(nP);\n\n            geoms = [];\n\n        }\n    }\n\n    setDefaults(){\n        this.shapeType = 'ellipsoid';\n        this.display = 'model';\n        this.colour =  0xF7F7F7;\n        this.material = new MeshLambertMaterial({color: this.colour});\n        this.parameters = (2, 3);\n        this.genGeometries();\n    }\n\n    genGeometries(){\n        switch(this.shapeType){\n            case 'ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(0.5, 0.3, 0.7);\n                break;\n            case 'spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(0.5,8);\n                break;\n            case 'spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(0.5,0.7);\n                break;\n            case 'cutsphere':\n                this.shape = new SHAPE.CutSphere(this.parameters);\n                break;\n            case 'sphere':\n                this.shape = new SHAPE.CutSphere(this.parameters, this.parameters);\n                break;\n        }\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    getRotations(type, rot){\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type){\n            case 'v':\n                let defaultVector = new Vector3(0,0,1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n        \n    }\n\n    Particle = class Particle{\n        geometries;\n        constructor(g){\n            this.geometries = g;\n        }\n\n    }\n}\n\nexport default ParticleSet;","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js",["79"],"import {\n    AmbientLight,\n    DirectionalLight,\n    PointLight\n} from 'three';\n\nexport class Light {\n    light;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n    constructor(lightType) {\n        this.setDefaultLights(lightType);\n    }\n\n    update(c, i){\n        //console.log();\n\n        this.light.color.setHex(parseInt(c.substring(1), 16));\n        this.light.intensity = i * 0.01;\n    }\n\n    setDefaultLights(lightType) {\n        switch (lightType) {\n            case 'ambient':\n                this.light = new AmbientLight(\"#0ff0ff\", 0.4);\n                break;\n            case 'directional':\n                this.light = new DirectionalLight(\"#ffff00\", 0.5);\n                break;\n            case 'point':\n                this.light = new PointLight(\"#ffffff\", 0.6);\n                this.light.position.set(5, 0, 2);\n                break;\n        }\n    }\n}\n\nexport default Light;","/home/padrino-eduardo/Desktop/webmga/src/Model/Grid.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    maxComplexity = [20, 20];\n    minComplexity = [5, 5]\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n\n    constructor() {\n        this.args = arguments[0];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n    translate(x, y, z) {\n        for (let f of this.fanGeometries) {\n            f.translate(x, y, z);\n        }\n        this.stripGeometry.translate(x, y, z);\n    }\n\n    rotate(e) {\n        for (let f of this.fanGeometries) {\n            f.rotateX(e.x);\n        }\n        this.stripGeometry.rotateX(e.x);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.y);\n        }\n        this.stripGeometry.rotateY(e.y);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.z);\n        }\n        this.stripGeometry.rotateY(e.z);\n    }\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"/home/padrino-eduardo/Desktop/webmga/src/View/View.js",["171"],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":53,"column":21,"nodeType":"178","messageId":"179","endLine":53,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":57,"column":21,"nodeType":"178","messageId":"179","endLine":57,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":61,"column":21,"nodeType":"178","messageId":"179","endLine":61,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":64,"column":21,"nodeType":"178","messageId":"179","endLine":64,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":78,"column":5,"nodeType":"182","messageId":"183","endLine":78,"endColumn":10},{"ruleId":"180","severity":1,"message":"184","line":2,"column":19,"nodeType":"182","messageId":"183","endLine":2,"endColumn":26},{"ruleId":"180","severity":1,"message":"185","line":2,"column":28,"nodeType":"182","messageId":"183","endLine":2,"endColumn":35},{"ruleId":"180","severity":1,"message":"186","line":2,"column":48,"nodeType":"182","messageId":"183","endLine":2,"endColumn":51},{"ruleId":"180","severity":1,"message":"187","line":2,"column":53,"nodeType":"182","messageId":"183","endLine":2,"endColumn":56},{"ruleId":"188","severity":1,"message":"189","line":74,"column":9,"nodeType":"190","messageId":"191","endLine":93,"endColumn":10},{"ruleId":"180","severity":1,"message":"192","line":5,"column":5,"nodeType":"182","messageId":"183","endLine":5,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":184,"column":31,"nodeType":"178","messageId":"179","endLine":184,"endColumn":33},{"ruleId":"176","severity":1,"message":"177","line":202,"column":29,"nodeType":"178","messageId":"179","endLine":202,"endColumn":31},{"ruleId":"180","severity":1,"message":"193","line":45,"column":13,"nodeType":"182","messageId":"183","endLine":45,"endColumn":14},{"ruleId":"176","severity":1,"message":"194","line":57,"column":35,"nodeType":"178","messageId":"179","endLine":57,"endColumn":37},{"ruleId":"188","severity":1,"message":"189","line":94,"column":9,"nodeType":"190","messageId":"191","endLine":110,"endColumn":10},{"ruleId":"188","severity":1,"message":"189","line":131,"column":9,"nodeType":"190","messageId":"191","endLine":148,"endColumn":10},{"ruleId":"188","severity":1,"message":"189","line":26,"column":9,"nodeType":"190","messageId":"191","endLine":37,"endColumn":10},{"ruleId":"180","severity":1,"message":"195","line":2,"column":10,"nodeType":"182","messageId":"183","endLine":2,"endColumn":18},{"ruleId":"180","severity":1,"message":"196","line":2,"column":20,"nodeType":"182","messageId":"183","endLine":2,"endColumn":27},{"ruleId":"180","severity":1,"message":"197","line":2,"column":29,"nodeType":"182","messageId":"183","endLine":2,"endColumn":36},{"ruleId":"180","severity":1,"message":"198","line":2,"column":49,"nodeType":"182","messageId":"183","endLine":2,"endColumn":55},{"ruleId":"180","severity":1,"message":"199","line":2,"column":57,"nodeType":"182","messageId":"183","endLine":2,"endColumn":68},{"ruleId":"180","severity":1,"message":"200","line":2,"column":97,"nodeType":"182","messageId":"183","endLine":2,"endColumn":106},{"ruleId":"180","severity":1,"message":"201","line":2,"column":118,"nodeType":"182","messageId":"183","endLine":2,"endColumn":129},{"ruleId":"180","severity":1,"message":"202","line":2,"column":131,"nodeType":"182","messageId":"183","endLine":2,"endColumn":138},{"ruleId":"180","severity":1,"message":"203","line":2,"column":140,"nodeType":"182","messageId":"183","endLine":2,"endColumn":145},{"ruleId":"180","severity":1,"message":"204","line":2,"column":147,"nodeType":"182","messageId":"183","endLine":2,"endColumn":156},{"ruleId":"180","severity":1,"message":"205","line":2,"column":204,"nodeType":"182","messageId":"183","endLine":2,"endColumn":210},{"ruleId":"180","severity":1,"message":"206","line":2,"column":212,"nodeType":"182","messageId":"183","endLine":2,"endColumn":218},{"ruleId":"180","severity":1,"message":"207","line":2,"column":220,"nodeType":"182","messageId":"183","endLine":2,"endColumn":226},{"ruleId":"180","severity":1,"message":"208","line":2,"column":228,"nodeType":"182","messageId":"183","endLine":2,"endColumn":239},{"ruleId":"180","severity":1,"message":"209","line":2,"column":261,"nodeType":"182","messageId":"183","endLine":2,"endColumn":272},{"ruleId":"180","severity":1,"message":"210","line":2,"column":282,"nodeType":"182","messageId":"183","endLine":2,"endColumn":292},{"ruleId":"180","severity":1,"message":"211","line":3,"column":17,"nodeType":"182","messageId":"183","endLine":3,"endColumn":26},{"ruleId":"180","severity":1,"message":"212","line":3,"column":28,"nodeType":"182","messageId":"183","endLine":3,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":166,"column":54,"nodeType":"178","messageId":"179","endLine":166,"endColumn":56},{"ruleId":"176","severity":1,"message":"177","line":182,"column":54,"nodeType":"178","messageId":"179","endLine":182,"endColumn":56},{"ruleId":"176","severity":1,"message":"177","line":215,"column":54,"nodeType":"178","messageId":"179","endLine":215,"endColumn":56},{"ruleId":"188","severity":1,"message":"189","line":226,"column":9,"nodeType":"190","messageId":"191","endLine":236,"endColumn":10},{"ruleId":"176","severity":1,"message":"177","line":238,"column":54,"nodeType":"178","messageId":"179","endLine":238,"endColumn":56},{"ruleId":"188","severity":1,"message":"189","line":299,"column":9,"nodeType":"190","messageId":"191","endLine":312,"endColumn":10},{"ruleId":"188","severity":1,"message":"189","line":319,"column":9,"nodeType":"190","messageId":"191","endLine":329,"endColumn":10},{"ruleId":"188","severity":1,"message":"189","line":374,"column":9,"nodeType":"190","messageId":"191","endLine":384,"endColumn":10},{"ruleId":"176","severity":1,"message":"194","line":30,"column":19,"nodeType":"178","messageId":"179","endLine":30,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":73,"column":41,"nodeType":"178","messageId":"179","endLine":73,"endColumn":43},{"ruleId":"176","severity":1,"message":"177","line":117,"column":27,"nodeType":"178","messageId":"179","endLine":117,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":117,"column":37,"nodeType":"178","messageId":"179","endLine":117,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":132,"column":27,"nodeType":"178","messageId":"179","endLine":132,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":132,"column":37,"nodeType":"178","messageId":"179","endLine":132,"endColumn":39},{"ruleId":"213","severity":1,"message":"214","line":166,"column":18,"nodeType":"182","messageId":"215","endLine":166,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":167,"column":19,"nodeType":"178","messageId":"179","endLine":167,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":167,"column":29,"nodeType":"178","messageId":"179","endLine":167,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":195,"column":18,"nodeType":"182","messageId":"215","endLine":195,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":196,"column":19,"nodeType":"178","messageId":"179","endLine":196,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":196,"column":29,"nodeType":"178","messageId":"179","endLine":196,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":248,"column":27,"nodeType":"178","messageId":"179","endLine":248,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":248,"column":37,"nodeType":"178","messageId":"179","endLine":248,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":263,"column":27,"nodeType":"178","messageId":"179","endLine":263,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":263,"column":37,"nodeType":"178","messageId":"179","endLine":263,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":288,"column":27,"nodeType":"178","messageId":"179","endLine":288,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":288,"column":37,"nodeType":"178","messageId":"179","endLine":288,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":303,"column":27,"nodeType":"178","messageId":"179","endLine":303,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":303,"column":37,"nodeType":"178","messageId":"179","endLine":303,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":327,"column":23,"nodeType":"178","messageId":"179","endLine":327,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":327,"column":33,"nodeType":"178","messageId":"179","endLine":327,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":362,"column":23,"nodeType":"178","messageId":"179","endLine":362,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":362,"column":33,"nodeType":"178","messageId":"179","endLine":362,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":392,"column":23,"nodeType":"178","messageId":"179","endLine":392,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":392,"column":33,"nodeType":"178","messageId":"179","endLine":392,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":450,"column":27,"nodeType":"178","messageId":"179","endLine":450,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":450,"column":37,"nodeType":"178","messageId":"179","endLine":450,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":462,"column":27,"nodeType":"178","messageId":"179","endLine":462,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":462,"column":37,"nodeType":"178","messageId":"179","endLine":462,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":474,"column":27,"nodeType":"178","messageId":"179","endLine":474,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":474,"column":37,"nodeType":"178","messageId":"179","endLine":474,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":486,"column":27,"nodeType":"178","messageId":"179","endLine":486,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":486,"column":37,"nodeType":"178","messageId":"179","endLine":486,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":516,"column":23,"nodeType":"178","messageId":"179","endLine":516,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":516,"column":33,"nodeType":"178","messageId":"179","endLine":516,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":545,"column":23,"nodeType":"178","messageId":"179","endLine":545,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":545,"column":33,"nodeType":"178","messageId":"179","endLine":545,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":600,"column":27,"nodeType":"178","messageId":"179","endLine":600,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":600,"column":37,"nodeType":"178","messageId":"179","endLine":600,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":615,"column":27,"nodeType":"178","messageId":"179","endLine":615,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":615,"column":37,"nodeType":"178","messageId":"179","endLine":615,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":647,"column":23,"nodeType":"178","messageId":"179","endLine":647,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":647,"column":33,"nodeType":"178","messageId":"179","endLine":647,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":678,"column":23,"nodeType":"178","messageId":"179","endLine":678,"endColumn":25},{"ruleId":"176","severity":1,"message":"177","line":678,"column":33,"nodeType":"178","messageId":"179","endLine":678,"endColumn":35},{"ruleId":"180","severity":1,"message":"196","line":3,"column":45,"nodeType":"182","messageId":"183","endLine":3,"endColumn":52},{"ruleId":"180","severity":1,"message":"197","line":3,"column":54,"nodeType":"182","messageId":"183","endLine":3,"endColumn":61},{"ruleId":"180","severity":1,"message":"216","line":3,"column":63,"nodeType":"182","messageId":"183","endLine":3,"endColumn":66},{"ruleId":"180","severity":1,"message":"217","line":3,"column":68,"nodeType":"182","messageId":"183","endLine":3,"endColumn":72},{"ruleId":"180","severity":1,"message":"198","line":3,"column":74,"nodeType":"182","messageId":"183","endLine":3,"endColumn":80},{"ruleId":"180","severity":1,"message":"200","line":3,"column":82,"nodeType":"182","messageId":"183","endLine":3,"endColumn":91},{"ruleId":"180","severity":1,"message":"218","line":3,"column":93,"nodeType":"182","messageId":"183","endLine":3,"endColumn":101},{"ruleId":"180","severity":1,"message":"202","line":3,"column":116,"nodeType":"182","messageId":"183","endLine":3,"endColumn":123},{"ruleId":"180","severity":1,"message":"204","line":3,"column":132,"nodeType":"182","messageId":"183","endLine":3,"endColumn":141},{"ruleId":"180","severity":1,"message":"219","line":3,"column":154,"nodeType":"182","messageId":"183","endLine":3,"endColumn":164},{"ruleId":"180","severity":1,"message":"220","line":3,"column":166,"nodeType":"182","messageId":"183","endLine":3,"endColumn":171},{"ruleId":"180","severity":1,"message":"221","line":3,"column":173,"nodeType":"182","messageId":"183","endLine":3,"endColumn":177},{"ruleId":"180","severity":1,"message":"205","line":3,"column":189,"nodeType":"182","messageId":"183","endLine":3,"endColumn":195},{"ruleId":"180","severity":1,"message":"206","line":3,"column":197,"nodeType":"182","messageId":"183","endLine":3,"endColumn":203},{"ruleId":"180","severity":1,"message":"207","line":3,"column":205,"nodeType":"182","messageId":"183","endLine":3,"endColumn":211},{"ruleId":"180","severity":1,"message":"211","line":4,"column":17,"nodeType":"182","messageId":"183","endLine":4,"endColumn":26},{"ruleId":"180","severity":1,"message":"222","line":93,"column":40,"nodeType":"182","messageId":"183","endLine":93,"endColumn":45},{"ruleId":"180","severity":1,"message":"223","line":106,"column":47,"nodeType":"182","messageId":"183","endLine":106,"endColumn":50},{"ruleId":"180","severity":1,"message":"224","line":139,"column":20,"nodeType":"182","messageId":"183","endLine":139,"endColumn":27},{"ruleId":"180","severity":1,"message":"211","line":1,"column":17,"nodeType":"182","messageId":"183","endLine":1,"endColumn":26},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Stats' is assigned a value but never used.","Identifier","unusedVar","'Whisper' is defined but never used.","'Tooltip' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'OrthographicCamera' is defined but never used.","'i' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Dropdown' is defined but never used.","'Sidebar' is defined but never used.","'Sidenav' is defined but never used.","'Navbar' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'InputNumber' is defined but never used.","'Content' is defined but never used.","'Panel' is defined but never used.","'HelpBlock' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","'Button' is defined but never used.","'FlexboxGrid' is defined but never used.","'FormControl' is defined but never used.","'IconButton' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","no-redeclare","'j' is already defined.","redeclared","'Nav' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'disable' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]