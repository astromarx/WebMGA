[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/Controller.js":"3","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js":"4","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js":"5","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js":"6","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js":"7","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js":"8","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js":"9","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js":"10","/home/padrino-eduardo/Desktop/webmga/src/View/View.js":"11","/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js":"12","/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js":"13","/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js":"14"},{"size":198,"mtime":1609107771761,"results":"15","hashOfConfig":"16"},{"size":928,"mtime":1615571603864,"results":"17","hashOfConfig":"16"},{"size":8499,"mtime":1616629986673,"results":"18","hashOfConfig":"16"},{"size":11176,"mtime":1616614653827,"results":"19","hashOfConfig":"16"},{"size":6049,"mtime":1616607619609,"results":"20","hashOfConfig":"16"},{"size":12912,"mtime":1616633745406,"results":"21","hashOfConfig":"16"},{"size":1375,"mtime":1615937179706,"results":"22","hashOfConfig":"16"},{"size":31803,"mtime":1616627890763,"results":"23","hashOfConfig":"16"},{"size":23961,"mtime":1615568308370,"results":"24","hashOfConfig":"16"},{"size":6291,"mtime":1615495857203,"results":"25","hashOfConfig":"16"},{"size":6547,"mtime":1616633018276,"results":"26","hashOfConfig":"16"},{"size":11913,"mtime":1616633745394,"results":"27","hashOfConfig":"16"},{"size":655,"mtime":1615574359931,"results":"28","hashOfConfig":"16"},{"size":4837,"mtime":1616606101669,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fh0xym",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],["61","62"],"/home/padrino-eduardo/Desktop/webmga/src/App.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Controller.js",["63"],"/home/padrino-eduardo/Desktop/webmga/src/View/Top.js",["64","65","66","67"],"\nimport { Header, Dropdown, FormGroup, Drawer, Nav, Navbar, Icon, Button, ButtonToolbar, Slider, Form, ControlLabel, Whisper, Tooltip, Divider } from 'rsuite';\nimport { ParameterSet } from './Tools';\nimport React from \"react\";\nimport View from './View';\nimport { render } from '@testing-library/react';\n\nclass ExportDropdown extends React.Component {\n\n    constructor(props) {\n        super();\n        this.dimensions = [1000, 1000];\n        this.f = props.f;\n        this.updateDimensions = this.updateDimensions.bind(this);\n        this.export = this.export.bind(this);\n    }\n\n    updateDimensions(val, index) {\n        this.dimensions[index] = parseInt(val);\n    }\n\n    export() {\n        this.f(...this.dimensions);\n    }\n\n    render() {\n        return (\n            <Dropdown title=\"Export\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"export\" />} >\n\n                <ParameterSet f={this.updateDimensions} titles={['Height', 'Width']} values={this.dimensions} step={5} positive\n                    styling={[\n                        { marginRight: 25 },\n                        { marginTop: 18, marginLeft: 35 }\n                    ]} />\n\n                <Button style={{ width: 180, marginLeft: 25, marginRight: 25, marginTop: 15, marginBottom: 15 }} appearance='primary' onClick={this.export}> Export </Button>\n            </Dropdown>);\n    }\n\n};\n\nclass SamplesDropdown extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.state = { active: 2 };\n        this.f = props.f;\n\n        this.updateKey = this.updateKey.bind(this);\n    }\n\n    updateKey(val) {\n        this.setState({\n            active: val\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (\n            <Dropdown \n            title=\"Library\"\n            trigger='click'\n            placement=\"bottomEnd\"\n            icon={<Icon icon=\"database\" />}\n            appearance='subtle'\n            onSelect={(eventKey) => {\n                this.f(eventKey);\n\n            }}>\n                <Dropdown.Menu title=\"Samples\">\n                    <Dropdown.Item eventKey={1}>Unit Vector Orientations</Dropdown.Item>\n                    <Dropdown.Item eventKey={2}>Quaternion Orientations</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Spherocylinders\">\n                    <Dropdown.Item eventKey={3}>SC4 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={4}>SC4 Nematic</Dropdown.Item>\n                    <Dropdown.Item eventKey={5}>SC4 Smectic</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Prolate and Oblate Ellipsoids\">\n                    <Dropdown.Item eventKey={6}>E5 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={7}>E5 Nematic</Dropdown.Item>\n                    <Dropdown.Item eventKey={8}>O5 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={9}>O5 Nematic</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Dense Crystal Packings\">\n                    <Dropdown.Item eventKey={10}>Box Crystal (Small)</Dropdown.Item>\n                    <Dropdown.Item eventKey={11}>Box Crystal (Large)</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Other\">\n                    <Dropdown.Item eventKey={12}>Fig1</Dropdown.Item>\n                    <Dropdown.Item eventKey={13}>HBC</Dropdown.Item>\n                </Dropdown.Menu>\n                \n                <Dropdown.Item panel style={{ padding: 5, width: 120 }}></Dropdown.Item>\n\n\n            </Dropdown>\n        );\n\n    }\n}\n\nclass PerformanceDropdown extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.state = { val: props.model.lod + 1 };\n\n        this.updateVal = this.updateVal.bind(this);\n    }\n\n    updateVal(val) {\n        this.setState({\n            val: val\n        });\n    }\n\n    render() {\n        const lod = this.state.val;\n        return (\n            <Dropdown title=\"Performance\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"dashboard\" />}>\n                <Form style={{ marginLeft: 20, marginTop: 20 }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"bottom\" trigger=\"hover\" speaker={\n                            <Tooltip>\n                                Decreasing LOD will increase rendering speed.\n                            </Tooltip>\n                        }>\n                            <Icon icon=\"question-circle\" size=\"lg\" />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n                    min={1}\n                    step={1}\n                    max={5}\n                    value={lod}\n                    graduated\n                    progress\n                    style={{ width: 200, marginLeft: 30, marginRight: 30, marginBottom: 20 }}\n                    onChange={(value) => {\n                        this.model.updateLOD(value - 1);\n                        this.updateVal(value);\n                        this.model.update();\n                    }}\n\n                />\n                <br />\n            </Dropdown>\n        );\n    }\n\n}\n\nclass Top extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.functions = props.functions;\n        this.toggler = props.toggler;\n        this.state = { fps: 0, showDrawer: false, rotating: false };\n        this.updateFPS = this.updateFPS.bind(this);\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n\n        this.chronometer = props.chronometer;\n        this.chronometer.f = this.updateFPS;\n\n        this.toggler.autorotate = () => {\n            this.toggleAutorotate();\n        }\n    }\n\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        this.model.toggleAutorotate();\n        if (this.model.rotating) {\n            this.toggler.closeSidemenu();\n        }\n        this.continuousRender();\n    }\n\n    continuousRender = () => {\n        this.model.update();\n        this.chronometer.click();\n        this.model.controls.update();\n        if (this.model.rotating) {\n            requestAnimationFrame(this.continuousRender);\n        }\n    }\n\n    toggleDrawer() {\n        this.setState({\n            showDrawer: !this.state.showDrawer\n        });\n    }\n\n    updateFPS(fps) {\n        this.setState({\n            fps: fps.toFixed(2)\n        });\n    }\n\n    render() {\n        const fps = this.state.fps;\n        const showDrawer = this.state.showDrawer;\n        const rotating = this.state.rotating;\n        return (\n            <div>\n                <Header style={{ height: 56 }}>\n                    <Navbar>\n                        <Navbar.Body>\n                            <Nav pullRight >\n                                <ButtonToolbar>\n                                    <Nav.Item active>fps: {fps}</Nav.Item>\n                                    <Nav.Item active={rotating} onClick={this.toggleAutorotate} appearance=\"subtle\" icon={<Icon icon=\"refresh\" />}>Autorotate</Nav.Item>\n                                    <Nav.Item appearance=\"subtle\" disabled={true} icon={<Icon icon=\"info-circle\" />}>Manual</Nav.Item>\n                                    <Nav.Item onClick={this.toggleDrawer} appearance=\"subtle\" icon={<Icon icon=\"book\" />}>Notes</Nav.Item>\n                                    <PerformanceDropdown model={this.model} />\n                                    <SamplesDropdown f={this.functions[3]} />\n\n                                    <ExportDropdown f={this.functions[2]} />\n                                    <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"file-download\" />} onSelect={this.functions[0]}>Save</Nav.Item>\n                                    <input type=\"file\"\n                                        id=\"upload-btn\"\n                                        style={{ display: 'none' }}\n                                        className='input-file'\n                                        accept='.json,.webmga'\n                                        onChange={e => this.functions[1](e.target.files[0])} />\n                                    <label for=\"upload-btn\">\n                                        <Nav.Item icon={<Icon icon=\"file-upload\" />}>Upload</Nav.Item>\n                                    </label>\n\n                                </ButtonToolbar>\n\n                            </Nav>\n                            <Nav pullLeft>\n                                <h6 style={{ padding: 20 }}> WebMGA</h6>\n                            </Nav>\n                        </Navbar.Body>\n                    </Navbar>\n                </Header>\n                <Drawer\n                    size={'xs'}\n                    placement={'right'}\n                    show={showDrawer}\n                    onHide={this.toggleDrawer}\n                    backdrop={false}\n                >\n                    <Drawer.Header>\n                        <Drawer.Title>Information About System</Drawer.Title>\n                    </Drawer.Header>\n                    <Drawer.Body>\n                        Coarse-grained modeling of molecular fluids is often based on non-spherical convex rigid bodies like ellipsoids or spherocylinders representing rodlike or platelike molecules or groups of atoms, with site-site interaction potentials depending both on the distance among the particles and the relative orientation. In this category of potentials, the Gay-Berne family has been studied most extensively.<br /><br />\n                     However, conventional molecular graphics programs are not designed to visualize such objects. Usually the basic units are atoms displayed as spheres, or as vertices in a graph. Atomic aggregates can be highlighted through an increasing amount of stylized representations, e.g., Richardson ribbon diagrams for the secondary structure of a protein, Connolly molecular surfaces, density maps, etc., but ellipsoids\n                     and spherocylinders are generally missing, especially as elementary simulation units. <br /><br /> We fill this gap providing and discussing a customized OpenGL-based program for the interactive, rendered representation of large ensembles of convex bodies, useful especially in liquid crystal research. We pay particular attention to the performance issues for typical system sizes in this feld. The code is distributed as open source.\n                    <br /><br />\n                        <a href=\"http://qmga.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">QMGA Homepage</a>\n                        <br /><br />\n                        <a href=\"https://pubs.acs.org/doi/10.1021/ct700192z\" target=\"_blank\" rel=\"noopener noreferrer\">DOI 10.1021/ct700192z</a>\n                    </Drawer.Body>\n                </Drawer>\n            </div>\n        );\n    }\n};\n\nexport default Top;","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js",["68","69","70"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js",["71","72","73","74","75"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/View.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js",["76","77","78","79","80","81","82","83","84","85","86","87"],"import {\n    Mesh,\n    MeshLambertMaterial,\n    Vector3,\n    Quaternion,\n    Euler,\n    Color,\n    DoubleSide,\n\n} from 'three';\nimport {eigs} from 'mathjs';\nimport * as SHAPE from './Shapes.js';\nimport Model from './Model';\nimport Parameters from './Parameters';\nimport { Alert } from 'rsuite';\nimport colourMap from './ColourMap.json';\n\nexport class Set {\n    name;\n    shapeType;\n    parameters;\n    shape;\n    orientationType;\n    wireframe;\n    userColour;\n    colourByDirector;\n    lod;\n    clippingPlanes;\n    clipIntersection;\n    colourMap;\n\n    positions = [];\n    orientations = [];\n    elements = []\n    meshes = [];\n\n    constructor(data, cp, ci) {\n        this.name = data.name;\n        this.orientationType = data.orientationType;\n        this.positions = data.positions;\n        this.orientations = data.orientations;\n        this.clippingPlanes = cp;\n        this.clipIntersection = ci;\n\n        this.setDefaults();\n\n        if (data.shapeType != null) {\n            this.shapeType = data.shapeType;\n        }\n        if (data.parameters != null) {\n            this.shapeType = data.parameters;\n        }\n        if (this.name == null) {\n            this.name = this.shapeType;\n        }\n\n        this.validateData();\n        this.genGeometries();\n        this.genElements();\n        this.setElements();\n        this.genMeshes();\n    }\n\n    //deprecated\n    // constructor(name, orientationType, data, cp, ci) {\n    //     this.name = name;\n    //     this.orientationType = orientationType;\n\n    //     this.clippingPlanes = cp;\n    //     this.clipIntersection = ci;\n\n    //     this.setDefaults();\n    //     this.genGeometries();\n    //     this.genElementsDeprecated(data);\n    //     this.setElements();\n    //     this.genMeshes();\n\n    // }\n\n    validateData() {\n        if (this.positions.length !== this.orientations.length) {\n            throw 'Error: Position data does not correspond to orientation data. \\n Total positions: ' + this.positions.length + '\\n Total rotations: ' + this.orientations.length;\n        }\n\n        for (let p in this.parameters) {\n            if (p < 0) {\n                throw 'Error: Invalid parameter ' + p.toString() + ' for ' + this.name + '\\n Must be positive.';\n            }\n        }\n\n        let defaultParameters = Set.getParameters(this.shapeType);\n        if (this.parameters.length != defaultParameters.vals.length) {\n            throw 'Error: Wrong number of parameters specified for ' + this.name + '. \\n Required: ' + defaultParameters.names;\n        }\n    }\n\n    setDefaults() {\n        this.userColour = new Color(\"#FFFFFF\");\n        this.colourByDirector = true;\n        this.wireframe = true;\n        this.lod = 1;\n        this.shapeType = 'Ellipsoid';\n        this.parameters = Parameters.Ellipsoid.vals;\n    }\n\n    updateSlicers(i, vals) {\n        this.clippingPlanes[2 * i + 1].constant = vals[1];\n        this.clippingPlanes[2 * i].constant = -vals[0];\n    }\n\n    toggleClipIntersection(toggle) {\n        this.clipIntersection = toggle;\n        for (let mesh of this.meshes) {\n            mesh.material.clipIntersection = toggle;\n        }\n    }\n\n    genMeshes() {\n        let m;\n        let c;\n        let mat;\n\n        for (let elem of this.elements) {\n            if (this.colourByDirector) {\n                let rgb = colourMap.values[elem.colourIndex];\n                c = new Color(Model.rgbToHex(...rgb));\n            } else {\n                c = this.userColour;\n            }\n\n            mat = new MeshLambertMaterial({\n                color: c,\n                clippingPlanes: this.clippingPlanes,\n                clipIntersection: this.clipIntersection\n            });\n            mat.wireframe = this.wireframe;\n\n            for (let g of elem.geometries) {\n                m = new Mesh(g, mat);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    setElements() {\n        let geoms = [];\n\n        for (let elem of this.elements) {\n            if (this.shape.isPreset) {\n                geoms.push(this.shape.presetGeometry.clone());\n            }\n            else {\n                geoms.push(this.shape.stripGeometry.clone());\n                geoms.push(this.shape.fanGeometries[0].clone());\n                geoms.push(this.shape.fanGeometries[1].clone());\n            }\n\n            this.rotate(elem.euler, geoms);\n            this.translate(elem.position, geoms);\n            \n            elem.setGeometries(geoms);\n\n            geoms = [];\n        }\n    }\n\n    genElements() {\n        for (let i = 0; i < this.positions.length; i++) {\n            this.elements.push(new this.Element(this.positions[i], this.getRotations(this.orientationType, this.orientations[i])));\n        }\n        this.calculateDirector();\n        for(let elem of this.elements){\n            elem.setColourIndex(this.calculateColourIndex(elem));\n        }\n    }\n\n    genElementsDeprecated(elements) {\n        let position, orientation, attributes, euler, nP;\n        let temp = [], colour = [];\n\n        for (let elem of elements) {\n\n            if (elem === \"\") {\n                return;\n            }\n\n            attributes = elem.split(\" \");\n\n            for (let a of attributes) {\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n\n            if (attributes.length !== 6) { break; }\n\n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            console.log(position);\n            console.log(orientation);\n\n            this.positions.push(position);\n            this.orientations.push(orientation);\n\n            euler = this.getRotations(this.orientationType, orientation);\n            colour = this.colourFromOrientation(euler);\n\n            nP = new this.Element(colour, position, euler);\n            this.elements.push(nP);\n        }\n    }\n\n    genGeometries() {\n        switch (this.shapeType) {\n            case 'Ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(...this.parameters);\n                break;\n            case 'Spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(...this.parameters);\n                break;\n            case 'Spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(...this.parameters);\n                break;\n            case 'Cut Sphere':\n                this.shape = new SHAPE.CutSphere(...this.parameters);\n                break;\n            case 'Sphere':\n                this.shape = new SHAPE.Preset('Sphere', this.parameters);\n                break;\n            case 'Cylinder':\n                this.shape = new SHAPE.Preset('Cylinder', this.parameters);\n                break;\n            case 'Torus':\n                this.shape = new SHAPE.Preset('Torus', this.parameters);\n                break;\n            default:\n                throw 'Error: unexpected shape identifier. \\n Found: ' + this.shapeType;\n        }\n\n        this.shape.LOD = this.lod;\n        this.shape.generate();\n    }\n\n    translate(pos, geoms) {\n        console.log(pos);\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    getRotations(type, rot) {\n        let q = new Quaternion();\n        switch (type) {\n            case 'v':\n                let defaultVector = new Vector3(0, 0, 1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                break;\n            case 'q':\n                q.set(rot[1], rot[2], rot[3], rot[0]);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                break;\n            case 'e':\n                let e = new Euler();\n                e.fromArray(rot);\n                q.setFromEuler(e)\n                break;\n            default:\n                throw 'Error: Unexpected rotation type value. \\n Found: ' + type + '\\n Expected: v | q | a | e';\n        }\n\n        return q;\n\n    }\n\n    colourFromOrientation(euler) {\n        let colour = [];\n\n        colour.push(Math.round((euler._x + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._y + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._z + Math.PI) / (2 * Math.PI) * (255)));\n\n        return colour;\n    }\n\n    calculateDirector() {\n        let n = this.elements.length;\n\n        if (this.elements.length == 0) {\n            Alert.error('Error: No elements in set, director calculation failed.');\n            return;\n        }\n\n        let orderTensor = [[0,0,0],[0,0,0],[0,0,0]];\n        //let eigenvectorsInColumns = new Matrix3();\n\n        let factor = 3 / (2 * n);\n        let constant = 0.5;\n\n        let orientation;\n\n        // loop over all molecules and calculate order tensor\n        for (let i = 0; i < n; ++i) {\n            orientation = this.elements[i].orientation;\n            orderTensor[0][0] += orientation[0]**2;\n            orderTensor[0][1] += orientation[0]*orientation[1];\n            orderTensor[0][2] += orientation[0]*orientation[2];\n            orderTensor[1][1] += orientation[1]**2;\n            orderTensor[1][2] += orientation[1]*orientation[2];\n            orderTensor[2][2] += orientation[2]**2;\n        }\n\n        // multiply each tensor value with \"factor\" and afterwards subtract \"subtract\" from diagonal elements\n        orderTensor[0][0] *= factor; orderTensor[0][0] -= constant;\n        orderTensor[0][1] *= factor;\n        orderTensor[0][2] *= factor;\n        orderTensor[1][1] *= factor; orderTensor[1][1] -= constant;\n        orderTensor[1][2] *= factor;\n        orderTensor[2][2] *= factor; orderTensor[2][2] -= constant;\n\n        // mirror matrix to make it symmetric\n        orderTensor[1][0] = orderTensor[0][1];\n        orderTensor[2][0] = orderTensor[0][2];\n        orderTensor[2][1] = orderTensor[1][2];\n\n        let eigen = eigs(orderTensor);\n        \n        //returns index of max eigenvalue\n        let index = eigen.values.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\n\n        this.director = eigen.vectors[index];\n\n        let norm = Math.sqrt(this.director[0]**2 + this.director[1]**2 + this.director[2]**2);\n\n        if (norm == 0 || norm == NaN || norm == undefined){\n            this.director = [0,0,1];\n        }else{\n            this.director[0] /= norm;\n            this.director[1] /= norm;\n            this.director[2] /= norm;\n        }\n\n        // TEST!\n    }\n\n    calculateColourIndex(element){\n        let n = colourMap.values.length - 1;\n\n        let scalarProduct = Math.abs(element.orientation[0] * this.director[0]\n            + element.orientation[1] * this.director[1]\n            + element.orientation[2] * this.director[2]);\n\n        if (scalarProduct > 1){scalarProduct = 1;}\n\n        return Math.round(Math.acos( scalarProduct )/Math.PI*2*( n ));;\n    }\n\n    setUserColour(hex) {\n        this.userColour = new Color(hex);\n    }\n\n    static getParameters(val) {\n        let parameters;\n\n        switch (val) {\n            case 'Ellipsoid':\n                parameters = Parameters.Ellipsoid;\n                break;\n            case 'Spherocylinder':\n                parameters = Parameters.Spherocylinder;\n                break;\n            case 'Spheroplatelet':\n                parameters = Parameters.Spheroplatelet;\n                break;\n            case 'Cut Sphere':\n                parameters = Parameters.CutSphere;\n                break;\n            case 'Sphere':\n                parameters = Parameters.Sphere;\n                break;\n            case 'Cylinder':\n                parameters = Parameters.Cylinder;\n                break;\n            case 'Torus':\n                parameters = Parameters.Torus;\n                break;\n            default:\n                Alert.error('Error: Unexpected shape identifier');\n        }\n\n        return parameters;\n    }\n\n    Element = class Element {\n        geometries;\n        orientation;\n        position;\n        colourIndex;\n        euler;\n\n        constructor(p, q) {\n            this.position = p;\n            this.orientation = this.quaternionToUnitVector(q);\n\n            this.euler = new Euler();\n            this.euler.setFromQuaternion(q);\n            this.colourIndex = 0;\n        }\n\n        quaternionToUnitVector(q){\n            let a = (2 * (   q.w*q.y + q.x*q.z ));\n            let b = (2 * ( - q.w*q.x + q.y*q.z ));\n            let c = (1 - 2 * ( q.x**2 + q.y**2 ));\n            return [a,b,c];\n        }\n\n        setColourIndex(i){\n            this.colourIndex = i;\n        }\n\n        getColour() {\n            return Model.rgbToHex(this.colour[0], this.colour[1], this.colour[2]);\n        }\n\n        setGeometries(geoms) {\n            this.geometries = geoms;\n        }\n\n    }\n}\n\nexport default Set;","/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":287,"column":21,"nodeType":"94","messageId":"95","endLine":287,"endColumn":23},{"ruleId":"96","severity":1,"message":"97","line":2,"column":135,"nodeType":"98","messageId":"99","endLine":2,"endColumn":142},{"ruleId":"96","severity":1,"message":"100","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":12},{"ruleId":"96","severity":1,"message":"101","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":16},{"ruleId":"96","severity":1,"message":"102","line":60,"column":15,"nodeType":"98","messageId":"99","endLine":60,"endColumn":20},{"ruleId":"92","severity":1,"message":"103","line":231,"column":18,"nodeType":"94","messageId":"95","endLine":231,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":238,"column":31,"nodeType":"94","messageId":"95","endLine":238,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":456,"column":29,"nodeType":"94","messageId":"95","endLine":456,"endColumn":31},{"ruleId":"92","severity":1,"message":"93","line":194,"column":19,"nodeType":"94","messageId":"95","endLine":194,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":206,"column":13,"nodeType":"94","messageId":"106","endLine":206,"endColumn":25},{"ruleId":"92","severity":1,"message":"103","line":206,"column":19,"nodeType":"94","messageId":"95","endLine":206,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":231,"column":13,"nodeType":"94","messageId":"106","endLine":231,"endColumn":25},{"ruleId":"92","severity":1,"message":"103","line":231,"column":19,"nodeType":"94","messageId":"95","endLine":231,"endColumn":21},{"ruleId":"96","severity":1,"message":"107","line":8,"column":5,"nodeType":"98","messageId":"99","endLine":8,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":82,"column":13,"nodeType":"110","messageId":"111","endLine":82,"endColumn":180},{"ruleId":"108","severity":1,"message":"109","line":87,"column":17,"nodeType":"110","messageId":"111","endLine":87,"endColumn":113},{"ruleId":"92","severity":1,"message":"103","line":92,"column":36,"nodeType":"94","messageId":"95","endLine":92,"endColumn":38},{"ruleId":"108","severity":1,"message":"109","line":93,"column":13,"nodeType":"110","messageId":"111","endLine":93,"endColumn":128},{"ruleId":"108","severity":1,"message":"109","line":239,"column":17,"nodeType":"110","messageId":"111","endLine":239,"endColumn":89},{"ruleId":"108","severity":1,"message":"109","line":280,"column":17,"nodeType":"110","messageId":"111","endLine":280,"endColumn":113},{"ruleId":"92","severity":1,"message":"93","line":300,"column":34,"nodeType":"94","messageId":"95","endLine":300,"endColumn":36},{"ruleId":"92","severity":1,"message":"93","line":346,"column":18,"nodeType":"94","messageId":"95","endLine":346,"endColumn":20},{"ruleId":"104","severity":1,"message":"105","line":346,"column":26,"nodeType":"94","messageId":"106","endLine":346,"endColumn":37},{"ruleId":"92","severity":1,"message":"93","line":346,"column":31,"nodeType":"94","messageId":"95","endLine":346,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":346,"column":46,"nodeType":"94","messageId":"95","endLine":346,"endColumn":48},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'View' is defined but never used.","'render' is defined but never used.","'state' is assigned a value but never used.","Expected '!==' and instead saw '!='.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'DoubleSide' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation"]