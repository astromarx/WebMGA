[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/Controller.js":"3","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js":"4","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js":"5","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js":"6","/home/padrino-eduardo/Desktop/webmga/src/Model/ParticleSet.js":"7","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js":"8","/home/padrino-eduardo/Desktop/webmga/src/Model/Grid.js":"9","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js":"10","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js":"11","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js":"12","/home/padrino-eduardo/Desktop/webmga/src/View/View.js":"13"},{"size":198,"mtime":1609107771761,"results":"14","hashOfConfig":"15"},{"size":929,"mtime":1609596111151,"results":"16","hashOfConfig":"15"},{"size":2451,"mtime":1610142015625,"results":"17","hashOfConfig":"15"},{"size":2995,"mtime":1609536671580,"results":"18","hashOfConfig":"15"},{"size":5528,"mtime":1609611527364,"results":"19","hashOfConfig":"15"},{"size":6024,"mtime":1610318972339,"results":"20","hashOfConfig":"15"},{"size":4030,"mtime":1609535004707,"results":"21","hashOfConfig":"15"},{"size":979,"mtime":1609970158993,"results":"22","hashOfConfig":"15"},{"size":1319,"mtime":1609605068031,"results":"23","hashOfConfig":"15"},{"size":19661,"mtime":1610319007759,"results":"24","hashOfConfig":"15"},{"size":23220,"mtime":1609535002230,"results":"25","hashOfConfig":"15"},{"size":7133,"mtime":1610318155240,"results":"26","hashOfConfig":"15"},{"size":2195,"mtime":1610318969359,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1309gqf",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"30"},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],["64","65"],"/home/padrino-eduardo/Desktop/webmga/src/App.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Controller.js",["66","67","68","69","70"],"import Model  from \"./Model/Model\";\nimport View from \"./View/View\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport sample from './Samples/sample1.txt';\n\nclass Controller {\n    model;\n    view;\n\n    constructor() {\n        this.model = new Model();\n        this.view = new View(this.model);\n        //this.stats = new Stats();\n    }\n\n    start = () => {\n        this.addListeners();\n        this.loadSample();\n        this.render();\n    }\n\n    getHeader = () => {\n        return this.view.header;\n    }\n\n    getSiderbar = () => {\n        return this.view.sidebar;\n    }\n\n    getDomElement = () => {\n        return this.model.renderer.domElement;\n    }\n\n    render = () => {\n        //this.stats.begin();\n        this.model.update();\n        //this.stats.end();\n        //this.updateFPS();\n        requestAnimationFrame(this.render);\n    }\n\n    loadSample = () => {\n        fetch(sample)\n            .then(res => res.text())\n            .then(configData => {\n                this.model.load(configData);\n            });\n    }\n\n    addListeners = () => {\n\n        document.body.style.overflow = \"hidden\";\n\n        window.addEventListener('resize', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n        document.addEventListener('fullscreenchange', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n\n        document.body.onkeydown = (e) => {\n            var key = e.keyCode;\n            //spacebar\n            if (key == 32) {\n                this.model.toggleCameraRotation();\n            }\n            //a\n            if (key == 65) {\n                this.model.toggleAxes();\n            }\n            //g\n            if (key == 71) {\n                this.model.toggleGrid();\n            }\n            if (key == 69) {\n                this.view.toggleSidebar();\n            }\n        }\n    }\n\n\n}\n\n\n\nexport default Controller;\n\n\nvar Stats = function () {\n\n    var fps = 10;\n    var frames = 0;\n    var prevTime;\n  \n    return {\n      getFPS: function () {\n        return fps;\n      },\n      begin: function () {\n        prevTime = Date.now();\n      },\n      end: function () {\n        frames++;\n        var time = Date.now();\n  \n        if (time > prevTime + 1000) {\n          fps = (frames * 1000) / (time - prevTime);\n          prevTime = time;\n          frames = 0;\n          console.log(fps);\n        }\n      },\n  \n    };\n  \n  };\n  \n  ","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/Side.js",["71","72","73","74","75"],"\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, VisualElementsOptions, SlicingOptions, ModelsOptions } from './SubMenus'\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{ backgroundColor: '#101010' }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Visual Elements</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Visual Elements\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            <Nav.Item panel style={{ height: 800 }} />\n        </Nav>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Visual Elements\":\n                menuContent.push(<VisualElementsOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js",["76","77","78","79"],"import {\n    Scene,\n    WebGLRenderer,\n    PerspectiveCamera,\n    OrthographicCamera,\n    Vector3\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport ParticleSet from './ParticleSet.js'\nimport Light from './Light.js'\nimport Grid from './Grid.js'\n\nexport class Model {\n    configuration = [];\n\n    scene;\n    camera;\n    lighting;\n    bgColour;\n    controls;\n    lookAt;\n    grid;\n    renderer;\n\n    height;\n    width;\n\n    gridEnabled = false;\n    axesEnabled = false;\n    sidebarExpanded = false;\n\n    cameraType = 'perspective';\n\n    constructor() {\n        this.scene = new Scene();\n        this.setDefault();\n    }\n\n    setDefault() {\n\n        this.renderer = new WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n\n        this.lookAt = new Vector3(0,0,0);\n\n        this.updateDimensions();\n        this.setCamera(this.cameraType);\n\n        this.lighting = [\n            new Light('ambient'),\n            new Light('directional'),\n            new Light('point')];\n\n        this.grid = new Grid(50, 0xffffff);\n\n        this.bgColour = \"#000000\";\n        this.renderer.setClearColor(this.bgColour);\n\n\n        for (let l of this.lighting) {\n            this.scene.add(l.light);\n        }\n        this.scene.add(this.camera);\n    }\n\n    update() {\n        this.controls.update();\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        this.height = (window.innerHeight - 56);\n\n        if (this.sidebarExpanded) {\n            this.width = window.innerWidth - 356;\n        } else {\n            this.width = window.innerWidth - 56;\n        }\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    setCamera(type) {\n        if (type == 'perspective') {\n            this.camera = new PerspectiveCamera(50, this.width / this.height, 0.1, 1000);\n        } else {\n            this.camera = new OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 0.1, 1000);\n            this.camera.zoom = 10;\n            console.log(this.camera.zoom);\n        }\n\n        this.camera.position.z = 30;\n        \n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.target = this.lookAt;\n    }\n\n    updateCamera() {\n        if (this.cameraType == 'perspective') {\n            this.camera.aspect = this.width / this.height;\n        } else {\n            this.camera.left = this.width / - 2;\n            this.camera.right = this.width / 2;\n            this.camera.top = this.height / 2;\n            this.camera.bottom = this.height / 2;\n        }\n        this.camera.updateProjectionMatrix();\n    }\n\n    updateLookAt(l){\n        this.lookAt = new Vector3(l.x,l.y,l.z);\n        this.controls.target = this.lookAt;\n        this.controls.update();\n\n    }\n\n    toggleSidebar() {\n        this.sidebarExpanded = !this.sidebarExpanded;\n        this.updateDimensions();\n    }\n\n    updateBg(colour) {\n        this.bgColour = this.rgbToHex(colour.r, colour.g, colour.b);\n        this.renderer.setClearColor(this.bgColour);\n    }\n\n    toggleLight(type, enabled) {\n        this.lighting[type].visible = enabled;\n    }\n\n    updateLight(type, colour) {\n        this.lighting[type].updateColour(this.rgbToHex(colour.r, colour.g, colour.b), colour.i);\n    }\n\n    updateLightPosition(type, pos) {\n        this.lighting[type].updatePosition(pos.x, pos.y, pos.z);\n    }\n\n    updateGridColour(rgb) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n        var colour = this.rgbToHex(rgb.r, rgb.g, rgb.b);\n        this.grid.updateColour(colour);\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n    updateGridSize(size) {\n        let passGrid = false;\n        let passAxes = false;\n        if (this.gridEnabled) {\n            this.toggleGrid();\n            passGrid = true;\n        }\n        if (this.axesEnabled) {\n            this.toggleAxes();\n            passAxes = true;\n        }\n\n        this.grid.updateSize(size);\n\n        if (passGrid) {\n            this.toggleGrid();\n        }\n        if (passAxes) {\n            this.toggleAxes();\n        }\n    }\n\n\n    toggleGrid() {\n        this.gridEnabled = !this.gridEnabled;\n\n        if (this.gridEnabled) {\n            this.scene.add(this.grid.subGrid);\n        } else {\n            this.scene.remove(this.grid.subGrid);\n        }\n    }\n\n    toggleAxes() {\n        this.axesEnabled = !this.axesEnabled;\n\n        if (this.axesEnabled) {\n            for (let a of this.grid.axes) {\n                this.scene.add(a);\n            }\n        } else {\n            for (let a of this.grid.axes) {\n                this.scene.remove(a);\n            }\n        }\n\n\n    }\n\n    toggleCameraRotation() {\n        this.controls.autoRotate = !this.controls.autoRotate;\n    }\n\n    rgbToHex(r, g, b) {\n        function componentToHex(c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n        }\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    }\n\n    load(data) {\n        let particleSets = data.split(\"$\");\n        let setData, ps;\n        for (let particleSet of particleSets) {\n            if (particleSet == \"\") {\n                return;\n            }\n            else {\n                setData = particleSet.split(\"\\n\");\n                ps = new ParticleSet(setData[0], setData[1], setData.slice(2));\n                this.configuration.push(ps);\n            }\n        }\n\n        this.setConfiguration();\n    }\n\n\n    setConfiguration() {\n        for (let set of this.configuration) {\n            for (const m of set.meshes) {\n                this.scene.add(m);\n            }\n        }\n    }\n\n}\n\nexport default Model;\n","/home/padrino-eduardo/Desktop/webmga/src/Model/ParticleSet.js",["80","81","82","83"],"import {Mesh,\n    MeshLambertMaterial,\n    Vector3,\n    Quaternion,\n    Euler\n    } from 'three';\nimport * as SHAPE from './Shapes.js';\n\nexport class ParticleSet{\n    name;\n    shape;\n    shapeType;\n    display;\n    material;\n    parameters;\n    colour;\n    orientationType;\n\n    particles = []\n    meshes = [];\n\n    constructor(n, ot, d){\n        this.name = n;\n        this.orientationType = ot;\n        this.setDefaults();\n        this.genParticles(d);\n        this.genMeshes();\n    }\n\n    genMeshes(){\n        let m;\n        for(let p of this.particles){\n            for(let g of p.geometries){\n                m = new Mesh(g, this.material);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    genParticles(particles){\n\n        let position, orientation, attributes, euler, nP;\n        let geoms = [], temp = [];\n\n        let i = 1;\n        for(let p of particles){\n            attributes = p.split(\" \");\n\n            for(let a of attributes){\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7){break;}\n            \n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n\n            // console.log(i);\n            // i++;\n            // console.log('attributes');\n            // console.log(attributes);\n\n            geoms.push(this.shape.stripGeometry.clone());\n            geoms.push(this.shape.fanGeometries[0].clone());\n            geoms.push(this.shape.fanGeometries[1].clone());\n            \n            this.translate(position, geoms);\n            this.rotate(euler, geoms);\n\n            nP = new this.Particle(geoms);\n            this.particles.push(nP);\n\n            geoms = [];\n\n        }\n    }\n\n    setDefaults(){\n        this.shapeType = 'ellipsoid';\n        this.display = 'model';\n        this.colour =  0xF7F7F7;\n        this.material = new MeshLambertMaterial({color: this.colour});\n        this.parameters = (2, 3);\n        this.genGeometries();\n    }\n\n    genGeometries(){\n        switch(this.shapeType){\n            case 'ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(0.5, 0.3, 0.7);\n                break;\n            case 'spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(0.5,8);\n                break;\n            case 'spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(0.5,0.7);\n                break;\n            case 'cutsphere':\n                this.shape = new SHAPE.CutSphere(this.parameters);\n                break;\n            case 'sphere':\n                this.shape = new SHAPE.CutSphere(this.parameters, this.parameters);\n                break;\n        }\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    getRotations(type, rot){\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type){\n            case 'v':\n                let defaultVector = new Vector3(0,0,1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n        \n    }\n\n    Particle = class Particle{\n        geometries;\n        constructor(g){\n            this.geometries = g;\n        }\n\n    }\n}\n\nexport default ParticleSet;","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js",["84"],"import {\n    AmbientLight,\n    DirectionalLight,\n    PointLight\n} from 'three';\n\nexport class Light {\n    light;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n    constructor(lightType) {\n        this.setDefaultLights(lightType);\n    }\n\n    updatePosition(x, y, z){\n        this.light.position.set(x, y, z);\n    }\n\n    updateColour(c, i){\n        this.light.color.setHex(parseInt(c.substring(1), 16));\n        this.light.intensity = i * 0.01;\n    }\n\n    setDefaultLights(lightType) {\n        switch (lightType) {\n            case 'ambient':\n                this.light = new AmbientLight(\"#0ff0ff\", 0.4);\n                break;\n            case 'directional':\n                this.light = new DirectionalLight(\"#ffff00\", 0.5);\n                break;\n            case 'point':\n                this.light = new PointLight(\"#ffffff\", 0.6);\n                this.light.position.set(5, 0, 2);\n                break;\n        }\n    }\n}\n\nexport default Light;","/home/padrino-eduardo/Desktop/webmga/src/Model/Grid.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"\nimport { Dropdown, Sidebar, Sidenav, Nav, Icon, Navbar, ButtonGroup, Tooltip, Whisper, Divider, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, IconButton } from 'rsuite';\nimport React, { Component, useState } from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\n\nconst LODToolTip = (\n    <Tooltip>\n        Decreasing LOD will increase rendering speed.\n    </Tooltip>\n);\n\nexport const ModelsOptions = ({ ...props }) => (\n    <div>\n        <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n        <ParameterInput title=\"Set\" values={[\"Set A\", \"Set B\", \"Set C\", \"Set D\"]} active={\"Set C\"} />\n        <ParameterInput title=\"Shape\" values={[\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cone\", \"Cylinder\"]} active={\"Spheroplatelet\"} />\n        <ParameterInput title=\"Material\" values={[\"Basic\", \"Lambert\", \"Phong\", \"Matcap\"]} active={\"Lambert\"} />\n        <ParameterInput title=\"Display As\" values={[\"Figure\", \"Line\", \"Wireframe\"]} active={\"Figure\"} />\n        <br />\n        <Divider><strong style={dividerStyle}>  Parameters </strong></Divider>\n        <ParameterSet titles={[\"Radius\", \"Length\"]} values={[4.0, 3.0]} />\n        <Divider><strong style={dividerStyle}>  Colour </strong></Divider>\n        <Row className=\"show-grid\">\n            <Col xs={1} />\n            <Col xs={20}>\n\n                <Checkbox> Set from Director </Checkbox>\n                <br />\n\n            </Col>\n        </Row>\n\n        <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={20} />\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={40} />\n        <CustomSlider disabled={false} boundaries={[1, 256]} val={90} />\n\n    </div>\n);\n\nexport class ViewOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ViewOptionsState;\n\n        this.model = props.model;\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.selectCameraType = this.selectCameraType.bind(this);\n        this.updateLOD = this.updateLOD.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n\n    }\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        View.ViewOptionsState.rotating = !View.ViewOptionsState.rotating;\n        this.model.toggleCameraRotation();\n    }\n    selectCameraType(value) {\n        this.setState({\n            type: value\n        });\n        View.ViewOptionsState.cameraType = value;\n        this.model.setCamera(value);\n    }\n    updateLOD(value) {\n        this.setState({\n            LOD: value\n        });\n        View.ViewOptionsState.LOD = value;\n        // TODO LOD UPDATES\n    }\n\n    updateLookat(value, type) {\n        let lookAt = this.state.lookAt;\n\n        switch (type) {\n            case 0:\n                lookAt.x = parseFloat(value);\n                break;\n            case 1:\n                lookAt.y = parseFloat(value);\n                break;\n            case 2:\n                lookAt.z = parseFloat(value);\n                break;\n        }\n\n        console.log(lookAt)\n        this.model.updateLookAt(lookAt);\n        View.ViewOptionsState.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const rotating = this.state.rotating;\n        const antialiasing = this.state.antialiasing;\n\n        return (\n            <div >\n\n                <Divider><strong style={dividerStyle}> Camera </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox checked={rotating} onClick={this.toggleAutorotate}> AutoRotate</Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n\n\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectCameraType}>\n                                    <br />\n                                    <p>Type</p>\n                                    <Radio defaultChecked value=\"perspective\">Perspective </Radio>\n                                    <Radio value=\"orthographic\">Orthographic </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p> Look at</p>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <ParameterSet titles={[\"X position\", \"Y position\", \"Z position\"]} f={this.updateLookat} />\n                <br />\n\n\n\n                <Divider><strong style={dividerStyle}> Perfomance Tuning </strong></Divider>\n\n                <Form style={{ marginLeft: TITLE_LEFT_MARGIN }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"top\" trigger=\"hover\" speaker={LODToolTip}>\n                            <Icon circle icon=\"question-circle\" size=\"md\" style={{ marginTop: 12 }} />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n\n                    min={1}\n                    step={1}\n                    max={5}\n                    defaultValue={4}\n                    graduated\n                    progress\n                    style={{ width: 220, marginLeft: 40 }}\n                    onChange={this.updateLOD}\n                    renderMark={mark => {\n                        return mark;\n                    }}\n                />\n\n            </div>);\n    }\n}\n\nexport const SlicingOptions = ({ ...props }) => {\n\n    return (\n        <div>\n            <SliceSlider title=\"X : \" />\n            <SliceSlider title=\"Y : \" />\n            <SliceSlider title=\"Z : \" />\n        </div>\n    );\n\n}\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.PointLightState;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') == 0) {\n            this.setState(View.DirectionalLightState);\n        } else {\n            this.setState(View.PointLightState);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.enabled = enabled;\n            intensity = View.PointLightState.colour.i;\n        } else {\n            View.DirectionalLightState.enabled = enabled;\n            intensity = View.DirectionalLightState.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n    }\n    updateColour(value, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n            default:\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLight(2, colour);\n            View.PointLightState.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.DirectionalLightState.colour = colour;\n        }\n    }\n    updatePosition(value, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = value;\n                break;\n            case 'y':\n                position.y = value;\n                break;\n            case 'z':\n                position.z = value;\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLightPosition(2, position);\n            View.PointLightState.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.DirectionalLightState.position = position;\n        }\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.AmbientLightState;\n\n        this.model = props.model;\n\n        this.updateAmbientLightColour = this.updateAmbientLightColour.bind(this);\n        this.updateBackgroundColour = this.updateBackgroundColour.bind(this);\n    }\n    updateAmbientLightColour(value, type) {\n        let colour = this.state.ambientLightColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n        }\n        this.model.updateLight(0, colour);\n        View.AmbientLightState.ambientLightColour = colour;\n    }\n    updateBackgroundColour(value, type) {\n        let colour = this.state.backgroundColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateBg(colour);\n        View.AmbientLightState.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateAmbientLightColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateAmbientLightColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateAmbientLightColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateAmbientLightColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBackgroundColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBackgroundColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBackgroundColour} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class VisualElementsOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.VisualElementsState;\n\n        this.model = props.model;\n        this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateGridColour = this.updateGridColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n\n    }\n    updateGridColour(value, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = value;\n                break;\n            case 'g':\n                rgb.g = value;\n                break;\n            case 'b':\n                rgb.b = value;\n                break;\n        }\n        this.model.updateGridColour(rgb);\n        View.VisualElementsState.gridColour = rgb;\n    }\n    updateGridSize(value) {\n        this.model.updateGridSize(value);\n        View.VisualElementsState.size = value;\n    }\n    toggleBoundingShapeEnabled() {\n        this.setState({\n            boundingShapeEnabled: !this.state.boundingShapeEnabled\n        });\n        View.VisualElementsState.boundingShapeEnabled = !View.VisualElementsState.boundingShapeEnabled;\n    }\n    selectShape(value) {\n        this.setState({\n            activeShape: value\n        });\n        View.VisualElementsState.activeShape = value;\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        View.VisualElementsState.showAxes = !View.VisualElementsState.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        View.VisualElementsState.showGrid = !View.VisualElementsState.showGrid;\n    }\n\n    render() {\n        const enabled = this.state.boundingShapeEnabled;\n        const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Bounding Shape </strong></Divider>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={enabled} onClick={this.toggleBoundingShapeEnabled}> Enabled </Checkbox>\n                            <br />\n\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <p>Shapes</p>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    <Radio disabled={!enabled} value=\"sphere\" >Sphere </Radio>\n                                    <Radio disabled={!enabled} value=\"cylinder\" >Cylinder </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> PRINT SHAPE INFO HERE</p>\n\n                <Divider><strong style={dividerStyle}> Grid </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={showAxes} onClick={this.toggleAxes}> Show Axes</Checkbox>\n                            <Checkbox checked={showGrid} onClick={this.toggleGrid}> Show Grid</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <br />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateGridColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateGridColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateGridColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n\n                <br />\n            </div>\n        );\n    }\n}","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    maxComplexity = [20, 20];\n    minComplexity = [5, 5]\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n\n    constructor() {\n        this.args = arguments[0];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n    translate(x, y, z) {\n        for (let f of this.fanGeometries) {\n            f.translate(x, y, z);\n        }\n        this.stripGeometry.translate(x, y, z);\n    }\n\n    rotate(e) {\n        for (let f of this.fanGeometries) {\n            f.rotateX(e.x);\n        }\n        this.stripGeometry.rotateX(e.x);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.y);\n        }\n        this.stripGeometry.rotateY(e.y);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.z);\n        }\n        this.stripGeometry.rotateY(e.z);\n    }\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180"],"\n\nimport { Dropdown, RangeSlider, InputGroup, Sidebar, Sidenav, Nav, Icon, Navbar, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, ButtonToolbar, Input } from 'rsuite';\nimport React, { Component, useState } from \"react\";\n\nconst TITLE_LEFT_MARGIN = 30;\n\nexport const ParameterSet = (props) => {\n    var set = [];\n    let val;\n    for (let i = 0; i < props.titles.length; i++) {\n        if (!props.values) {\n            val = 0;\n        } else {\n            val = props.values[i];\n        }\n        set.push(\n            <ParameterInput title={props.titles[i]} values={val} numerical f={props.f} index={i} />\n        );\n    }\n\n    return set;\n}\n\nexport class ParameterInput extends React.Component {\n\n\n    constructor(props) {\n        super();\n        this.active = props.active;\n        this.f = props.f;\n        this.title = props.title;\n        this.values = props.values;\n        this.numerical = props.numerical;\n        this.index = props.index;\n        this.state = {\n            value: 0\n        };\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    changeValue(value) {\n        this.f(value, this.index);\n    }\n\n    render() {\n        var InputBox;\n\n        if (this.numerical) {\n            const defaultVal = this.values;\n            InputBox =\n                (<div style={{ width: 140 }}>\n                    <InputNumber defaultValue={defaultVal} step={0.1} onChange={this.changeValue} />\n                </div>);\n        } else {\n\n            const vals = this.values;\n            const active = this.active;\n\n            var listItems = [];\n            let act;\n\n            for (let val of vals) {\n                (active.localeCompare(val)) ? act = false : act = true;\n                listItems.push(<Dropdown.Item active={act} >{val}</Dropdown.Item>);\n            }\n\n            listItems.push(<Dropdown.Item panel style={{ width: 150 }}></Dropdown.Item>);\n\n            InputBox = (\n                <ButtonToolbar style={{ width: 120 }}>\n                    <Dropdown style={{ width: 200 }} title={this.active}>\n                        {listItems}\n                    </Dropdown>\n                </ButtonToolbar>\n            );\n\n        }\n\n        return (\n            <div >\n                <Row style={{ marginTop: 15 }}>\n\n                    <Col md={10}><p style={{ marginTop: 10, marginLeft: 30 }}>{this.title}</p></Col>\n                    <Col md={8} />\n                    <Col md={10}>{InputBox}</Col>\n\n                </Row>\n            </div>\n        );\n    }\n}\n\n\n\nexport const SliceSlider = (props) => {\n    const [value, setValue] = React.useState([-50, 50]);\n\n    return (\n        <div>\n            <br /><br />\n            <Row>\n                <Col md={5}>\n                    <p style={{ marginTop: 10, marginLeft: 30 }}>{props.title}</p>\n                </Col>\n                <Col md={1} />\n                <Col md={16}>\n                    <InputGroup>\n                        <InputNumber\n                            min={-50}\n                            max={50}\n                            value={value[0]}\n\n                            onChange={nextValue => {\n                                const [start, end] = value;\n                                if (nextValue > end) {\n                                    return;\n                                }\n                                setValue([nextValue, end]);\n                            }}\n                        />\n                        <InputGroup.Addon>to</InputGroup.Addon>\n                        <InputNumber\n                            min={-50}\n                            max={50}\n                            value={value[1]}\n                            onChange={nextValue => {\n                                const [start, end] = value;\n                                if (start > nextValue) {\n                                    return;\n                                }\n                                setValue([start, nextValue]);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={21}>\n                    <RangeSlider\n                        min={-50}\n                        max={50}\n                        progress\n                        style={{ marginLeft: 35, marginTop: 30 }}\n                        value={value}\n                        onChange={value => {\n                            setValue(value);\n                        }}\n                    />\n                </Col>\n\n            </Row>\n        </div>\n    );\n}\n\nexport const CustomSlider = (props) => {\n\n    var f = props.f;\n    var [value, setValue] = useState(props.val);\n    var [disabled, disable] = useState(false);\n\n    var type, graduated, progress;\n\n    if (props.type == null) {\n        type = null;\n    } else {\n        type = props.type;\n    }\n\n    disabled = props.disabled;\n    const [min, max] = props.boundaries;\n\n\n    return (\n\n        <Row>\n            <Col md={10}>\n                <Slider\n                    style={{ marginLeft: 25, marginTop: 16, width: 170 }}\n                    value={value}\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, type);\n                    }}\n                />\n            </Col>\n            <Col md={4}>\n                <InputNumber\n                    style={{ marginLeft: 80, marginTop: 3, marginBottom: 3, width: 70, height: 35 }}\n                    min={min}\n                    max={max}\n                    value={value}\n                    disabled={disabled}\n                    onChange={value => {\n                        setValue(value);\n                        f(value, props.type)\n                    }}\n                />\n            </Col>\n        </Row>\n    );\n\n}\n\n\nexport const PositionForm = (props) => {\n    const title = props.title;\n\n    return (\n        <div>\n            <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> {title} </p>\n            <Panel style={{ height: 8 }} />\n            <FlexboxGrid justify='center'>\n                <Row className=\"show-grid\">\n\n                    <Form layout=\"inline\">\n\n                        <FormGroup>\n                            <ControlLabel>x</ControlLabel>\n                            <FormControl name=\"x\" style={{ width: 55 }} />\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>y</ControlLabel>\n                            <FormControl name=\"y\" style={{ width: 55 }} />\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>z</ControlLabel>\n                            <FormControl name=\"z\" style={{ width: 55 }} />\n                        </FormGroup>\n                    </Form>\n                </Row>\n            </FlexboxGrid>\n        </div>\n    );\n}","/home/padrino-eduardo/Desktop/webmga/src/View/View.js",["181"],"import React, { Component } from \"react\";\nimport Top from './Top';\nimport Side from './Side';\n\nexport class View {\n    header;\n    sidebar;\n    model;\n    expanded;\n\n    static VisualElementsState;\n    static AmbientLightState;\n    static PointLightState;\n    static DirectionalLightState;\n    static ViewOptionsState;\n    static ModelState;\n\n    constructor(m) {\n        this.model = m;\n        this.header = <Top fps={60} />;\n        this.sidebar = <Side model={this.model} />;\n\n        View.VisualElementsState = this.VisualElementsDefaultState;\n        View.AmbientLightState = this.AmbientLightDefaultState;\n        View.PointLightState = this.PointLightDefaultState;\n        View.DirectionalLightState = this.DirectionalLightDefaultState;\n        View.ViewOptionsState = this.ViewOptionsDefaultState;\n    }\n\n    ModelDefaultState = {\n        fun: 'no'\n    }\n\n    ViewOptionsDefaultState = {\n        rotating: false,\n        type: 'perspective',\n        lookAt: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        LOD : 4\n    }\n\n    PointLightDefaultState = {\n        reset : 0,\n        active: 'point',\n        enabled: true,\n        colour: {\n            r: 255,\n            g: 255,\n            b: 255,\n            i: 100\n        },\n        position: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n    }\n\n    DirectionalLightDefaultState = {\n        reset : 0,\n        active: 'directional',\n        enabled: false,\n        colour: {\n            r: 70,\n            g: 80,\n            b: 90,\n            i: 100\n        },\n        position: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n\n    }\n\n    VisualElementsDefaultState = {\n        boundingShapeEnabled: false,\n        activeShape: 'box',\n        showAxes: false,\n        showGrid: false,\n        gridColour: {\n            r: 50,\n            g: 90,\n            b: 90,\n        },\n        size: 50,\n\n    }\n\n    AmbientLightDefaultState = {\n        ambientLightColour: {\n            r: 50,\n            g: 50,\n            b: 50,\n            i: 90\n        },\n        backgroundColour: {\n            r: 0,\n            g: 0,\n            b: 0\n        }\n    }\n\n}\n\nexport default View;",{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":68,"column":21,"nodeType":"188","messageId":"189","endLine":68,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":72,"column":21,"nodeType":"188","messageId":"189","endLine":72,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":76,"column":21,"nodeType":"188","messageId":"189","endLine":76,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":79,"column":21,"nodeType":"188","messageId":"189","endLine":79,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":93,"column":5,"nodeType":"192","messageId":"193","endLine":93,"endColumn":10},{"ruleId":"190","severity":1,"message":"194","line":2,"column":19,"nodeType":"192","messageId":"193","endLine":2,"endColumn":26},{"ruleId":"190","severity":1,"message":"195","line":2,"column":28,"nodeType":"192","messageId":"193","endLine":2,"endColumn":35},{"ruleId":"190","severity":1,"message":"196","line":2,"column":48,"nodeType":"192","messageId":"193","endLine":2,"endColumn":51},{"ruleId":"190","severity":1,"message":"197","line":2,"column":53,"nodeType":"192","messageId":"193","endLine":2,"endColumn":56},{"ruleId":"198","severity":1,"message":"199","line":74,"column":9,"nodeType":"200","messageId":"201","endLine":93,"endColumn":10},{"ruleId":"186","severity":1,"message":"187","line":84,"column":18,"nodeType":"188","messageId":"189","endLine":84,"endColumn":20},{"ruleId":"186","severity":1,"message":"187","line":99,"column":29,"nodeType":"188","messageId":"189","endLine":99,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":216,"column":31,"nodeType":"188","messageId":"189","endLine":216,"endColumn":33},{"ruleId":"186","severity":1,"message":"187","line":225,"column":29,"nodeType":"188","messageId":"189","endLine":225,"endColumn":31},{"ruleId":"190","severity":1,"message":"202","line":45,"column":13,"nodeType":"192","messageId":"193","endLine":45,"endColumn":14},{"ruleId":"186","severity":1,"message":"203","line":57,"column":35,"nodeType":"188","messageId":"189","endLine":57,"endColumn":37},{"ruleId":"198","severity":1,"message":"199","line":94,"column":9,"nodeType":"200","messageId":"201","endLine":110,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":131,"column":9,"nodeType":"200","messageId":"201","endLine":148,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":28,"column":9,"nodeType":"200","messageId":"201","endLine":39,"endColumn":10},{"ruleId":"190","severity":1,"message":"204","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":18},{"ruleId":"190","severity":1,"message":"205","line":2,"column":20,"nodeType":"192","messageId":"193","endLine":2,"endColumn":27},{"ruleId":"190","severity":1,"message":"206","line":2,"column":29,"nodeType":"192","messageId":"193","endLine":2,"endColumn":36},{"ruleId":"190","severity":1,"message":"207","line":2,"column":49,"nodeType":"192","messageId":"193","endLine":2,"endColumn":55},{"ruleId":"190","severity":1,"message":"208","line":2,"column":57,"nodeType":"192","messageId":"193","endLine":2,"endColumn":68},{"ruleId":"190","severity":1,"message":"209","line":2,"column":97,"nodeType":"192","messageId":"193","endLine":2,"endColumn":106},{"ruleId":"190","severity":1,"message":"210","line":2,"column":118,"nodeType":"192","messageId":"193","endLine":2,"endColumn":129},{"ruleId":"190","severity":1,"message":"211","line":2,"column":131,"nodeType":"192","messageId":"193","endLine":2,"endColumn":138},{"ruleId":"190","severity":1,"message":"212","line":2,"column":140,"nodeType":"192","messageId":"193","endLine":2,"endColumn":145},{"ruleId":"190","severity":1,"message":"213","line":2,"column":147,"nodeType":"192","messageId":"193","endLine":2,"endColumn":156},{"ruleId":"190","severity":1,"message":"214","line":2,"column":204,"nodeType":"192","messageId":"193","endLine":2,"endColumn":210},{"ruleId":"190","severity":1,"message":"215","line":2,"column":212,"nodeType":"192","messageId":"193","endLine":2,"endColumn":218},{"ruleId":"190","severity":1,"message":"216","line":2,"column":220,"nodeType":"192","messageId":"193","endLine":2,"endColumn":226},{"ruleId":"190","severity":1,"message":"217","line":2,"column":228,"nodeType":"192","messageId":"193","endLine":2,"endColumn":239},{"ruleId":"190","severity":1,"message":"218","line":2,"column":261,"nodeType":"192","messageId":"193","endLine":2,"endColumn":272},{"ruleId":"190","severity":1,"message":"219","line":2,"column":282,"nodeType":"192","messageId":"193","endLine":2,"endColumn":292},{"ruleId":"190","severity":1,"message":"220","line":3,"column":17,"nodeType":"192","messageId":"193","endLine":3,"endColumn":26},{"ruleId":"190","severity":1,"message":"221","line":3,"column":28,"nodeType":"192","messageId":"193","endLine":3,"endColumn":36},{"ruleId":"198","severity":1,"message":"199","line":85,"column":9,"nodeType":"200","messageId":"201","endLine":95,"endColumn":10},{"ruleId":"190","severity":1,"message":"222","line":106,"column":15,"nodeType":"192","messageId":"193","endLine":106,"endColumn":27},{"ruleId":"186","severity":1,"message":"187","line":216,"column":54,"nodeType":"188","messageId":"189","endLine":216,"endColumn":56},{"ruleId":"186","severity":1,"message":"187","line":233,"column":54,"nodeType":"188","messageId":"189","endLine":233,"endColumn":56},{"ruleId":"186","severity":1,"message":"187","line":268,"column":54,"nodeType":"188","messageId":"189","endLine":268,"endColumn":56},{"ruleId":"198","severity":1,"message":"199","line":279,"column":9,"nodeType":"200","messageId":"201","endLine":289,"endColumn":10},{"ruleId":"186","severity":1,"message":"187","line":291,"column":54,"nodeType":"188","messageId":"189","endLine":291,"endColumn":56},{"ruleId":"198","severity":1,"message":"199","line":347,"column":9,"nodeType":"200","messageId":"201","endLine":360,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":367,"column":9,"nodeType":"200","messageId":"201","endLine":377,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":420,"column":9,"nodeType":"200","messageId":"201","endLine":430,"endColumn":10},{"ruleId":"186","severity":1,"message":"203","line":30,"column":19,"nodeType":"188","messageId":"189","endLine":30,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":73,"column":41,"nodeType":"188","messageId":"189","endLine":73,"endColumn":43},{"ruleId":"186","severity":1,"message":"187","line":117,"column":27,"nodeType":"188","messageId":"189","endLine":117,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":117,"column":37,"nodeType":"188","messageId":"189","endLine":117,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":132,"column":27,"nodeType":"188","messageId":"189","endLine":132,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":132,"column":37,"nodeType":"188","messageId":"189","endLine":132,"endColumn":39},{"ruleId":"223","severity":1,"message":"224","line":166,"column":18,"nodeType":"192","messageId":"225","endLine":166,"endColumn":19},{"ruleId":"186","severity":1,"message":"187","line":167,"column":19,"nodeType":"188","messageId":"189","endLine":167,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":167,"column":29,"nodeType":"188","messageId":"189","endLine":167,"endColumn":31},{"ruleId":"223","severity":1,"message":"224","line":195,"column":18,"nodeType":"192","messageId":"225","endLine":195,"endColumn":19},{"ruleId":"186","severity":1,"message":"187","line":196,"column":19,"nodeType":"188","messageId":"189","endLine":196,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":196,"column":29,"nodeType":"188","messageId":"189","endLine":196,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":248,"column":27,"nodeType":"188","messageId":"189","endLine":248,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":248,"column":37,"nodeType":"188","messageId":"189","endLine":248,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":263,"column":27,"nodeType":"188","messageId":"189","endLine":263,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":263,"column":37,"nodeType":"188","messageId":"189","endLine":263,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":288,"column":27,"nodeType":"188","messageId":"189","endLine":288,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":288,"column":37,"nodeType":"188","messageId":"189","endLine":288,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":303,"column":27,"nodeType":"188","messageId":"189","endLine":303,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":303,"column":37,"nodeType":"188","messageId":"189","endLine":303,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":327,"column":23,"nodeType":"188","messageId":"189","endLine":327,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":327,"column":33,"nodeType":"188","messageId":"189","endLine":327,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":362,"column":23,"nodeType":"188","messageId":"189","endLine":362,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":362,"column":33,"nodeType":"188","messageId":"189","endLine":362,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":392,"column":23,"nodeType":"188","messageId":"189","endLine":392,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":392,"column":33,"nodeType":"188","messageId":"189","endLine":392,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":450,"column":27,"nodeType":"188","messageId":"189","endLine":450,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":450,"column":37,"nodeType":"188","messageId":"189","endLine":450,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":462,"column":27,"nodeType":"188","messageId":"189","endLine":462,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":462,"column":37,"nodeType":"188","messageId":"189","endLine":462,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":474,"column":27,"nodeType":"188","messageId":"189","endLine":474,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":474,"column":37,"nodeType":"188","messageId":"189","endLine":474,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":486,"column":27,"nodeType":"188","messageId":"189","endLine":486,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":486,"column":37,"nodeType":"188","messageId":"189","endLine":486,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":516,"column":23,"nodeType":"188","messageId":"189","endLine":516,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":516,"column":33,"nodeType":"188","messageId":"189","endLine":516,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":545,"column":23,"nodeType":"188","messageId":"189","endLine":545,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":545,"column":33,"nodeType":"188","messageId":"189","endLine":545,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":600,"column":27,"nodeType":"188","messageId":"189","endLine":600,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":600,"column":37,"nodeType":"188","messageId":"189","endLine":600,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":615,"column":27,"nodeType":"188","messageId":"189","endLine":615,"endColumn":29},{"ruleId":"186","severity":1,"message":"187","line":615,"column":37,"nodeType":"188","messageId":"189","endLine":615,"endColumn":39},{"ruleId":"186","severity":1,"message":"187","line":647,"column":23,"nodeType":"188","messageId":"189","endLine":647,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":647,"column":33,"nodeType":"188","messageId":"189","endLine":647,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":678,"column":23,"nodeType":"188","messageId":"189","endLine":678,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":678,"column":33,"nodeType":"188","messageId":"189","endLine":678,"endColumn":35},{"ruleId":"190","severity":1,"message":"205","line":3,"column":45,"nodeType":"192","messageId":"193","endLine":3,"endColumn":52},{"ruleId":"190","severity":1,"message":"206","line":3,"column":54,"nodeType":"192","messageId":"193","endLine":3,"endColumn":61},{"ruleId":"190","severity":1,"message":"226","line":3,"column":63,"nodeType":"192","messageId":"193","endLine":3,"endColumn":66},{"ruleId":"190","severity":1,"message":"227","line":3,"column":68,"nodeType":"192","messageId":"193","endLine":3,"endColumn":72},{"ruleId":"190","severity":1,"message":"207","line":3,"column":74,"nodeType":"192","messageId":"193","endLine":3,"endColumn":80},{"ruleId":"190","severity":1,"message":"209","line":3,"column":82,"nodeType":"192","messageId":"193","endLine":3,"endColumn":91},{"ruleId":"190","severity":1,"message":"228","line":3,"column":93,"nodeType":"192","messageId":"193","endLine":3,"endColumn":101},{"ruleId":"190","severity":1,"message":"211","line":3,"column":116,"nodeType":"192","messageId":"193","endLine":3,"endColumn":123},{"ruleId":"190","severity":1,"message":"213","line":3,"column":132,"nodeType":"192","messageId":"193","endLine":3,"endColumn":141},{"ruleId":"190","severity":1,"message":"229","line":3,"column":154,"nodeType":"192","messageId":"193","endLine":3,"endColumn":164},{"ruleId":"190","severity":1,"message":"230","line":3,"column":166,"nodeType":"192","messageId":"193","endLine":3,"endColumn":171},{"ruleId":"190","severity":1,"message":"231","line":3,"column":173,"nodeType":"192","messageId":"193","endLine":3,"endColumn":177},{"ruleId":"190","severity":1,"message":"214","line":3,"column":189,"nodeType":"192","messageId":"193","endLine":3,"endColumn":195},{"ruleId":"190","severity":1,"message":"215","line":3,"column":197,"nodeType":"192","messageId":"193","endLine":3,"endColumn":203},{"ruleId":"190","severity":1,"message":"216","line":3,"column":205,"nodeType":"192","messageId":"193","endLine":3,"endColumn":211},{"ruleId":"190","severity":1,"message":"232","line":3,"column":282,"nodeType":"192","messageId":"193","endLine":3,"endColumn":287},{"ruleId":"190","severity":1,"message":"220","line":4,"column":17,"nodeType":"192","messageId":"193","endLine":4,"endColumn":26},{"ruleId":"190","severity":1,"message":"233","line":115,"column":40,"nodeType":"192","messageId":"193","endLine":115,"endColumn":45},{"ruleId":"190","severity":1,"message":"234","line":128,"column":47,"nodeType":"192","messageId":"193","endLine":128,"endColumn":50},{"ruleId":"190","severity":1,"message":"235","line":161,"column":20,"nodeType":"192","messageId":"193","endLine":161,"endColumn":27},{"ruleId":"190","severity":1,"message":"236","line":163,"column":15,"nodeType":"192","messageId":"193","endLine":163,"endColumn":24},{"ruleId":"190","severity":1,"message":"237","line":163,"column":26,"nodeType":"192","messageId":"193","endLine":163,"endColumn":34},{"ruleId":"190","severity":1,"message":"220","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Stats' is assigned a value but never used.","Identifier","unusedVar","'Whisper' is defined but never used.","'Tooltip' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'i' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Dropdown' is defined but never used.","'Sidebar' is defined but never used.","'Sidenav' is defined but never used.","'Navbar' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'InputNumber' is defined but never used.","'Content' is defined but never used.","'Panel' is defined but never used.","'HelpBlock' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","'Button' is defined but never used.","'FlexboxGrid' is defined but never used.","'FormControl' is defined but never used.","'IconButton' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'antialiasing' is assigned a value but never used.","no-redeclare","'j' is already defined.","redeclared","'Nav' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'Input' is defined but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'disable' is assigned a value but never used.","'graduated' is defined but never used.","'progress' is defined but never used.","no-global-assign","no-unsafe-negation"]