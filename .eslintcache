[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/mga/model.js":"3","/home/padrino-eduardo/Desktop/webmga/src/mga/view.js":"4","/home/padrino-eduardo/Desktop/webmga/src/mga/shapes.js":"5","/home/padrino-eduardo/Desktop/webmga/src/ui/Top.js":"6","/home/padrino-eduardo/Desktop/webmga/src/ui/Side.js":"7","/home/padrino-eduardo/Desktop/webmga/src/ui/SubMenus.js":"8","/home/padrino-eduardo/Desktop/webmga/src/ui/Tools.js":"9"},{"size":198,"mtime":1609107771761,"results":"10","hashOfConfig":"11"},{"size":1765,"mtime":1609191937230,"results":"12","hashOfConfig":"11"},{"size":4893,"mtime":1609109304856,"results":"13","hashOfConfig":"11"},{"size":5260,"mtime":1609162860615,"results":"14","hashOfConfig":"11"},{"size":23220,"mtime":1609109663509,"results":"15","hashOfConfig":"11"},{"size":2961,"mtime":1609257959990,"results":"16","hashOfConfig":"11"},{"size":5343,"mtime":1609284743513,"results":"17","hashOfConfig":"11"},{"size":5590,"mtime":1609284733697,"results":"18","hashOfConfig":"11"},{"size":5478,"mtime":1609283173158,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1fh0xym",{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],["43","44"],"/home/padrino-eduardo/Desktop/webmga/src/App.js",["45","46","47","48","49"],"import React, { Component } from \"react\";\nimport { Scene } from \"three\";\nimport { Model } from \"./mga/model\";\nimport { View } from \"./mga/view\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport { Container, Content, Header, Sidebar } from 'rsuite';\nimport Top from './ui/Top';\nimport Side from './ui/Side';\n\n\nclass App extends Component {\n  scene; model; view;\n\n  controller = () => {\n    this.scene = new Scene();\n    this.model = new Model();\n    this.view = new View();\n\n    this.view.set(this.scene);\n    this.model.loadSample(this.scene);\n\n    this.mount.appendChild(this.view.renderer.domElement);\n\n    const render = () => {\n      requestAnimationFrame(render);\n      this.view.update(this.scene);\n    }\n\n    const addListeners = () => {\n\n      document.body.style.overflow = \"hidden\"\n\n      window.addEventListener('resize', () => {\n        this.view.resetAspect();\n      });\n\n      document.addEventListener('fullscreenchange', () => {\n        this.view.resetAspect();\n      });\n\n\n      document.body.onkeydown = (e) => {\n        var key = e.keyCode;\n        //spacebar\n        if (key == 32) {\n          this.view.toggleCameraRotation();\n        }\n        //a\n        if (key == 65) {\n          this.view.toggleAxes(this.scene);\n        }\n        //g\n        if (key == 71) {\n          this.view.toggleGrid(this.scene);\n        }\n      }\n    }\n\n    render();\n    addListeners();\n  }\n\n  componentDidMount() {\n    this.controller();\n  }\n\n  render() {\n    return (\n      <div >\n\n        <Container>\n          <Top />\n\n          <Container>\n            <Side />\n            <Content>\n              <div ref={ref => (this.mount = ref)} />\n            </Content>\n          </Container>\n\n        </Container>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n","/home/padrino-eduardo/Desktop/webmga/src/mga/model.js",["50","51","52","53"],"import {Mesh,\n    MeshLambertMaterial,\n    Vector3,\n    Quaternion,\n    Euler\n    } from 'three';\nimport * as SHAPE from './shapes.js';\nimport sample from './config/sample1.txt';\n\nexport class Model{\n    configuration = [];\n\n\n    load(data){\n        let particleSets = data.split(\"$\");\n        let setData, ps;\n        for(let particleSet of particleSets){\n            if (particleSet == \"\"){\n                return;\n            }\n            else{\n                setData = particleSet.split(\"\\n\");\n                ps = new ParticleSet(setData[0], setData[1], setData.slice(2));\n                this.configuration.push(ps);\n            } \n        }\n    }\n\n    loadSample(scene){\n        fetch(sample)\n        .then(res => res.text())\n        .then(configData => {\n              this.load(configData);\n              this.setConfiguration(scene);\n         });\n    }\n\n\n    setConfiguration(scene){\n        for(let set of this.configuration){\n            for(const m of set.meshes){\n                scene.add(m);\n            }\n        }\n    }    \n\n}\n\nclass ParticleSet{\n    name;\n    shape;\n    shapeType;\n    display;\n    material;\n    parameters;\n    colour;\n    orientationType;\n\n    particles = []\n    meshes = [];\n\n    constructor(n, ot, d){\n        this.name = n;\n        this.orientationType = ot;\n        this.setDefaults();\n        this.genParticles(d);\n        this.genMeshes();\n    }\n\n    genMeshes(){\n        let m;\n        for(let p of this.particles){\n            for(let g of p.geometries){\n                m = new Mesh(g, this.material);\n                this.meshes.push(m);\n            }\n        }\n    }\n\n    genParticles(particles){\n\n        let position, orientation, attributes, euler, nP;\n        let geoms = [], temp = [];\n\n        let i = 1;\n        for(let p of particles){\n            attributes = p.split(\" \");\n\n            for(let a of attributes){\n                temp.push(parseFloat(a));\n            }\n\n            attributes = temp;\n            temp = [];\n            console.log(attributes.length);\n\n            if (attributes.length != 7){break;}\n            \n            position = attributes.slice(0, 3);\n            orientation = attributes.slice(3);\n\n            euler = this.getRotations(this.orientationType, orientation);\n\n            console.log(i);\n            i++;\n            console.log('attributes');\n            console.log(attributes);\n\n            geoms.push(this.shape.stripGeometry.clone());\n            geoms.push(this.shape.fanGeometries[0].clone());\n            geoms.push(this.shape.fanGeometries[1].clone());\n            \n            this.translate(position, geoms);\n            this.rotate(euler, geoms);\n\n            nP = new this.Particle(geoms);\n            this.particles.push(nP);\n\n            geoms = [];\n\n        }\n    }\n\n    setDefaults(){\n        this.shapeType = 'ellipsoid';\n        this.display = 'model';\n        this.colour =  0xF7F7F7;\n        this.material = new MeshLambertMaterial({color: this.colour});\n        this.parameters = (2, 3);\n        this.genGeometries();\n    }\n\n    genGeometries(){\n        switch(this.shapeType){\n            case 'ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(0.5, 0.3, 0.7);\n                break;\n            case 'spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(0.5,8);\n                break;\n            case 'spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(0.5,0.7);\n                break;\n            case 'cutsphere':\n                this.shape = new SHAPE.CutSphere(this.parameters);\n                break;\n            case 'sphere':\n                this.shape = new SHAPE.CutSphere(this.parameters, this.parameters);\n                break;\n        }\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(pos[0], pos[1], pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateX(e.x);\n            g.rotateY(e.y);\n            g.rotateZ(e.z);\n        }\n    }\n\n    getRotations(type, rot){\n        let q = new Quaternion();\n        let e = new Euler();\n\n        switch (type){\n            case 'v':\n                let defaultVector = new Vector3(0,0,1);\n                q.setFromUnitVectors(defaultVector, new Vector3(rot[0], rot[1], rot[2]));\n                e.setFromQuaternion(q);\n                break;\n            case 'q':\n                q.fromArray(rot);\n                e.setFromQuaternion(q);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                e.setFromQuaternion(q);\n                break;\n            case 'e':\n                e.fromArray(rot);\n                break;\n        }\n\n        return e;\n        \n    }\n\n    Particle = class Particle{\n        geometries;\n        constructor(g){\n            this.geometries = g;\n        }\n\n    }\n}","/home/padrino-eduardo/Desktop/webmga/src/mga/view.js",["54","55","56"],"import {WebGLRenderer,\n    PerspectiveCamera,\n    OrthographicCamera,\n    AmbientLight,\n    DirectionalLight,\n    PointLight,\n    GridHelper,\n    LineBasicMaterial,\n    Vector3, \n    BufferGeometry,\n    Line} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nexport class View{\n    camera;\n    lighting;\n    bgColour;\n    controls;\n    origin;\n    grid;\n    renderer;\n\n    gridEnabled = false;\n    axesEnabled = false;\n\n    static AMBIENT = 0;\n    static DIRECTIONAL = 1;\n    static POINT = 2;\n\n\n    constructor(){\n        this.setDefault();\n    }\n\n    update(scene){\n      this.controls.update();\n      this.renderer.render(scene, this.camera);\n    }\n\n    resetAspect(){\n        this.renderer.setSize(window.innerWidth,window.innerHeight);\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    }\n\n    setDefault(){\n        this.renderer = new WebGLRenderer({ antialias: true });\n        \n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n    \n        this.camera = new PerspectiveCamera(50, window.innerWidth/window.innerHeight, 0.1, 1000);\n        this.camera.position.z = 30;\n        //this.camera = new OrthographicCamera(window.innerWidth/-2, window.innerWidth/2, window.innerHeight/2, window.innerHeight/-2, 0.1, 1000);\n        this.lighting = [\n            new this.Light(View.AMBIENT),\n            new this.Light(View.DIRECTIONAL),\n            new this.Light(View.POINT)];\n\n        this.grid = new this.Grid(50, 0xffffff);\n        \n        this.bgColour = \"#000000\";\n        this.renderer.setClearColor(this.bgColour);\n\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.autoRotate = false;\n        \n    }\n\n    set(scene){\n        for(let l of this.lighting){\n            scene.add(l.light);\n        }\n        scene.add(this.camera);\n    }\n\n    toggleGrid(scene){\n        this.gridEnabled = !this.gridEnabled;\n\n        if(this.gridEnabled){\n           scene.add(this.grid.subGrid);\n        }else{\n           scene.remove(this.grid.subGrid);\n        }\n    }\n\n    toggleAxes(scene){\n        this.axesEnabled = !this.axesEnabled;\n\n\n        if(this.axesEnabled){\n            for(let a of this.grid.axes){\n                scene.add(a);\n            }\n        }else{\n            for(let a of this.grid.axes){\n                scene.remove(a);\n            }\n        }\n\n        \n    }\n\n    toggleCameraRotation(){\n        this.controls.autoRotate = !this.controls.autoRotate;\n    }\n\n    rgbToHex(r, g, b) {\n        function componentToHex(c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n          }\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    }\n\n    hexToRgb(hex) {\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16)\n        } : null;\n      }\n\n    Grid = class Grid {\n        subGrid;\n        axes = [];\n\n        size;\n        colour;\n\n        constructor(s, c){\n            this.size = s;\n            this.colour = c;\n            this.subGrid = new GridHelper(s, s, c, c);\n            this.genAxes();\n            \n        }\n\n        genAxes(){\n            var axesMaterial = new LineBasicMaterial( {\n                color: this.colour,\n                linewidth: 3\n            } );\n\n            let axesSize = this.size /2;\n            this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), axesMaterial));\n            this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), axesMaterial));\n            this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), axesMaterial));\n        }\n\n    }\n\n    Light = class Light {\n        light;\n        colour;\n        intensity;\n        isDirectional;\n\n        constructor(lightType){\n            this.setDefaultLights(lightType);\n        }\n\n        setDefaultLights(lightType){\n            switch(lightType){\n                case View.AMBIENT: \n                    this.colour = \"#0ff0ff\";\n                    this.isDirectional = false;\n                    this.intensity = 0.4;\n                    this.light = new AmbientLight(this.colour, this.intensity);\n                    break;\n                case View.DIRECTIONAL:\n                    this.colour = \"#ffff00\";\n                    this.isDirectional = true;\n                    this.intensity = 0.5;\n                    this.light = new DirectionalLight(this.colour, this.intensity);\n                    break;\n                case View.POINT:\n                    this.colour = \"#ffffff\";\n                    this.isDirectional = true;\n                    this.intensity = 0.6;\n                    this.light = new PointLight(this.colour, this.intensity);\n                    this.light.position.set(5,0,2);\n                    break;\n            }\n        }\n    }\n}\n\n","/home/padrino-eduardo/Desktop/webmga/src/mga/shapes.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import {\n    BufferGeometry,\n    BufferAttribute,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Shape {\n\n    //complexity attributes\n    levels = 2;\n    maxComplexity = [20, 20];\n    minComplexity = [5, 5]\n\n    //shape model attributes\n    args;\n\n    //graphics components\n    stripGeometries = [];\n    fanGeometries = [];\n    stripGeometry;\n\n    constructor() {\n        this.args = arguments[0];\n    }\n\n    static normalize(vec, scale) {\n\n        if (scale != undefined) {\n            vec[0] /= Math.pow(scale[0], 2.0);\n            vec[1] /= Math.pow(scale[1], 2.0);\n            vec[2] /= Math.pow(scale[2], 2.0);\n        }\n\n        let length = Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\n        vec = vec.map(x => x / length);\n\n        return vec;\n    }\n\n    translate(x, y, z) {\n        for (let f of this.fanGeometries) {\n            f.translate(x, y, z);\n        }\n        this.stripGeometry.translate(x, y, z);\n    }\n\n    rotate(e) {\n        for (let f of this.fanGeometries) {\n            f.rotateX(e.x);\n        }\n        this.stripGeometry.rotateX(e.x);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.y);\n        }\n        this.stripGeometry.rotateY(e.y);\n\n        for (let f of this.fanGeometries) {\n            f.rotateY(e.z);\n        }\n        this.stripGeometry.rotateY(e.z);\n    }\n\n    addGeometry(vertices, normals, type) {\n        let g = new BufferGeometry();\n\n        g.setAttribute('position', new BufferAttribute(Float32Array.from(vertices), 3));\n        g.setAttribute('normal', new BufferAttribute(Float32Array.from(normals), 3));\n\n\n        if (type.localeCompare('strip') == 0) {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleStripDrawMode);\n            this.stripGeometries.push(g);\n        } else {\n            g = BufferGeometryUtils.toTrianglesDrawMode(g, TriangleFanDrawMode);\n            this.fanGeometries.push(g);\n        }\n\n    }\n\n    mergeGeometries() {\n        this.stripGeometry = BufferGeometryUtils.mergeBufferGeometries(this.stripGeometries);\n    }\n\n}\n\nexport class Ellipsoid extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            scale = this.args,\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        //renders ellipsoid body vertices and normals\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / ((actComplexity[1] + 1) * 2));\n\n            for (var i = 0; i < actComplexity[1] * 2; ++i) {\n                for (var j = 0; j < actComplexity[0] + 1; ++j) {\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 1) * piece[1]));\n                    }\n\n                    temp.push(Math.cos((i + 1) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(0.0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin((i + 2) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin((i + 2) * piece[1]));\n\n                    }\n                    temp.push(Math.cos((i + 2) * piece[1]) * scale[2]);\n\n                    vertices.push(...temp);\n                    normals.push(...Shape.normalize(temp, scale))\n                    temp = []\n\n                }\n\n            }\n\n        }\n        this.addGeometry(vertices, normals, 'strip');\n\n        vertices = [];\n        normals = [];\n\n        // renders ellipsoid top vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = 0; j < actComplexity[0] + 1; ++j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n        }\n\n        this.addGeometry(vertices, normals, 'fan');\n        vertices = [];\n        normals = []\n\n        // renders ellipsoid bottom vertices and normals\n        temp.push(0.0);\n        temp.push(0.0);\n        temp.push(-scale[2]);\n\n        vertices.push(...temp);\n        normals.push(...Shape.normalize(temp, scale))\n        temp = []\n\n        for (var j = actComplexity[0]; j >= 0; --j) {\n            if (j == 0 || j == actComplexity[0]) {\n                temp.push(-scale[0] * Math.sin(piece[1]));\n                temp.push(0.0);\n            }\n            else {\n                temp.push(-Math.cos(j * piece[0]) * scale[0] * Math.sin(piece[1]));\n                temp.push(-Math.sin(j * piece[0]) * scale[1] * Math.sin(piece[1]));\n            }\n            temp.push(-Math.cos(piece[1]) * scale[2]);\n\n            vertices.push(...temp);\n            normals.push(...Shape.normalize(temp, scale))\n            temp = []\n\n        }\n        this.addGeometry(vertices, normals, 'fan');\n    }\n\n}\n\nexport class Spherocylinder extends Shape {\n\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let actComplexity = [],\n            piece = [],\n            radius = this.args[0],\n            length = this.args[1],\n            vertices,\n            normals,\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(actComplexity[0] / 4);\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(2 * Math.PI / (actComplexity[1] * 4));\n\n            for (let y = 0; y < (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] += length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            for (let y = actComplexity[1] - 1; y < 2 * (actComplexity[1] - 1); ++y) {\n\n                vertices = [];\n                normals = [];\n\n                for (let x = 0; x <= actComplexity[0]; ++x) {\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 1) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n\n                    if (x == 0 || x == actComplexity[0]) {\n                        temp.push(-1 * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                        temp.push(-Math.sin(x * piece[0]) * Math.sin((y + 2) * piece[1]) * radius);\n                    }\n                    temp.push(Math.cos((y + 2) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp))\n                    temp[2] -= length / 2;\n                    vertices.push(...temp);\n                    temp = [];\n                }\n\n                this.addGeometry(vertices, normals, 'strip');\n            }\n\n            normals = [];\n            vertices = [];\n\n            for (let x = 0; x <= actComplexity[0]; ++x) {\n\n                if (x == 0 || x == actComplexity[0]) {\n                    temp.push(-radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(x * piece[0]) * radius);\n                    temp.push(-Math.sin(x * piece[0]) * radius);\n                }\n                temp.push(0);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp[2] = 0;\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n\n            }\n\n            this.addGeometry(vertices, normals, 'strip');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] += length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j <= actComplexity[0]; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] += length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n            normals = [];\n            vertices = [];\n            temp[0] = 0;\n            temp[1] = 0;\n            temp[2] = -radius;\n\n            normals.push(...Shape.normalize(temp))\n            temp[2] -= length / 2;\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-Math.sin(piece[1]) * radius);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * Math.sin(piece[1]) * radius);\n                    temp.push(-Math.sin(j * piece[0]) * Math.sin(piece[1]) * radius);\n                }\n                temp.push(-Math.cos(piece[1]) * radius);\n\n                normals.push(...Shape.normalize(temp))\n                temp[2] -= length / 2;\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n}\n\nexport class Spheroplatelet extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radSphere = this.args[0],\n            radCircle = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            projectionUp = 0,\n            projectionDown = 0,\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push(Math.PI / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                projectionUp = radSphere * Math.sin(i * piece[1]);\n                projectionDown = radSphere * Math.sin((i + 1) * piece[1]);\n\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionUp);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionUp * Math.cos(j * piece[0]));\n                        temp.push(-projectionUp * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos(i * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-projectionDown);\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-projectionDown * Math.cos(j * piece[0]));\n                        temp.push(-projectionDown * Math.sin(j * piece[0]));\n                    }\n                    temp.push(Math.cos((i + 1) * piece[1]) * radSphere);\n\n                    normals.push(...Shape.normalize(temp));\n\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp[0] -= radCircle;\n                    }\n                    else {\n                        temp[0] -= radCircle * Math.cos(j * piece[0]);\n                        temp[1] -= radCircle * Math.sin(j * piece[0]);\n                    }\n\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(radSphere);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-radSphere);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radCircle);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radCircle);\n                    temp.push(-Math.sin(j * piece[0]) * radCircle);\n                }\n\n                temp.push(-radSphere);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n}\n\nexport class CutSphere extends Shape {\n\n    constructor() {\n        super(arguments);\n        this.genGeometries();\n        this.mergeGeometries();\n    }\n\n    genGeometries() {\n        let radius = this.args[0],\n            zCut = this.args[1],\n            plusZ = [0, 0, 1],\n            minusZ = [0, 0, -1],\n            angle = Math.acos(zCut / radius),\n            radiusFan = radius * Math.sin(angle),\n            actComplexity = [],\n            piece = [],\n            vertices = [],\n            normals = [],\n            temp = [];\n\n        for (let currLevel = 0; currLevel < this.levels; ++currLevel) {\n            //calculates complexity of current render\n            actComplexity.push(this.maxComplexity[0] + currLevel * ((this.minComplexity[0] - this.maxComplexity[0]) / (this.levels - 1.0)));\n            actComplexity.push(this.maxComplexity[1] + currLevel * ((this.minComplexity[1] - this.maxComplexity[1]) / (this.levels - 1.0)));\n\n            piece.push(2 * Math.PI / actComplexity[0]);\n            piece.push((Math.PI - 2 * angle) / (actComplexity[1] * 2));\n\n            for (let i = 0; i < actComplexity[1] * 2; ++i) {\n                for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                    // Upper part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + i * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + i * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + i * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n\n                    // Lower part of triangle strip\n                    if (j == 0 || j == actComplexity[0]) {\n                        temp.push(-radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(0);\n                    }\n                    else {\n                        temp.push(-Math.cos(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                        temp.push(-Math.sin(j * piece[0]) * radius * Math.sin(angle + (i + 1) * piece[1]));\n                    }\n                    temp.push(Math.cos(angle + (i + 1) * piece[1]) * radius);\n\n                    normals.push(...Shape.normalize(temp));\n                    vertices.push(...temp);\n                    temp = [];\n                }\n            }\n\n\n            this.addGeometry(vertices, normals, 'strip');\n            vertices = [];\n            normals = [];\n\n\n            // upper plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = 0; j < actComplexity[0] + 1; ++j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(zCut);\n                normals.push(...plusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n            vertices = [];\n            normals = [];\n\n\n\n            // lower plane\n            temp.push(0);\n            temp.push(0);\n            temp.push(-zCut);\n\n            normals.push(...Shape.normalize(temp));\n            vertices.push(...temp);\n            temp = [];\n\n            for (let j = actComplexity[0]; j >= 0; --j) {\n                if (j == 0 || j == actComplexity[0]) {\n                    temp.push(-radiusFan);\n                    temp.push(0);\n                }\n                else {\n                    temp.push(-Math.cos(j * piece[0]) * radiusFan);\n                    temp.push(-Math.sin(j * piece[0]) * radiusFan);\n                }\n\n                temp.push(-zCut);\n                normals.push(...minusZ);\n                vertices.push(...temp);\n                temp = [];\n            }\n\n            this.addGeometry(vertices, normals, 'fan');\n\n        }\n\n    }\n\n\n}\n","/home/padrino-eduardo/Desktop/webmga/src/ui/Top.js",[],"/home/padrino-eduardo/Desktop/webmga/src/ui/Side.js",["103","104","105","106","107"],"/home/padrino-eduardo/Desktop/webmga/src/ui/SubMenus.js",["108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],"/home/padrino-eduardo/Desktop/webmga/src/ui/Tools.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":6,"column":30,"nodeType":"152","messageId":"153","endLine":6,"endColumn":36},{"ruleId":"150","severity":1,"message":"154","line":6,"column":38,"nodeType":"152","messageId":"153","endLine":6,"endColumn":45},{"ruleId":"155","severity":1,"message":"156","line":45,"column":17,"nodeType":"157","messageId":"158","endLine":45,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":49,"column":17,"nodeType":"157","messageId":"158","endLine":49,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":53,"column":17,"nodeType":"157","messageId":"158","endLine":53,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":18,"column":29,"nodeType":"157","messageId":"158","endLine":18,"endColumn":31},{"ruleId":"155","severity":1,"message":"159","line":97,"column":35,"nodeType":"157","messageId":"158","endLine":97,"endColumn":37},{"ruleId":"160","severity":1,"message":"161","line":134,"column":9,"nodeType":"162","messageId":"163","endLine":150,"endColumn":10},{"ruleId":"160","severity":1,"message":"161","line":171,"column":9,"nodeType":"162","messageId":"163","endLine":188,"endColumn":10},{"ruleId":"150","severity":1,"message":"164","line":3,"column":5,"nodeType":"152","messageId":"153","endLine":3,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":111,"column":31,"nodeType":"157","messageId":"158","endLine":111,"endColumn":33},{"ruleId":"160","severity":1,"message":"161","line":165,"column":13,"nodeType":"162","messageId":"163","endLine":185,"endColumn":14},{"ruleId":"155","severity":1,"message":"159","line":30,"column":19,"nodeType":"157","messageId":"158","endLine":30,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":73,"column":41,"nodeType":"157","messageId":"158","endLine":73,"endColumn":43},{"ruleId":"155","severity":1,"message":"156","line":117,"column":27,"nodeType":"157","messageId":"158","endLine":117,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":117,"column":37,"nodeType":"157","messageId":"158","endLine":117,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":132,"column":27,"nodeType":"157","messageId":"158","endLine":132,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":132,"column":37,"nodeType":"157","messageId":"158","endLine":132,"endColumn":39},{"ruleId":"165","severity":1,"message":"166","line":166,"column":18,"nodeType":"152","messageId":"167","endLine":166,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":167,"column":19,"nodeType":"157","messageId":"158","endLine":167,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":167,"column":29,"nodeType":"157","messageId":"158","endLine":167,"endColumn":31},{"ruleId":"165","severity":1,"message":"166","line":195,"column":18,"nodeType":"152","messageId":"167","endLine":195,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":196,"column":19,"nodeType":"157","messageId":"158","endLine":196,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":196,"column":29,"nodeType":"157","messageId":"158","endLine":196,"endColumn":31},{"ruleId":"155","severity":1,"message":"156","line":248,"column":27,"nodeType":"157","messageId":"158","endLine":248,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":248,"column":37,"nodeType":"157","messageId":"158","endLine":248,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":263,"column":27,"nodeType":"157","messageId":"158","endLine":263,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":263,"column":37,"nodeType":"157","messageId":"158","endLine":263,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":288,"column":27,"nodeType":"157","messageId":"158","endLine":288,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":288,"column":37,"nodeType":"157","messageId":"158","endLine":288,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":303,"column":27,"nodeType":"157","messageId":"158","endLine":303,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":303,"column":37,"nodeType":"157","messageId":"158","endLine":303,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":327,"column":23,"nodeType":"157","messageId":"158","endLine":327,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":327,"column":33,"nodeType":"157","messageId":"158","endLine":327,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":362,"column":23,"nodeType":"157","messageId":"158","endLine":362,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":362,"column":33,"nodeType":"157","messageId":"158","endLine":362,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":392,"column":23,"nodeType":"157","messageId":"158","endLine":392,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":392,"column":33,"nodeType":"157","messageId":"158","endLine":392,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":450,"column":27,"nodeType":"157","messageId":"158","endLine":450,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":450,"column":37,"nodeType":"157","messageId":"158","endLine":450,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":462,"column":27,"nodeType":"157","messageId":"158","endLine":462,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":462,"column":37,"nodeType":"157","messageId":"158","endLine":462,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":474,"column":27,"nodeType":"157","messageId":"158","endLine":474,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":474,"column":37,"nodeType":"157","messageId":"158","endLine":474,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":486,"column":27,"nodeType":"157","messageId":"158","endLine":486,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":486,"column":37,"nodeType":"157","messageId":"158","endLine":486,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":516,"column":23,"nodeType":"157","messageId":"158","endLine":516,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":516,"column":33,"nodeType":"157","messageId":"158","endLine":516,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":545,"column":23,"nodeType":"157","messageId":"158","endLine":545,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":545,"column":33,"nodeType":"157","messageId":"158","endLine":545,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":600,"column":27,"nodeType":"157","messageId":"158","endLine":600,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":600,"column":37,"nodeType":"157","messageId":"158","endLine":600,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":615,"column":27,"nodeType":"157","messageId":"158","endLine":615,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":615,"column":37,"nodeType":"157","messageId":"158","endLine":615,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":647,"column":23,"nodeType":"157","messageId":"158","endLine":647,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":647,"column":33,"nodeType":"157","messageId":"158","endLine":647,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":678,"column":23,"nodeType":"157","messageId":"158","endLine":678,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":678,"column":33,"nodeType":"157","messageId":"158","endLine":678,"endColumn":35},{"ruleId":"150","severity":1,"message":"168","line":2,"column":19,"nodeType":"152","messageId":"153","endLine":2,"endColumn":26},{"ruleId":"150","severity":1,"message":"169","line":2,"column":28,"nodeType":"152","messageId":"153","endLine":2,"endColumn":35},{"ruleId":"150","severity":1,"message":"170","line":2,"column":48,"nodeType":"152","messageId":"153","endLine":2,"endColumn":51},{"ruleId":"150","severity":1,"message":"171","line":2,"column":53,"nodeType":"152","messageId":"153","endLine":2,"endColumn":56},{"ruleId":"160","severity":1,"message":"161","line":72,"column":9,"nodeType":"162","messageId":"163","endLine":90,"endColumn":10},{"ruleId":"150","severity":1,"message":"172","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":18},{"ruleId":"150","severity":1,"message":"154","line":2,"column":20,"nodeType":"152","messageId":"153","endLine":2,"endColumn":27},{"ruleId":"150","severity":1,"message":"173","line":2,"column":29,"nodeType":"152","messageId":"153","endLine":2,"endColumn":36},{"ruleId":"150","severity":1,"message":"174","line":2,"column":38,"nodeType":"152","messageId":"153","endLine":2,"endColumn":41},{"ruleId":"150","severity":1,"message":"175","line":2,"column":49,"nodeType":"152","messageId":"153","endLine":2,"endColumn":55},{"ruleId":"150","severity":1,"message":"176","line":2,"column":84,"nodeType":"152","messageId":"153","endLine":2,"endColumn":93},{"ruleId":"150","severity":1,"message":"177","line":2,"column":105,"nodeType":"152","messageId":"153","endLine":2,"endColumn":116},{"ruleId":"150","severity":1,"message":"178","line":2,"column":118,"nodeType":"152","messageId":"153","endLine":2,"endColumn":125},{"ruleId":"150","severity":1,"message":"179","line":2,"column":127,"nodeType":"152","messageId":"153","endLine":2,"endColumn":132},{"ruleId":"150","severity":1,"message":"180","line":2,"column":134,"nodeType":"152","messageId":"153","endLine":2,"endColumn":143},{"ruleId":"150","severity":1,"message":"151","line":2,"column":191,"nodeType":"152","messageId":"153","endLine":2,"endColumn":197},{"ruleId":"150","severity":1,"message":"181","line":2,"column":199,"nodeType":"152","messageId":"153","endLine":2,"endColumn":205},{"ruleId":"150","severity":1,"message":"182","line":2,"column":207,"nodeType":"152","messageId":"153","endLine":2,"endColumn":213},{"ruleId":"150","severity":1,"message":"183","line":2,"column":215,"nodeType":"152","messageId":"153","endLine":2,"endColumn":226},{"ruleId":"150","severity":1,"message":"184","line":2,"column":248,"nodeType":"152","messageId":"153","endLine":2,"endColumn":259},{"ruleId":"150","severity":1,"message":"185","line":2,"column":269,"nodeType":"152","messageId":"153","endLine":2,"endColumn":279},{"ruleId":"150","severity":1,"message":"186","line":3,"column":17,"nodeType":"152","messageId":"153","endLine":3,"endColumn":26},{"ruleId":"150","severity":1,"message":"187","line":3,"column":28,"nodeType":"152","messageId":"153","endLine":3,"endColumn":36},{"ruleId":"150","severity":1,"message":"172","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":18},{"ruleId":"150","severity":1,"message":"154","line":3,"column":45,"nodeType":"152","messageId":"153","endLine":3,"endColumn":52},{"ruleId":"150","severity":1,"message":"173","line":3,"column":54,"nodeType":"152","messageId":"153","endLine":3,"endColumn":61},{"ruleId":"150","severity":1,"message":"174","line":3,"column":63,"nodeType":"152","messageId":"153","endLine":3,"endColumn":66},{"ruleId":"150","severity":1,"message":"188","line":3,"column":68,"nodeType":"152","messageId":"153","endLine":3,"endColumn":72},{"ruleId":"150","severity":1,"message":"175","line":3,"column":74,"nodeType":"152","messageId":"153","endLine":3,"endColumn":80},{"ruleId":"150","severity":1,"message":"176","line":3,"column":82,"nodeType":"152","messageId":"153","endLine":3,"endColumn":91},{"ruleId":"150","severity":1,"message":"189","line":3,"column":93,"nodeType":"152","messageId":"153","endLine":3,"endColumn":101},{"ruleId":"150","severity":1,"message":"178","line":3,"column":116,"nodeType":"152","messageId":"153","endLine":3,"endColumn":123},{"ruleId":"150","severity":1,"message":"180","line":3,"column":132,"nodeType":"152","messageId":"153","endLine":3,"endColumn":141},{"ruleId":"150","severity":1,"message":"190","line":3,"column":154,"nodeType":"152","messageId":"153","endLine":3,"endColumn":164},{"ruleId":"150","severity":1,"message":"191","line":3,"column":166,"nodeType":"152","messageId":"153","endLine":3,"endColumn":171},{"ruleId":"150","severity":1,"message":"192","line":3,"column":173,"nodeType":"152","messageId":"153","endLine":3,"endColumn":177},{"ruleId":"150","severity":1,"message":"151","line":3,"column":189,"nodeType":"152","messageId":"153","endLine":3,"endColumn":195},{"ruleId":"150","severity":1,"message":"181","line":3,"column":197,"nodeType":"152","messageId":"153","endLine":3,"endColumn":203},{"ruleId":"150","severity":1,"message":"182","line":3,"column":205,"nodeType":"152","messageId":"153","endLine":3,"endColumn":211},{"ruleId":"150","severity":1,"message":"186","line":4,"column":17,"nodeType":"152","messageId":"153","endLine":4,"endColumn":26},{"ruleId":"150","severity":1,"message":"193","line":26,"column":40,"nodeType":"152","messageId":"153","endLine":26,"endColumn":45},{"ruleId":"150","severity":1,"message":"194","line":39,"column":47,"nodeType":"152","messageId":"153","endLine":39,"endColumn":50},{"ruleId":"150","severity":1,"message":"195","line":71,"column":20,"nodeType":"152","messageId":"153","endLine":71,"endColumn":27},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Sidebar' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'OrthographicCamera' is defined but never used.","no-redeclare","'j' is already defined.","redeclared","'Whisper' is defined but never used.","'Tooltip' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Dropdown' is defined but never used.","'Sidenav' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Container' is defined but never used.","'InputNumber' is defined but never used.","'Content' is defined but never used.","'Panel' is defined but never used.","'HelpBlock' is defined but never used.","'Footer' is defined but never used.","'Button' is defined but never used.","'FlexboxGrid' is defined but never used.","'FormControl' is defined but never used.","'IconButton' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'disable' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]