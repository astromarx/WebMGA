[{"/home/padrino-eduardo/Desktop/webmga/src/index.js":"1","/home/padrino-eduardo/Desktop/webmga/src/App.js":"2","/home/padrino-eduardo/Desktop/webmga/src/Controller.js":"3","/home/padrino-eduardo/Desktop/webmga/src/View/Top.js":"4","/home/padrino-eduardo/Desktop/webmga/src/View/Side.js":"5","/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js":"6","/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js":"7","/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js":"8","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js":"9","/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js":"10","/home/padrino-eduardo/Desktop/webmga/src/View/View.js":"11","/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js":"12","/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js":"13","/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js":"14"},{"size":198,"mtime":1609107771761,"results":"15","hashOfConfig":"16"},{"size":929,"mtime":1609596111151,"results":"17","hashOfConfig":"16"},{"size":3502,"mtime":1612468423552,"results":"18","hashOfConfig":"16"},{"size":3094,"mtime":1612304448964,"results":"19","hashOfConfig":"16"},{"size":5729,"mtime":1612468423552,"results":"20","hashOfConfig":"16"},{"size":11631,"mtime":1612470102224,"results":"21","hashOfConfig":"16"},{"size":1031,"mtime":1612301487467,"results":"22","hashOfConfig":"16"},{"size":27775,"mtime":1612468990898,"results":"23","hashOfConfig":"16"},{"size":23989,"mtime":1611771380330,"results":"24","hashOfConfig":"16"},{"size":6442,"mtime":1612302492789,"results":"25","hashOfConfig":"16"},{"size":3819,"mtime":1612470436977,"results":"26","hashOfConfig":"16"},{"size":6708,"mtime":1612466794442,"results":"27","hashOfConfig":"16"},{"size":749,"mtime":1612462581019,"results":"28","hashOfConfig":"16"},{"size":3336,"mtime":1612470089656,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fh0xym",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},"/home/padrino-eduardo/Desktop/webmga/src/index.js",[],"/home/padrino-eduardo/Desktop/webmga/src/App.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Controller.js",["62","63"],"/home/padrino-eduardo/Desktop/webmga/src/View/Top.js",[],"/home/padrino-eduardo/Desktop/webmga/src/View/Side.js",["64","65","66","67","68","69"],"\nimport { Sidebar, Whisper, Tooltip, Nav, Icon, Row, Col, Navbar, Container, Content, IconButton } from 'rsuite';\nimport React, { Component } from \"react\";\nimport { ViewOptions, AdditionalLightOptions, AmbientLightOptions, ReferenceOptions, SlicingOptions, ModelsOptions } from './SubMenus'\nimport { CatmullRomCurve3 } from 'three';\n\n\nconst NavToggle = ({ expand, onChange }) => {\n    return (\n        <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n            <Navbar.Body>\n                <Nav pullRight>\n                    <IconButton\n                        circle\n                        style={{ textAlign: 'center', margin: 10 }}\n                        onClick={onChange}\n                        appearance=\"default\"\n                        icon={<Icon icon={expand ? 'angle-left' : 'angle-right'} />} />\n                </Nav>\n            </Navbar.Body>\n        </Navbar>\n    );\n};\n\nconst navItemStyle = { margin: 6.5 };\n\nvar sidebarHeight = window.innerHeight - 56; \n\nconst CustomNav = ({ active, onSelect, ...props }) => {\n    return (\n        <div>\n        <Nav {...props} activeKey={active} onSelect={onSelect} style={{  backgroundColor: '#101010', height: sidebarHeight }}>\n            <Nav.Item title=\"Models\" tooltip eventKey=\"Models\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"shapes\" />}>\n            </Nav.Item>\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>View</Tooltip>)}> */}\n            <Nav.Item eventKey=\"View\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"eye\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Ambient Light</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Ambient Light\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"sun-o\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Other Lighting</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Other Lighting\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"creative\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Slicing</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Slicing\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cut\" />} />\n            {/* </Whisper> */}\n            {/* <Whisper placement=\"right\" trigger=\"hover\" speaker={(<Tooltip>Reference Frame Frame</Tooltip>)}> */}\n            <Nav.Item eventKey=\"Reference\" icon={<Icon style={navItemStyle} size=\"lg\" icon=\"cube\" />} />\n            {/* </Whisper> */}\n            \n        </Nav>\n        </div>\n    );\n};\n\nconst MenuContent = ({ active, expand, onChange, model }) => {\n\n    var menuContent = [];\n\n    if (!expand) {\n        menuContent.push(<NavToggle expand={expand} onChange={onChange} />);\n    } else {\n        menuContent.push(\n            <div  style={{backgroundColor: '#0F131B'}}>\n            <Nav>\n                <Navbar appearance=\"subtle\">\n                    <Nav pullLeft>\n                        <h3 style={{ marginTop: 15, marginLeft: 30 }}>{active}</h3>\n                    </Nav>\n                    <Nav pullRight>\n                        <NavToggle expand={expand} onChange={onChange} />\n                    </Nav>\n                </Navbar>\n\n            </Nav>\n            </div>\n        );\n    }\n\n    if (expand) {\n        switch (active) {\n            case \"Models\":\n                menuContent.push(<ModelsOptions model={model}/>);\n                break;\n            case \"View\":\n                menuContent.push(<ViewOptions model={model}/>);\n                break;\n            case \"Ambient Light\":\n                menuContent.push(<AmbientLightOptions model={model}/>);\n                break;\n            case \"Other Lighting\":\n                menuContent.push(<AdditionalLightOptions model={model}/>);\n                break;\n            case \"Slicing\":\n                menuContent.push(<SlicingOptions model={model} />);\n                break;\n            case \"Reference\":\n                menuContent.push(<ReferenceOptions model={model}/>);\n                break;\n        }\n    }\n\n    return menuContent;\n\n}\n\nclass SideMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: props.sidebarExpanded,\n            active: 'Models'\n        };\n        this.model = props.model;\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n        this.model.toggleSidebar();\n\n    }\n    handleSelect(activeKey) {\n        this.setState({\n            active: activeKey\n        });\n\n        if (!this.state.expand) {\n            this.handleToggle();\n        }\n\n    }\n    render() {\n        const { expand } = this.state;\n        const { active } = this.state;\n        return (\n            <div>\n                <Sidebar\n                    style={{ display: 'flex', flexDirection: 'column' }}\n                    width={expand ? 356 : 56}\n                    collapsible\n                    appearance=\"default\" \n                >\n                    <Container>\n                        <Sidebar width={56} >\n                            <CustomNav vertical appearance=\"subtle\" active={active} onSelect={this.handleSelect} />\n                        </Sidebar>\n                        <Content >\n                            <MenuContent active={active} expand={expand} onChange={this.handleToggle} model={this.model}/>\n                        </Content>\n\n                    </Container>\n\n                </Sidebar>\n            </div>\n\n        );\n    }\n}\n\n\nexport default SideMenu;",["70","71"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Model.js",["72","73","74","75","76","77","78","79"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Light.js",["80"],"/home/padrino-eduardo/Desktop/webmga/src/View/SubMenus.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"\nimport { Dropdown, Sidebar, Sidenav, Nav, Icon, Navbar, ButtonGroup, Tooltip, Whisper, Divider, Container, Checkbox, InputNumber, Content, Panel, HelpBlock, FormGroup, RadioGroup, Radio, Grid, Row, Col, Header, Footer, Button, FlexboxGrid, Form, ControlLabel, FormControl, Slider, IconButton } from 'rsuite';\nimport React from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\n\nconst LODToolTip = (\n    <Tooltip>\n        Decreasing LOD will increase rendering speed.\n    </Tooltip>\n);\n\nexport class ModelsOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ModelState;\n        this.model = props.model;\n\n        this.selectShape = this.selectShape.bind(this);\n        this.selectSet = this.selectSet.bind(this);\n        this.updateParameter = this.updateParameter.bind(this);\n        this.toggleWireframe = this.toggleWireframe.bind(this);\n        this.toggleColour = this.toggleColour.bind(this);\n        this.updateShininess = this.updateShininess.bind(this);\n        this.updateUserColour = this.updateUserColour.bind(this);\n    }\n\n    updateShininess(val) {\n        this.setState({\n            shininess: val\n        });\n        View.ModelState.configurations[this.state.active].shininess = val;\n        this.model.updateShininess(this.state.active, val)\n    }\n\n    updateUserColour(value, type) {\n        let colour = this.state.configurations[this.state.active].colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateUserColour(this.state.active, colour);\n        View.ModelState.configurations[this.state.active].colour = colour;\n    }\n\n    toggleColour() {\n        let toggle = !this.state.configurations[this.state.active].colourFromDirector;\n        this.setState({\n            colourFromDirector: toggle\n        });\n        View.ModelState.configurations[this.state.active].colourFromDirector = toggle;\n        this.model.toggleUserColour(this.state.active, toggle);\n    }\n\n    toggleWireframe() {\n        let toggle = !this.state.configurations[this.state.active].displayAsWireframe;\n        this.setState({\n            displayAsWireframe: toggle\n        });\n        View.ModelState.configurations[this.state.active].displayAsWireframe = toggle;\n        this.model.toggleWireframe(this.state.active, toggle);\n    }\n\n    updateParameter(val, index) {\n        let parameter = parseFloat(val);\n        let globalState = View.ModelState.configurations[this.state.active];\n        this.state.configurations[this.state.active].parameters.vals[index] = parameter;\n        globalState.parameters.vals[index] = parameter;\n        this.model.updateShape(globalState.shape, this.state.active, globalState.parameters);\n        this.reset();\n    }\n\n    reset() {\n        let i;\n        if (this.state.reset > 50) {\n            i = 0;\n        } else {\n            i = ++this.state.reset;\n        }\n        this.setState(\n            {\n                reset: i\n            }\n        );\n    }\n\n    selectSet(val) {\n        for (let i = 0; i < this.state.sets.length; i++) {\n            if (this.state.sets[i].localeCompare(val) == 0) {\n                this.setState({\n                    active: i\n                })\n                View.ModelState.active = i;\n                break;\n            }\n        }\n        this.reset();\n    }\n\n    selectShape(val) {\n        let parameters = this.model.getParameters(val);\n        this.setState(\n            {\n                shape: val,\n                parameters: parameters\n            }\n        );\n        this.reset();\n        View.ModelState.configurations[this.state.active].shape = val;\n        View.ModelState.configurations[this.state.active].parameters = parameters;\n        this.model.updateShape(val, this.state.active, parameters);\n    }\n\n    render() {\n        const configState = this.state.configurations[this.state.active];\n        const reset = this.state.reset;\n        const title = configState.title;\n        const shapes = [\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cone\", \"Cylinder\", \"Torus\"];\n        const sets = this.state.sets;\n\n        return (\n            <div key={reset}>\n\n\n                <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n                <ParameterInput f={this.selectSet} selectingSet title=\"Set\" values={sets} active={title} />\n                <ParameterInput f={this.selectShape} title=\"Shape\" values={shapes} active={configState.shape} />\n                <ParameterSet f={this.updateParameter} titles={configState.parameters.names} values={configState.parameters.vals} />\n                <br />\n                <Divider><strong style={dividerStyle}>  Material </strong></Divider>\n\n                <Row className=\"show-grid\">\n                    <Col xs={1} />\n                    <Col xs={20}>\n                        <Checkbox checked={configState.displayAsWireframe} onClick={this.toggleWireframe}> Display as Wireframe </Checkbox>\n                        <Checkbox checked={configState.colourFromDirector} onClick={this.toggleColour}> Colour from Director </Checkbox>\n                        <br />\n                    </Col>\n                </Row>\n\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.r} type={'r'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.g} type={'g'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.b} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Shininess </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={configState.shininess} f={this.updateShininess} />\n\n            </div>\n        );\n    }\n}\n\nexport class ViewOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.ViewOptionsState;\n\n        this.model = props.model;\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.selectCameraType = this.selectCameraType.bind(this);\n        this.updateLOD = this.updateLOD.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n\n    }\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        View.ViewOptionsState.rotating = !View.ViewOptionsState.rotating;\n        this.model.toggleCameraRotation();\n    }\n    selectCameraType(value) {\n        this.setState({\n            type: value\n        });\n        View.ViewOptionsState.cameraType = value;\n        this.model.setCamera(value);\n    }\n    updateLOD(value) {\n        this.setState({\n            LOD: value\n        });\n        View.ViewOptionsState.LOD = value;\n        this.model.updateLOD(value - 1);\n    }\n\n    updateLookat(value, type) {\n        let lookAt = this.state.lookAt;\n\n        switch (type) {\n            case 0:\n                lookAt.x = parseFloat(value);\n                break;\n            case 1:\n                lookAt.y = parseFloat(value);\n                break;\n            case 2:\n                lookAt.z = parseFloat(value);\n                break;\n        }\n\n        console.log(lookAt)\n        this.model.updateLookAt(lookAt);\n        View.ViewOptionsState.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const rotating = this.state.rotating;\n\n        return (\n            <div >\n\n                <Divider><strong style={dividerStyle}> Camera </strong></Divider>\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox checked={rotating} onClick={this.toggleAutorotate}> AutoRotate</Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n\n\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectCameraType}>\n                                    <br />\n                                    <p>Type</p>\n                                    <Radio defaultChecked value=\"perspective\">Perspective </Radio>\n                                    <Radio value=\"orthographic\">Orthographic </Radio>\n                                </RadioGroup>\n                            </FormGroup>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p> Look at</p>\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <ParameterSet titles={[\"X position\", \"Y position\", \"Z position\"]} values={[0.0, 0.0, 0.0]} f={this.updateLookat} />\n                <br />\n\n\n\n                <Divider><strong style={dividerStyle}> Perfomance Tuning </strong></Divider>\n\n                <Form style={{ marginLeft: TITLE_LEFT_MARGIN }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Level of Detail</ControlLabel>\n                        <Whisper placement=\"top\" trigger=\"hover\" speaker={LODToolTip}>\n                            <Icon icon=\"question-circle\" size=\"lg\" style={{ marginTop: 12 }} />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n\n                    min={1}\n                    step={1}\n                    max={5}\n                    defaultValue={4}\n                    graduated\n                    progress\n                    style={{ width: 220, marginLeft: 40 }}\n                    onChange={this.updateLOD}\n                    renderMark={mark => {\n                        return mark;\n                    }}\n                />\n\n            </div>);\n    }\n}\n\nexport class SlicingOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.SlicingState;\n        this.model = props.model;\n\n        this.toggleIntersection = this.toggleIntersection.bind(this);\n        this.toggleHelperX = this.toggleHelperX.bind(this);\n        this.toggleHelperY = this.toggleHelperY.bind(this);\n        this.toggleHelperZ = this.toggleHelperZ.bind(this);\n        this.updateHelpers = this.updateHelpers.bind(this);\n        this.updateSlicer = this.updateSlicer.bind(this);\n    }\n\n    toggleIntersection() {\n        let toggle = !this.state.clipIntersection;\n        this.setState(\n            {\n                clipIntersection: toggle\n            }\n        );\n        View.SlicingState.clipIntersection = toggle;\n        this.model.toggleClipIntersection(toggle);\n    }\n\n    updateHelpers(helpers) {\n        this.setState(\n            {\n                helpers: helpers\n            }\n        );\n        View.SlicingState.helpers = helpers;\n    }\n\n    toggleHelperX() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[0];\n        helpers[0] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(0, toggle);\n    }\n\n    toggleHelperY() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[1];\n        helpers[1] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(1, toggle);\n    }\n\n    toggleHelperZ() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[2];\n        helpers[2] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(2, toggle);\n    }\n\n    updateSlicer(i, vals) {\n        switch (i) {\n            case 0:\n                View.SlicingState.x = vals;\n                break;\n            case 1:\n                View.SlicingState.y = vals;\n                break;\n            case 2:\n                View.SlicingState.z = vals;\n                break;\n        }\n\n        this.model.updateSlicer(i, vals);\n    }\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={20}>\n                            <Checkbox checked={state.clipIntersection} onClick={this.toggleIntersection}> Slice Intersection</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"X : \" f={this.updateSlicer} index={0} vals={state.x} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[0]} onClick={this.toggleHelperX}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Y : \" f={this.updateSlicer} index={1} vals={state.y} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[1]} onClick={this.toggleHelperY}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Z : \" f={this.updateSlicer} index={2} vals={state.z} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[2]} onClick={this.toggleHelperZ}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n            </div>\n        );\n    }\n\n}\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.PointLightState;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') == 0) {\n            this.setState(View.DirectionalLightState);\n        } else {\n            this.setState(View.PointLightState);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.enabled = enabled;\n            intensity = View.PointLightState.colour.i;\n        } else {\n            View.DirectionalLightState.enabled = enabled;\n            intensity = View.DirectionalLightState.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n\n        if (this.state.active.localeCompare('point') == 0) {\n            View.PointLightState.colour.i = intensity;\n        } else {\n            View.DirectionalLightState.colour.i = intensity;\n        }\n\n\n    }\n    updateColour(value, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n            default:\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLight(2, colour);\n            View.PointLightState.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.DirectionalLightState.colour = colour;\n        }\n    }\n    updatePosition(value, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = value;\n                break;\n            case 'y':\n                position.y = value;\n                break;\n            case 'z':\n                position.z = value;\n                break;\n        }\n\n        if (this.state.active.localeCompare('point') == 0) {\n            this.model.updateLightPosition(2, position);\n            View.PointLightState.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.DirectionalLightState.position = position;\n        }\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.AmbientLightState;\n\n        this.model = props.model;\n\n        this.updateAmbientLightColour = this.updateAmbientLightColour.bind(this);\n        this.updateBackgroundColour = this.updateBackgroundColour.bind(this);\n    }\n    updateAmbientLightColour(value, type) {\n        let colour = this.state.ambientLightColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n            case 'i':\n                colour.i = value;\n                break;\n        }\n        this.model.updateLight(0, colour);\n        View.AmbientLightState.ambientLightColour = colour;\n    }\n    updateBackgroundColour(value, type) {\n        let colour = this.state.backgroundColour;\n\n        switch (type) {\n            case 'r':\n                colour.r = value;\n                break;\n            case 'g':\n                colour.g = value;\n                break;\n            case 'b':\n                colour.b = value;\n                break;\n        }\n        this.model.updateBg(colour);\n        View.AmbientLightState.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateAmbientLightColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateAmbientLightColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateAmbientLightColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateAmbientLightColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBackgroundColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBackgroundColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBackgroundColour} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class ReferenceOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.ReferenceState;\n\n        this.model = props.model;\n        this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n\n    }\n    updateColour(value, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = value;\n                break;\n            case 'g':\n                rgb.g = value;\n                break;\n            case 'b':\n                rgb.b = value;\n                break;\n        }\n        this.model.updateReferenceColour(rgb);\n        View.ReferenceState.gridColour = rgb;\n    }\n    updateGridSize(value) {\n        this.model.updateGridSize(value);\n        View.ReferenceState.size = value;\n    }\n    toggleBoundingShapeEnabled() {\n        let toggle = !View.ReferenceState.boundingShapeEnabled;\n        this.setState({\n            boundingShapeEnabled: toggle\n        });\n        View.ReferenceState.boundingShapeEnabled = toggle;\n        this.model.updateBoundingShape(this.state.activeShape, toggle);\n    }\n    selectShape(value) {\n        this.setState({\n            activeShape: value\n        });\n        View.ReferenceState.activeShape = value;\n        this.model.updateBoundingShape(value, this.state.boundingShapeEnabled);\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        View.ReferenceState.showAxes = !View.ReferenceState.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        View.ReferenceState.showGrid = !View.ReferenceState.showGrid;\n    }\n\n    render() {\n        const enabled = this.state.boundingShapeEnabled;\n        const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Elements </strong></Divider>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={enabled} onClick={this.toggleBoundingShapeEnabled}> Bounding Shape </Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={3} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    <Radio disabled={!enabled} value=\"sphere\" >Sphere </Radio>\n                                    {/* TO DO CYLINDER */}\n                                    <Radio disabled={true} value=\"cylinder\" >Cylinder </Radio>\n\n                                </RadioGroup>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <br/>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={showAxes} onClick={this.toggleAxes}> Show Axes</Checkbox>\n                            <Checkbox checked={showGrid} onClick={this.toggleGrid}> Show Grid</Checkbox>\n                        </Col>\n                    </Row>\n\n                    <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                    <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n\n                </Grid>\n\n                <Divider><strong style={dividerStyle}> Colour </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateColour} type={'b'} />\n\n\n                <br />\n            </div>\n        );\n    }\n}","/home/padrino-eduardo/Desktop/webmga/src/Model/Shapes.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"/home/padrino-eduardo/Desktop/webmga/src/View/Tools.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"/home/padrino-eduardo/Desktop/webmga/src/View/View.js",["189","190","191"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Set.js",["192","193","194"],"/home/padrino-eduardo/Desktop/webmga/src/Model/Parameters.js",[],"/home/padrino-eduardo/Desktop/webmga/src/Model/Tools.js",["195","196","197"],"import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3,\n    BufferGeometry,\n    Line,\n    WireframeGeometry,\n    LineSegments,\n    Box3Helper,\n    Box3,\n    SphereBufferGeometry,\n    MeshBasicMaterial,\n    Mesh\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nexport class Tools {\n    subGrid;\n    axes = [];\n    boundingShape;\n    boundingShapeType;\n    setsGeometry;\n    size;\n    colour;\n    material;\n\n    constructor(s, c) {\n        this.size = s;\n        this.colour = c;\n\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n\n        this.genAxes();\n        this.genSubgrid();\n\n        this.boundingShapeType = 'box';\n        this.setsGeometry = null;\n    }\n\n    genBoundingShape(type, sets) {\n        this.boundingShapeType = type;\n        \n        this.boundingShape = null;\n\n        if (this.setsGeometry == null) {\n            let geometries = [];\n            for (let set of sets) {\n                for (let elem of set.elements) {\n                    geometries.push(BufferGeometryUtils.mergeBufferGeometries(elem.geometries));\n                }\n            }\n            this.setsGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n        }\n\n\n\n        switch (type) {\n            case 'box':\n                let box = new Box3();\n                this.setsGeometry.computeBoundingBox()\n                box.copy(this.setsGeometry.boundingBox);\n                this.boundingShape = new Box3Helper(box, this.colour);\n                break;\n            case 'sphere':\n                this.setsGeometry.computeBoundingSphere();\n                let sphere = this.setsGeometry.boundingSphere;\n                console.log(sphere);\n                let geom = new SphereBufferGeometry(sphere.radius, 10, 10);\n                geom.translate(sphere.center.x, sphere.center.y, sphere.center.z);\n                let material = new MeshBasicMaterial({ color: this.colour });\n                material.wireframe = true;\n                this.boundingShape = new Mesh(geom, material);\n                break;\n            case 'cylinder':\n                // this.boundingShape.copy(this.setsGeometry.computeBoundingBox());\n                // break;\n        }\n\n\n\n        return this.boundingShape;\n\n    }\n\n\n    updateColour(colour) {\n        this.colour = colour;\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    updateSize(size) {\n        this.size = size;\n        this.genAxes();\n        this.genSubgrid();\n    }\n\n    genSubgrid() {\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes() {\n        this.axes = [];\n        let axesSize = this.size / 2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), this.material));\n    }\n\n}\n\nexport default Tools;",{"ruleId":"198","severity":1,"message":"199","line":102,"column":17,"nodeType":"200","messageId":"201","endLine":102,"endColumn":20},{"ruleId":"198","severity":1,"message":"202","line":129,"column":5,"nodeType":"200","messageId":"201","endLine":129,"endColumn":10},{"ruleId":"198","severity":1,"message":"203","line":2,"column":19,"nodeType":"200","messageId":"201","endLine":2,"endColumn":26},{"ruleId":"198","severity":1,"message":"204","line":2,"column":28,"nodeType":"200","messageId":"201","endLine":2,"endColumn":35},{"ruleId":"198","severity":1,"message":"205","line":2,"column":48,"nodeType":"200","messageId":"201","endLine":2,"endColumn":51},{"ruleId":"198","severity":1,"message":"206","line":2,"column":53,"nodeType":"200","messageId":"201","endLine":2,"endColumn":56},{"ruleId":"198","severity":1,"message":"207","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":81,"column":9,"nodeType":"210","messageId":"211","endLine":100,"endColumn":10},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"198","severity":1,"message":"216","line":7,"column":5,"nodeType":"200","messageId":"201","endLine":7,"endColumn":19},{"ruleId":"217","severity":1,"message":"218","line":83,"column":21,"nodeType":"219","messageId":"220","endLine":83,"endColumn":33},{"ruleId":"217","severity":1,"message":"218","line":84,"column":20,"nodeType":"219","messageId":"220","endLine":84,"endColumn":32},{"ruleId":"221","severity":1,"message":"222","line":158,"column":18,"nodeType":"223","messageId":"224","endLine":158,"endColumn":20},{"ruleId":"221","severity":1,"message":"222","line":173,"column":29,"nodeType":"223","messageId":"224","endLine":173,"endColumn":31},{"ruleId":"221","severity":1,"message":"222","line":298,"column":31,"nodeType":"223","messageId":"224","endLine":298,"endColumn":33},{"ruleId":"208","severity":1,"message":"209","line":315,"column":9,"nodeType":"210","messageId":"211","endLine":341,"endColumn":10},{"ruleId":"221","severity":1,"message":"222","line":415,"column":21,"nodeType":"223","messageId":"224","endLine":415,"endColumn":23},{"ruleId":"208","severity":1,"message":"209","line":28,"column":9,"nodeType":"210","messageId":"211","endLine":40,"endColumn":10},{"ruleId":"198","severity":1,"message":"225","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":18},{"ruleId":"198","severity":1,"message":"226","line":2,"column":20,"nodeType":"200","messageId":"201","endLine":2,"endColumn":27},{"ruleId":"198","severity":1,"message":"227","line":2,"column":29,"nodeType":"200","messageId":"201","endLine":2,"endColumn":36},{"ruleId":"198","severity":1,"message":"228","line":2,"column":49,"nodeType":"200","messageId":"201","endLine":2,"endColumn":55},{"ruleId":"198","severity":1,"message":"229","line":2,"column":57,"nodeType":"200","messageId":"201","endLine":2,"endColumn":68},{"ruleId":"198","severity":1,"message":"230","line":2,"column":97,"nodeType":"200","messageId":"201","endLine":2,"endColumn":106},{"ruleId":"198","severity":1,"message":"231","line":2,"column":118,"nodeType":"200","messageId":"201","endLine":2,"endColumn":129},{"ruleId":"198","severity":1,"message":"232","line":2,"column":131,"nodeType":"200","messageId":"201","endLine":2,"endColumn":138},{"ruleId":"198","severity":1,"message":"233","line":2,"column":140,"nodeType":"200","messageId":"201","endLine":2,"endColumn":145},{"ruleId":"198","severity":1,"message":"234","line":2,"column":147,"nodeType":"200","messageId":"201","endLine":2,"endColumn":156},{"ruleId":"198","severity":1,"message":"235","line":2,"column":204,"nodeType":"200","messageId":"201","endLine":2,"endColumn":210},{"ruleId":"198","severity":1,"message":"236","line":2,"column":212,"nodeType":"200","messageId":"201","endLine":2,"endColumn":218},{"ruleId":"198","severity":1,"message":"237","line":2,"column":220,"nodeType":"200","messageId":"201","endLine":2,"endColumn":226},{"ruleId":"198","severity":1,"message":"238","line":2,"column":228,"nodeType":"200","messageId":"201","endLine":2,"endColumn":239},{"ruleId":"198","severity":1,"message":"239","line":2,"column":261,"nodeType":"200","messageId":"201","endLine":2,"endColumn":272},{"ruleId":"198","severity":1,"message":"240","line":2,"column":282,"nodeType":"200","messageId":"201","endLine":2,"endColumn":292},{"ruleId":"208","severity":1,"message":"209","line":45,"column":9,"nodeType":"210","messageId":"211","endLine":55,"endColumn":10},{"ruleId":"241","severity":1,"message":"242","line":81,"column":9,"nodeType":"243","endLine":81,"endColumn":69},{"ruleId":"241","severity":1,"message":"242","line":92,"column":19,"nodeType":"243","endLine":92,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":103,"column":55,"nodeType":"223","messageId":"224","endLine":103,"endColumn":57},{"ruleId":"208","severity":1,"message":"209","line":205,"column":9,"nodeType":"210","messageId":"211","endLine":215,"endColumn":10},{"ruleId":"208","severity":1,"message":"209","line":360,"column":9,"nodeType":"210","messageId":"211","endLine":370,"endColumn":10},{"ruleId":"221","severity":1,"message":"222","line":446,"column":54,"nodeType":"223","messageId":"224","endLine":446,"endColumn":56},{"ruleId":"221","severity":1,"message":"222","line":463,"column":54,"nodeType":"223","messageId":"224","endLine":463,"endColumn":56},{"ruleId":"221","severity":1,"message":"222","line":478,"column":54,"nodeType":"223","messageId":"224","endLine":478,"endColumn":56},{"ruleId":"221","severity":1,"message":"222","line":506,"column":54,"nodeType":"223","messageId":"224","endLine":506,"endColumn":56},{"ruleId":"208","severity":1,"message":"209","line":517,"column":9,"nodeType":"210","messageId":"211","endLine":527,"endColumn":10},{"ruleId":"221","severity":1,"message":"222","line":529,"column":54,"nodeType":"223","messageId":"224","endLine":529,"endColumn":56},{"ruleId":"208","severity":1,"message":"209","line":585,"column":9,"nodeType":"210","messageId":"211","endLine":598,"endColumn":10},{"ruleId":"208","severity":1,"message":"209","line":605,"column":9,"nodeType":"210","messageId":"211","endLine":615,"endColumn":10},{"ruleId":"208","severity":1,"message":"209","line":658,"column":9,"nodeType":"210","messageId":"211","endLine":668,"endColumn":10},{"ruleId":"221","severity":1,"message":"244","line":46,"column":19,"nodeType":"223","messageId":"224","endLine":46,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":66,"column":41,"nodeType":"223","messageId":"224","endLine":66,"endColumn":43},{"ruleId":"208","severity":1,"message":"209","line":94,"column":9,"nodeType":"210","messageId":"211","endLine":107,"endColumn":10},{"ruleId":"221","severity":1,"message":"222","line":142,"column":27,"nodeType":"223","messageId":"224","endLine":142,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":142,"column":37,"nodeType":"223","messageId":"224","endLine":142,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":157,"column":27,"nodeType":"223","messageId":"224","endLine":157,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":157,"column":37,"nodeType":"223","messageId":"224","endLine":157,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":191,"column":18,"nodeType":"200","messageId":"247","endLine":191,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":192,"column":19,"nodeType":"223","messageId":"224","endLine":192,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":192,"column":29,"nodeType":"223","messageId":"224","endLine":192,"endColumn":31},{"ruleId":"245","severity":1,"message":"246","line":220,"column":18,"nodeType":"200","messageId":"247","endLine":220,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":221,"column":19,"nodeType":"223","messageId":"224","endLine":221,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":221,"column":29,"nodeType":"223","messageId":"224","endLine":221,"endColumn":31},{"ruleId":"221","severity":1,"message":"222","line":277,"column":27,"nodeType":"223","messageId":"224","endLine":277,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":277,"column":37,"nodeType":"223","messageId":"224","endLine":277,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":292,"column":27,"nodeType":"223","messageId":"224","endLine":292,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":292,"column":37,"nodeType":"223","messageId":"224","endLine":292,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":317,"column":27,"nodeType":"223","messageId":"224","endLine":317,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":317,"column":37,"nodeType":"223","messageId":"224","endLine":317,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":332,"column":27,"nodeType":"223","messageId":"224","endLine":332,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":332,"column":37,"nodeType":"223","messageId":"224","endLine":332,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":356,"column":23,"nodeType":"223","messageId":"224","endLine":356,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":356,"column":33,"nodeType":"223","messageId":"224","endLine":356,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":391,"column":23,"nodeType":"223","messageId":"224","endLine":391,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":391,"column":33,"nodeType":"223","messageId":"224","endLine":391,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":421,"column":23,"nodeType":"223","messageId":"224","endLine":421,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":421,"column":33,"nodeType":"223","messageId":"224","endLine":421,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":483,"column":27,"nodeType":"223","messageId":"224","endLine":483,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":483,"column":37,"nodeType":"223","messageId":"224","endLine":483,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":495,"column":27,"nodeType":"223","messageId":"224","endLine":495,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":495,"column":37,"nodeType":"223","messageId":"224","endLine":495,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":507,"column":27,"nodeType":"223","messageId":"224","endLine":507,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":507,"column":37,"nodeType":"223","messageId":"224","endLine":507,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":519,"column":27,"nodeType":"223","messageId":"224","endLine":519,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":519,"column":37,"nodeType":"223","messageId":"224","endLine":519,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":549,"column":23,"nodeType":"223","messageId":"224","endLine":549,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":549,"column":33,"nodeType":"223","messageId":"224","endLine":549,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":578,"column":23,"nodeType":"223","messageId":"224","endLine":578,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":578,"column":33,"nodeType":"223","messageId":"224","endLine":578,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":637,"column":27,"nodeType":"223","messageId":"224","endLine":637,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":637,"column":37,"nodeType":"223","messageId":"224","endLine":637,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":652,"column":27,"nodeType":"223","messageId":"224","endLine":652,"endColumn":29},{"ruleId":"221","severity":1,"message":"222","line":652,"column":37,"nodeType":"223","messageId":"224","endLine":652,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":684,"column":23,"nodeType":"223","messageId":"224","endLine":684,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":684,"column":33,"nodeType":"223","messageId":"224","endLine":684,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":715,"column":23,"nodeType":"223","messageId":"224","endLine":715,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":715,"column":33,"nodeType":"223","messageId":"224","endLine":715,"endColumn":35},{"ruleId":"198","severity":1,"message":"226","line":3,"column":45,"nodeType":"200","messageId":"201","endLine":3,"endColumn":52},{"ruleId":"198","severity":1,"message":"227","line":3,"column":54,"nodeType":"200","messageId":"201","endLine":3,"endColumn":61},{"ruleId":"198","severity":1,"message":"248","line":3,"column":63,"nodeType":"200","messageId":"201","endLine":3,"endColumn":66},{"ruleId":"198","severity":1,"message":"249","line":3,"column":68,"nodeType":"200","messageId":"201","endLine":3,"endColumn":72},{"ruleId":"198","severity":1,"message":"228","line":3,"column":74,"nodeType":"200","messageId":"201","endLine":3,"endColumn":80},{"ruleId":"198","severity":1,"message":"230","line":3,"column":82,"nodeType":"200","messageId":"201","endLine":3,"endColumn":91},{"ruleId":"198","severity":1,"message":"250","line":3,"column":93,"nodeType":"200","messageId":"201","endLine":3,"endColumn":101},{"ruleId":"198","severity":1,"message":"232","line":3,"column":116,"nodeType":"200","messageId":"201","endLine":3,"endColumn":123},{"ruleId":"198","severity":1,"message":"233","line":3,"column":125,"nodeType":"200","messageId":"201","endLine":3,"endColumn":130},{"ruleId":"198","severity":1,"message":"234","line":3,"column":132,"nodeType":"200","messageId":"201","endLine":3,"endColumn":141},{"ruleId":"198","severity":1,"message":"251","line":3,"column":143,"nodeType":"200","messageId":"201","endLine":3,"endColumn":152},{"ruleId":"198","severity":1,"message":"252","line":3,"column":154,"nodeType":"200","messageId":"201","endLine":3,"endColumn":164},{"ruleId":"198","severity":1,"message":"253","line":3,"column":166,"nodeType":"200","messageId":"201","endLine":3,"endColumn":171},{"ruleId":"198","severity":1,"message":"254","line":3,"column":173,"nodeType":"200","messageId":"201","endLine":3,"endColumn":177},{"ruleId":"198","severity":1,"message":"235","line":3,"column":189,"nodeType":"200","messageId":"201","endLine":3,"endColumn":195},{"ruleId":"198","severity":1,"message":"236","line":3,"column":197,"nodeType":"200","messageId":"201","endLine":3,"endColumn":203},{"ruleId":"198","severity":1,"message":"237","line":3,"column":205,"nodeType":"200","messageId":"201","endLine":3,"endColumn":211},{"ruleId":"198","severity":1,"message":"238","line":3,"column":213,"nodeType":"200","messageId":"201","endLine":3,"endColumn":224},{"ruleId":"198","severity":1,"message":"255","line":3,"column":226,"nodeType":"200","messageId":"201","endLine":3,"endColumn":230},{"ruleId":"198","severity":1,"message":"256","line":3,"column":232,"nodeType":"200","messageId":"201","endLine":3,"endColumn":244},{"ruleId":"198","severity":1,"message":"239","line":3,"column":246,"nodeType":"200","messageId":"201","endLine":3,"endColumn":257},{"ruleId":"198","severity":1,"message":"257","line":3,"column":282,"nodeType":"200","messageId":"201","endLine":3,"endColumn":287},{"ruleId":"198","severity":1,"message":"258","line":4,"column":17,"nodeType":"200","messageId":"201","endLine":4,"endColumn":26},{"ruleId":"198","severity":1,"message":"259","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":12},{"ruleId":"198","severity":1,"message":"260","line":7,"column":7,"nodeType":"200","messageId":"201","endLine":7,"endColumn":24},{"ruleId":"198","severity":1,"message":"261","line":110,"column":40,"nodeType":"200","messageId":"201","endLine":110,"endColumn":45},{"ruleId":"198","severity":1,"message":"262","line":125,"column":47,"nodeType":"200","messageId":"201","endLine":125,"endColumn":50},{"ruleId":"198","severity":1,"message":"263","line":161,"column":20,"nodeType":"200","messageId":"201","endLine":161,"endColumn":27},{"ruleId":"198","severity":1,"message":"264","line":163,"column":15,"nodeType":"200","messageId":"201","endLine":163,"endColumn":24},{"ruleId":"198","severity":1,"message":"265","line":163,"column":26,"nodeType":"200","messageId":"201","endLine":163,"endColumn":34},{"ruleId":"198","severity":1,"message":"258","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"217","severity":1,"message":"218","line":27,"column":22,"nodeType":"219","messageId":"220","endLine":27,"endColumn":34},{"ruleId":"198","severity":1,"message":"266","line":31,"column":18,"nodeType":"200","messageId":"201","endLine":31,"endColumn":19},{"ruleId":"221","severity":1,"message":"244","line":124,"column":35,"nodeType":"223","messageId":"224","endLine":124,"endColumn":37},{"ruleId":"208","severity":1,"message":"209","line":152,"column":9,"nodeType":"210","messageId":"211","endLine":177,"endColumn":10},{"ruleId":"208","severity":1,"message":"209","line":210,"column":9,"nodeType":"210","messageId":"211","endLine":227,"endColumn":10},{"ruleId":"198","severity":1,"message":"267","line":7,"column":5,"nodeType":"200","messageId":"201","endLine":7,"endColumn":22},{"ruleId":"198","severity":1,"message":"268","line":8,"column":5,"nodeType":"200","messageId":"201","endLine":8,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":58,"column":9,"nodeType":"210","messageId":"211","endLine":78,"endColumn":10},"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'Stats' is assigned a value but never used.","'Whisper' is defined but never used.","'Tooltip' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'CatmullRomCurve3' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-native-reassign",["269"],"no-negated-in-lhs",["270"],"'BufferGeometry' is defined but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Dropdown' is defined but never used.","'Sidebar' is defined but never used.","'Sidenav' is defined but never used.","'Navbar' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'InputNumber' is defined but never used.","'Content' is defined but never used.","'Panel' is defined but never used.","'HelpBlock' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","'Button' is defined but never used.","'FlexboxGrid' is defined but never used.","'FormControl' is defined but never used.","'IconButton' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","no-redeclare","'j' is already defined.","redeclared","'Nav' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'FormGroup' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'Form' is defined but never used.","'ControlLabel' is defined but never used.","'Input' is defined but never used.","'Component' is defined but never used.","'View' is defined but never used.","'TITLE_LEFT_MARGIN' is assigned a value but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'disable' is assigned a value but never used.","'graduated' is defined but never used.","'progress' is defined but never used.","'i' is assigned a value but never used.","'WireframeGeometry' is defined but never used.","'LineSegments' is defined but never used.","no-global-assign","no-unsafe-negation"]